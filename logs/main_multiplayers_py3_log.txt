Loaded experiments configuration from 'configuration.py' :
configuration = {'verbosity': 8, 'averageOn': 0.001, 'repetitions': 8, 'environment': [{'params': [0.005, 0.01, 0.015, 0.02, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.78, 0.8, 0.82, 0.83, 0.84, 0.85], 'arm_type': <class 'Arms.Bernoulli.Bernoulli'>}], 'collisionModel': <function onlyUniqUserGetsReward at 0x7efdf537bae8>, 'finalRanksOnAverage': True, 'horizon': 500, 'n_jobs': -1, 'players': [{'params': {}, 'archtype': <class 'PoliciesMultiPlayers.Dummy.Dummy'>}, {'params': {'armIndex': 16}, 'archtype': <class 'PoliciesMultiPlayers.TakeFixedArm.TakeFixedArm'>}, {'params': {'armIndexes': [0, 16]}, 'archtype': <class 'PoliciesMultiPlayers.UniformOnSome.UniformOnSome'>}, {'params': {'armIndexes': [13, 14, 15, 16]}, 'archtype': <class 'PoliciesMultiPlayers.UniformOnSome.UniformOnSome'>}, {'params': {'armIndexes': [6, 7, 8, 9]}, 'archtype': <class 'PoliciesMultiPlayers.UniformOnSome.UniformOnSome'>}, {'params': {'armIndexes': [0, 1, 15, 16]}, 'archtype': <class 'PoliciesMultiPlayers.UniformOnSome.UniformOnSome'>}, {'params': {'armIndexes': [0, 1, 2, 3]}, 'archtype': <class 'PoliciesMultiPlayers.UniformOnSome.UniformOnSome'>}, {'params': {}, 'archtype': <class 'Policies.UCB.UCB'>}, {'params': {}, 'archtype': <class 'Policies.UCBV.UCBV'>}, {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>}, {'params': {'learningRate': 0.01, 'children': [{'params': {}, 'archtype': <class 'PoliciesMultiPlayers.Dummy.Dummy'>}, {'params': {'armIndex': 16}, 'archtype': <class 'PoliciesMultiPlayers.TakeFixedArm.TakeFixedArm'>}, {'params': {'armIndexes': [0, 16]}, 'archtype': <class 'PoliciesMultiPlayers.UniformOnSome.UniformOnSome'>}, {'params': {'armIndexes': [13, 14, 15, 16]}, 'archtype': <class 'PoliciesMultiPlayers.UniformOnSome.UniformOnSome'>}, {'params': {'armIndexes': [6, 7, 8, 9]}, 'archtype': <class 'PoliciesMultiPlayers.UniformOnSome.UniformOnSome'>}, {'params': {'armIndexes': [0, 1, 15, 16]}, 'archtype': <class 'PoliciesMultiPlayers.UniformOnSome.UniformOnSome'>}, {'params': {'armIndexes': [0, 1, 2, 3]}, 'archtype': <class 'PoliciesMultiPlayers.UniformOnSome.UniformOnSome'>}, {'params': {}, 'archtype': <class 'Policies.UCB.UCB'>}, {'params': {}, 'archtype': <class 'Policies.UCBV.UCBV'>}, {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>}], 'decreaseRate': None}, 'archtype': <class 'Policies.Aggr.Aggr'>}]}
plots is already a directory here...
Number of players in the multi-players game: 11
Time horizon: 500
Number of repetitions: 8
Using collision model: onlyUniqUserGetsReward
  Detail:  Simple collision model where only the players alone on one arm sample it and receive the reward.

    - This is the default collision model, cf. https://arxiv.org/abs/0910.2065v3 collision model 1.
    - The numpy array 'choices' is increased according to the number of users who collided (it is NOT binary).
    
Number of environments to try: 1

Evaluating environment: <MAB{'arms': [B(0.005), B(0.01), B(0.015), B(0.02), B(0.3), B(0.35), B(0.4), B(0.45), B(0.5), B(0.55), B(0.6), B(0.78), B(0.8), B(0.82), B(0.83), B(0.84), B(0.85)], 'maxArm': 0.85, 'nbArms': 17}>
- Adding player #1 = {'params': {}, 'archtype': <class 'PoliciesMultiPlayers.Dummy.Dummy'>} ...
- Adding player #2 = {'params': {'armIndex': 16}, 'archtype': <class 'PoliciesMultiPlayers.TakeFixedArm.TakeFixedArm'>} ...
- Adding player #3 = {'params': {'armIndexes': [0, 16]}, 'archtype': <class 'PoliciesMultiPlayers.UniformOnSome.UniformOnSome'>} ...
- Adding player #4 = {'params': {'armIndexes': [13, 14, 15, 16]}, 'archtype': <class 'PoliciesMultiPlayers.UniformOnSome.UniformOnSome'>} ...
- Adding player #5 = {'params': {'armIndexes': [6, 7, 8, 9]}, 'archtype': <class 'PoliciesMultiPlayers.UniformOnSome.UniformOnSome'>} ...
- Adding player #6 = {'params': {'armIndexes': [0, 1, 15, 16]}, 'archtype': <class 'PoliciesMultiPlayers.UniformOnSome.UniformOnSome'>} ...
- Adding player #7 = {'params': {'armIndexes': [0, 1, 2, 3]}, 'archtype': <class 'PoliciesMultiPlayers.UniformOnSome.UniformOnSome'>} ...
- Adding player #8 = {'params': {}, 'archtype': <class 'Policies.UCB.UCB'>} ...
- Adding player #9 = {'params': {}, 'archtype': <class 'Policies.UCBV.UCBV'>} ...
- Adding player #10 = {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>} ...
- Adding player #11 = {'params': {'learningRate': 0.01, 'children': [{'params': {}, 'archtype': <class 'PoliciesMultiPlayers.Dummy.Dummy'>}, {'params': {'armIndex': 16}, 'archtype': <class 'PoliciesMultiPlayers.TakeFixedArm.TakeFixedArm'>}, {'params': {'armIndexes': [0, 16]}, 'archtype': <class 'PoliciesMultiPlayers.UniformOnSome.UniformOnSome'>}, {'params': {'armIndexes': [13, 14, 15, 16]}, 'archtype': <class 'PoliciesMultiPlayers.UniformOnSome.UniformOnSome'>}, {'params': {'armIndexes': [6, 7, 8, 9]}, 'archtype': <class 'PoliciesMultiPlayers.UniformOnSome.UniformOnSome'>}, {'params': {'armIndexes': [0, 1, 15, 16]}, 'archtype': <class 'PoliciesMultiPlayers.UniformOnSome.UniformOnSome'>}, {'params': {'armIndexes': [0, 1, 2, 3]}, 'archtype': <class 'PoliciesMultiPlayers.UniformOnSome.UniformOnSome'>}, {'params': {}, 'archtype': <class 'Policies.UCB.UCB'>}, {'params': {}, 'archtype': <class 'Policies.UCBV.UCBV'>}, {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>}], 'decreaseRate': None}, 'archtype': <class 'Policies.Aggr.Aggr'>} ...
Giving the final ranks ...

Final ranking for this environment #0 :
- Player 'Dummy'	was ranked	1 / 11 for this simulation (last regret = -0.375).
- Player 'UniformOnSome([6, 7, 8, 9])'	was ranked	2 / 11 for this simulation (last regret = -0.375).
- Player 'TakeFixedArm(16)'	was ranked	3 / 11 for this simulation (last regret = -0.250).
- Player 'UniformOnSome([13, 14, 15, 16])'	was ranked	4 / 11 for this simulation (last regret = -0.250).
- Player 'Thompson'	was ranked	5 / 11 for this simulation (last regret = -0.250).
- Player 'UniformOnSome([0, 1, 15, 16])'	was ranked	6 / 11 for this simulation (last regret = -0.125).
- Player 'UCBV'	was ranked	7 / 11 for this simulation (last regret = -0.125).
- Player 'Aggr (nb:10, rate:0.01)'	was ranked	8 / 11 for this simulation (last regret = -0.125).
- Player 'UniformOnSome([0, 16])'	was ranked	9 / 11 for this simulation (last regret = 0.000).
- Player 'UniformOnSome([0, 1, 2, 3])'	was ranked	10 / 11 for this simulation (last regret = 0.000).
- Player 'UCB'	was ranked	11 / 11 for this simulation (last regret = 0.000).
plots/MP__M11_T500_N8__11_algos is already a directory here...
- Plotting the decentralized rewards, and saving the plot to plots/MP__M11_T500_N8__11_algos/main____env1-1_3953274402244865874.png ...
Saving to plots/MP__M11_T500_N8__11_algos/main____env1-1_3953274402244865874.png ...
Unable to maximize window...
- Plotting the centralized  rewards, and saving the plot to plots/MP__M11_T500_N8__11_algos/main_RewardsCentralized____env1-1_3953274402244865874.png ...
Saving to plots/MP__M11_T500_N8__11_algos/main_RewardsCentralized____env1-1_3953274402244865874.png ...
Unable to maximize window...
 - Plotting the probability of picking the best arm, and saving the plot to plots/MP__M11_T500_N8__11_algos/main_BestArmPulls_RewardsCentralized____env1-1_3953274402244865874.png ...
Saving to plots/MP__M11_T500_N8__11_algos/main_BestArmPulls_RewardsCentralized____env1-1_3953274402244865874.png ...
Unable to maximize window...
 - Plotting the frequency of collision in each arm, and saving the plot to plots/MP__M11_T500_N8__11_algos/main_FrequencyCollisions_BestArmPulls_RewardsCentralized____env1-1_3953274402244865874.png ...
  - For Arm #1: Bernoulli, frequency of collisions is 395.375  ...
  - For Arm #2: Bernoulli, frequency of collisions is 127.5  ...
  - For Arm #3: Bernoulli, frequency of collisions is 26.5  ...
  - For Arm #4: Bernoulli, frequency of collisions is 29.875  ...
  - For Arm #5: Bernoulli, frequency of collisions is 3.25  ...
  - For Arm #6: Bernoulli, frequency of collisions is 2.25  ...
  - For Arm #7: Bernoulli, frequency of collisions is 36.625  ...
  - For Arm #8: Bernoulli, frequency of collisions is 31.875  ...
  - For Arm #9: Bernoulli, frequency of collisions is 40.375  ...
  - For Arm #10: Bernoulli, frequency of collisions is 35.25  ...
  - For Arm #11: Bernoulli, frequency of collisions is 5.0  ...
  - For Arm #12: Bernoulli, frequency of collisions is 8.625  ...
  - For Arm #13: Bernoulli, frequency of collisions is 18.125  ...
  - For Arm #14: Bernoulli, frequency of collisions is 61.0  ...
  - For Arm #15: Bernoulli, frequency of collisions is 117.625  ...
  - For Arm #16: Bernoulli, frequency of collisions is 216.125  ...
  - For Arm #17: Bernoulli, frequency of collisions is 2131.625  ...
[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
[0;32m/home/lilian/ownCloud/cloud.openmailbox.org/Th√®se_2016-17/src/AlgoBandits.git/main_multiplayers.py[0m in [0;36m<module>[0;34m()[0m
[1;32m     80[0m             [0msavefig[0m [0;34m=[0m [0msavefig[0m[0;34m.[0m[0mreplace[0m[0;34m([0m[0;34m'main'[0m[0;34m,[0m [0;34m'main_FrequencyCollisions'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m     81[0m             [0mprint[0m[0;34m([0m[0;34m" - Plotting the frequency of collision in each arm, and saving the plot to {} ..."[0m[0;34m.[0m[0mformat[0m[0;34m([0m[0msavefig[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0m
[0;32m---> 82[0;31m             [0mevaluation[0m[0;34m.[0m[0mplotFrequencyCollisions[0m[0;34m([0m[0menvId[0m[0;34m,[0m [0msavefig[0m[0;34m=[0m[0msavefig[0m[0;34m,[0m [0mpiechart[0m[0;34m=[0m[0mpiechart[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     83[0m [0;34m[0m[0m
[1;32m     84[0m             [0minput[0m[0;34m([0m[0;34m"\n\nCan we continue to the next environment? [Enter]"[0m[0;34m)[0m  [0;31m# DEBUG[0m[0;34m[0m[0m

[0;32m/home/lilian/ownCloud/cloud.openmailbox.org/Th√®se_2016-17/src/AlgoBandits.git/Environment/EvaluatorMultiPlayers.py[0m in [0;36mplotFrequencyCollisions[0;34m(self, environmentId, savefig, piechart)[0m
[1;32m    224[0m             [0;31m# Y /= np.sum(Y)  # XXX Should we feed a normalized vector to plt.pie or plt.hist ?[0m[0;34m[0m[0;34m[0m[0m
[1;32m    225[0m             [0mplt[0m[0;34m.[0m[0mpie[0m[0;34m([0m[0mY[0m[0;34m,[0m [0mlabels[0m[0;34m=[0m[0mlabels[0m[0;34m,[0m [0mcolors[0m[0;34m=[0m[0mcolors[0m[0;34m[[0m[0;34m:[0m[0mlen[0m[0;34m([0m[0mlabels[0m[0;34m)[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0m
[0;32m--> 226[0;31m             [0mplt[0m[0;34m.[0m[0maxes[0m[0;34m([0m[0;34m'equal'[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    227[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    228[0m             [0mplt[0m[0;34m.[0m[0mhist[0m[0;34m([0m[0mY[0m[0;34m,[0m [0mbins[0m[0;34m=[0m[0mnbArms[0m[0;34m)[0m[0;34m[0m[0m

[0;32m/usr/local/lib/python3.4/dist-packages/matplotlib/pyplot.py[0m in [0;36maxes[0;34m(*args, **kwargs)[0m
[1;32m    882[0m     [0;32melse[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    883[0m         [0mrect[0m [0;34m=[0m [0marg[0m[0;34m[0m[0m
[0;32m--> 884[0;31m         [0ma[0m [0;34m=[0m [0mgcf[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0madd_axes[0m[0;34m([0m[0mrect[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    885[0m     [0;32mreturn[0m [0ma[0m[0;34m[0m[0m
[1;32m    886[0m [0;34m[0m[0m

[0;32m/usr/local/lib/python3.4/dist-packages/matplotlib/figure.py[0m in [0;36madd_axes[0;34m(self, *args, **kwargs)[0m
[1;32m    913[0m [0;34m[0m[0m
[1;32m    914[0m             [0;31m# create the new axes using the axes class given[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 915[0;31m             [0ma[0m [0;34m=[0m [0mprojection_class[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mrect[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    916[0m [0;34m[0m[0m
[1;32m    917[0m         [0mself[0m[0;34m.[0m[0m_axstack[0m[0;34m.[0m[0madd[0m[0;34m([0m[0mkey[0m[0;34m,[0m [0ma[0m[0;34m)[0m[0;34m[0m[0m

[0;32m/usr/local/lib/python3.4/dist-packages/matplotlib/axes/_base.py[0m in [0;36m__init__[0;34m(self, fig, rect, axisbg, frameon, sharex, sharey, label, xscale, yscale, **kwargs)[0m
[1;32m    470[0m             [0mself[0m[0;34m.[0m[0m_position[0m [0;34m=[0m [0mrect[0m[0;34m[0m[0m
[1;32m    471[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 472[0;31m             [0mself[0m[0;34m.[0m[0m_position[0m [0;34m=[0m [0mmtransforms[0m[0;34m.[0m[0mBbox[0m[0;34m.[0m[0mfrom_bounds[0m[0;34m([0m[0;34m*[0m[0mrect[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    473[0m         [0mself[0m[0;34m.[0m[0m_originalPosition[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_position[0m[0;34m.[0m[0mfrozen[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m
[1;32m    474[0m         [0;31m# self.set_axes(self)[0m[0;34m[0m[0;34m[0m[0m

[0;31mTypeError[0m: from_bounds() takes 4 positional arguments but 5 were given
