Loaded experiments configuration from 'configuration.py' :
configuration = {'averageOn': 0.001, 'environment': [{'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': [0.005, 0.01, 0.015, 0.02, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.78, 0.8, 0.82, 0.83, 0.84, 0.85]}], 'players': [<PoliciesMultiPlayers.rhoRand.oneRhoRand object at 0x7f3577d2e5f8>, <PoliciesMultiPlayers.rhoRand.oneRhoRand object at 0x7f3577d2ea20>], 'finalRanksOnAverage': True, 'verbosity': 6, 'collisionModel': <function onlyUniqUserGetsReward at 0x7f3577e21840>, 'horizon': 20000, 'n_jobs': -1, 'repetitions': 20}
plots/ is already a directory here...
Number of players in the multi-players game: 2
Time horizon: 20000
Number of repetitions: 20
Using collision model: onlyUniqUserGetsReward
  Detail:  Simple collision model where only the players alone on one arm sample it and receive the reward.

    - This is the default collision model, cf. https://arxiv.org/abs/0910.2065v3 collision model 1.
    - The numpy array 'choices' is increased according to the number of users who collided (it is NOT binary).
    
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': [0.005, 0.01, 0.015, 0.02, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.78, 0.8, 0.82, 0.83, 0.84, 0.85]} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [0.005, 0.01, 0.015, 0.02, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.78, 0.8, 0.82, 0.83, 0.84, 0.85]
 - with 'arms' = [B(0.005), B(0.01), B(0.015), B(0.02), B(0.3), B(0.35), B(0.4), B(0.45), B(0.5), B(0.55), B(0.6), B(0.78), B(0.8), B(0.82), B(0.83), B(0.84), B(0.85)]
 - with 'nbArms' = 17
 - with 'maxArm' = 0.85
Number of environments to try: 1

Evaluating environment: <MAB{'nbArms': 17, 'arms': [B(0.005), B(0.01), B(0.015), B(0.02), B(0.3), B(0.35), B(0.4), B(0.45), B(0.5), B(0.55), B(0.6), B(0.78), B(0.8), B(0.82), B(0.83), B(0.84), B(0.85)], 'maxArm': 0.85}>
- Adding player #1 = #1<rhoRand, Thompson, rank:1> ...
  Using this already created player 'player' = #1<rhoRand, Thompson, rank:1> ...
- Adding player #2 = #2<rhoRand, Thompson, rank:1> ...
  Using this already created player 'player' = #2<rhoRand, Thompson, rank:1> ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [2, 1] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [2, 1] ...
 - End of one game, rhoRand player #1<rhoRand, Thompson, rank:1> had rank 1 ...
 - End of one game, rhoRand player #2<rhoRand, Thompson, rank:1> had rank 1 ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [1, 2] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [1, 2] ...
 - End of one game, rhoRand player #1<rhoRand, Thompson, rank:1> had rank 1 ...
 - End of one game, rhoRand player #2<rhoRand, Thompson, rank:1> had rank 1 ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [2, 1] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [1, 2] ...
 - End of one game, rhoRand player #1<rhoRand, Thompson, rank:1> had rank 1 ...
 - End of one game, rhoRand player #2<rhoRand, Thompson, rank:1> had rank 1 ...
 - End of one game, rhoRand player #1<rhoRand, Thompson, rank:1> had rank 1 ...
 - End of one game, rhoRand player #2<rhoRand, Thompson, rank:1> had rank 1 ...
 - End of one game, rhoRand player #1<rhoRand, Thompson, rank:2> had rank 2 ...
 - End of one game, rhoRand player #2<rhoRand, Thompson, rank:2> had rank 2 ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [1, 2] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [2, 1] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [1, 2] ...
 - End of one game, rhoRand player #1<rhoRand, Thompson, rank:1> had rank 1 ...
 - End of one game, rhoRand player #2<rhoRand, Thompson, rank:1> had rank 1 ...
 - End of one game, rhoRand player #1<rhoRand, Thompson, rank:1> had rank 1 ...
 - End of one game, rhoRand player #2<rhoRand, Thompson, rank:1> had rank 1 ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [1, 2] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [1, 2] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [1, 2] ...
 - End of one game, rhoRand player #1<rhoRand, Thompson, rank:1> had rank 1 ...
 - End of one game, rhoRand player #2<rhoRand, Thompson, rank:1> had rank 1 ...
Giving the final ranks ...

Final ranking for this environment #0 :
- Player #2, '#2<rhoRand, Thompson, rank:1>'	was ranked	1 / 2 for this simulation (last rewards = 16636.2).
- Player #1, '#1<rhoRand, Thompson, rank:1>'	was ranked	2 / 2 for this simulation (last rewards = 16563.2).
plots/MP__M2_T20000_N20__2_algos is already a directory here...
- Plotting the decentralized rewards, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main____env1-1_5675779730762099611.png ...
Saving to plots/MP__M2_T20000_N20__2_algos/main____env1-1_5675779730762099611.png ...
- Plotting the centralized  rewards, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main_RewardsCentralized____env1-1_5675779730762099611.png ...
Saving to plots/MP__M2_T20000_N20__2_algos/main_RewardsCentralized____env1-1_5675779730762099611.png ...
 - Plotting the total nb of collision as a function of time, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main_NbCollisions_RewardsCentralized____env1-1_5675779730762099611.png ...
 - Plotting the cumulated total nb of collision as a function of time, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main_NbCollisionsCum_NbCollisions_RewardsCentralized____env1-1_5675779730762099611.png ...
 - Plotting the frequency of collision in each arm, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main_FrequencyCollisions_NbCollisionsCum_NbCollisions_RewardsCentralized____env1-1_5675779730762099611.png ...
  - For #$0$: $B(0.005)$,	frequency of collisions is 7.5e-06  ...
  - For #$1$: $B(0.01)$,	frequency of collisions is 2.5e-06  ...
  - For #$2$: $B(0.015)$,	frequency of collisions is 2.5e-06  ...
  - For #$3$: $B(0.02)$,	frequency of collisions is 0  ...
  - For #$4$: $B(0.3)$,	frequency of collisions is 5e-06  ...
  - For #$5$: $B(0.35)$,	frequency of collisions is 5e-06  ...
  - For #$6$: $B(0.4)$,	frequency of collisions is 1.75e-05  ...
  - For #$7$: $B(0.45)$,	frequency of collisions is 1e-05  ...
  - For #$8$: $B(0.5)$,	frequency of collisions is 2.25e-05  ...
  - For #$9$: $B(0.55)$,	frequency of collisions is 1.5e-05  ...
  - For #$10$: $B(0.6)$,	frequency of collisions is 2e-05  ...
  - For #$11$: $B(0.78)$,	frequency of collisions is 0.000205  ...
  - For #$12$: $B(0.8)$,	frequency of collisions is 0.000285  ...
  - For #$13$: $B(0.82)$,	frequency of collisions is 0.0003775  ...
  - For #$14$: $B(0.83)$,	frequency of collisions is 0.000475  ...
  - For #$15$: $B(0.84)$,	frequency of collisions is 0.0004975  ...
  - For #$16$: $B(0.85)$,	frequency of collisions is 0.0004875  ...
