 - Setting dpi of all figures to 110 ...
 - Setting 'figsize' of all figures to (19.8, 10.8) ...
Info: numba.jit seems to be available.
Info: numba.jit seems to be available.
 - One new child, of index 0, and class #1<CentralizedMultiplePlay(UCB)> ...
 - One new child, of index 1, and class #2<CentralizedMultiplePlay(UCB)> ...
Loaded experiments configuration from 'configuration.py' :
configuration = {'delta_t_save': 1, 'verbosity': 6, 'finalRanksOnAverage': True, 'collisionModel': <function onlyUniqUserGetsReward at 0x7f13a116d6a8>, 'successive_players': [[Selfish(UCB($\alpha=1$)), Selfish(UCB($\alpha=1$))], [Selfish(UCB($\alpha=0.25$)), Selfish(UCB($\alpha=0.25$))], [Selfish(KL-UCB(Bern)), Selfish(KL-UCB(Bern))], [Selfish(KL-UCB+(Bern)), Selfish(KL-UCB+(Bern))], [Selfish(Thompson), Selfish(Thompson)], [Selfish(Softmax(decreasing)), Selfish(Softmax(decreasing))], [Selfish(BayesUCB), Selfish(BayesUCB)]], 'averageOn': 0.001, 'horizon': 5000, 'environment': [{'params': [0.3, 0.4, 0.5, 0.6, 0.7], 'arm_type': <class 'Arms.Bernoulli.Bernoulli'>}], 'repetitions': 4, 'n_jobs': -1, 'players': [CentralizedMultiplePlay(UCB), CentralizedMultiplePlay(UCB)]}
plots/ is already a directory here...
Number of players in the multi-players game: 2
Time horizon: 5000
Number of repetitions: 4
Sampling rate DELTA_T_SAVE: 1
Using collision model: onlyUniqUserGetsReward
  Detail:  Simple collision model where only the players alone on one arm sample it and receive the reward.

    - This is the default collision model, cf. https://arxiv.org/abs/0910.2065v3 collision model 1.
    - The numpy array 'choices' is increased according to the number of users who collided (it is NOT binary).
    
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'params': [0.3, 0.4, 0.5, 0.6, 0.7], 'arm_type': <class 'Arms.Bernoulli.Bernoulli'>} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [0.3, 0.4, 0.5, 0.6, 0.7]
 - with 'arms' = [B(0.3), B(0.4), B(0.5), B(0.6), B(0.7)]
 - with 'nbArms' = 5
 - with 'maxArm' = 0.7
 - with 'minArm' = 0.3

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 9.46 ... 
 - a Optimal Arm Identification factor H_OI(mu) = 60.00% ...
Number of environments to try: 1

Evaluating environment: <MAB{'maxArm': 0.69999999999999996, 'arms': [B(0.3), B(0.4), B(0.5), B(0.6), B(0.7)], 'nbArms': 5, 'minArm': 0.29999999999999999}>
- Adding player #1 = #1<CentralizedMultiplePlay(UCB)> ...
  Using this already created player 'player' = #1<CentralizedMultiplePlay(UCB)> ...
- Adding player #2 = #2<CentralizedMultiplePlay(UCB)> ...
  Using this already created player 'player' = #2<CentralizedMultiplePlay(UCB)> ...
[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
[0;32m/home/lilian/ownCloud/cloud.openmailbox.org/Th√®se_2016-17/src/AlgoBandits.git/main_multiplayers.py[0m in [0;36m<module>[0;34m()[0m
[1;32m     60[0m     [0;32mfor[0m [0menvId[0m[0;34m,[0m [0menv[0m [0;32min[0m [0menumerate[0m[0;34m([0m[0mevaluation[0m[0;34m.[0m[0menvs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     61[0m         [0;31m# Evaluate just that env[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 62[0;31m         [0mevaluation[0m[0;34m.[0m[0mstartOneEnv[0m[0;34m([0m[0menvId[0m[0;34m,[0m [0menv[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     63[0m         [0;31m# Display the final rankings for that env[0m[0;34m[0m[0;34m[0m[0m
[1;32m     64[0m         [0mprint[0m[0;34m([0m[0;34m"Giving the final ranks ..."[0m[0;34m)[0m[0;34m[0m[0m

[0;32m/home/lilian/ownCloud/cloud.openmailbox.org/Th√®se_2016-17/src/AlgoBandits.git/Environment/EvaluatorMultiPlayers.py[0m in [0;36mstartOneEnv[0;34m(self, envId, env)[0m
[1;32m    107[0m         [0mmeans[0m [0;34m=[0m [0menv[0m[0;34m.[0m[0mmeans[0m[0;34m[0m[0m
[1;32m    108[0m         [0mbestarm[0m [0;34m=[0m [0menv[0m[0;34m.[0m[0mmaxArm[0m[0;34m[0m[0m
[0;32m--> 109[0;31m         [0mindex_bestarm[0m [0;34m=[0m [0mnp[0m[0;34m.[0m[0mnonzero[0m[0;34m([0m[0mnp[0m[0;34m.[0m[0misclose[0m[0;34m([0m[0mmeans[0m[0;34m,[0m [0mbestarm[0m[0;34m)[0m[0;34m)[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m[0m[0m
[0m[1;32m    110[0m [0;34m[0m[0m
[1;32m    111[0m         [0;32mdef[0m [0mstore[0m[0;34m([0m[0mr[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m

[0;32m/usr/local/lib/python3.5/dist-packages/numpy/core/numeric.py[0m in [0;36misclose[0;34m(a, b, rtol, atol, equal_nan)[0m
[1;32m   2555[0m     [0my[0m [0;34m=[0m [0marray[0m[0;34m([0m[0my[0m[0;34m,[0m [0mdtype[0m[0;34m=[0m[0mdt[0m[0;34m,[0m [0mcopy[0m[0;34m=[0m[0;32mFalse[0m[0;34m,[0m [0msubok[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0m
[1;32m   2556[0m [0;34m[0m[0m
[0;32m-> 2557[0;31m     [0mxfin[0m [0;34m=[0m [0misfinite[0m[0;34m([0m[0mx[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   2558[0m     [0myfin[0m [0;34m=[0m [0misfinite[0m[0;34m([0m[0my[0m[0;34m)[0m[0;34m[0m[0m
[1;32m   2559[0m     [0;32mif[0m [0mall[0m[0;34m([0m[0mxfin[0m[0;34m)[0m [0;32mand[0m [0mall[0m[0;34m([0m[0myfin[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m

[0;31mTypeError[0m: ufunc 'isfinite' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''
