 - Setting dpi of all figures to 110 ...
 - Setting 'figsize' of all figures to (19.8, 10.8) ...
Loaded experiments configuration from 'configuration.py' :
configuration = {'horizon': 10000, 'delta_t_save': 1, 'repetitions': 20, 'n_jobs': -1, 'collisionModel': <function onlyUniqUserGetsReward at 0x7f505c9bc2f0>, 'environment': [{'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': [0.10000000000000001, 0.20000000000000001, 0.30000000000000004, 0.40000000000000002, 0.5, 0.59999999999999998, 0.70000000000000007, 0.80000000000000004, 0.90000000000000002]}], 'players': [Thompson, Thompson], 'averageOn': 0.001, 'finalRanksOnAverage': True, 'verbosity': 6}
plots/ is already a directory here...
Number of players in the multi-players game: 2
Time horizon: 10000
Number of repetitions: 20
Sampling rate DELTA_T_SAVE: 1
Using collision model: onlyUniqUserGetsReward
  Detail:  Simple collision model where only the players alone on one arm sample it and receive the reward.

    - This is the default collision model, cf. https://arxiv.org/abs/0910.2065v3 collision model 1.
    - The numpy array 'choices' is increased according to the number of users who collided (it is NOT binary).
    
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': [0.10000000000000001, 0.20000000000000001, 0.30000000000000004, 0.40000000000000002, 0.5, 0.59999999999999998, 0.70000000000000007, 0.80000000000000004, 0.90000000000000002]} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [0.10000000000000001, 0.20000000000000001, 0.30000000000000004, 0.40000000000000002, 0.5, 0.59999999999999998, 0.70000000000000007, 0.80000000000000004, 0.90000000000000002]
 - with 'arms' = [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)]
 - with 'nbArms' = 9
 - with 'maxArm' = 0.9
 - with 'minArm' = 0.1
Number of environments to try: 1

Evaluating environment: <MAB{'minArm': 0.10000000000000001, 'arms': [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)], 'nbArms': 9, 'maxArm': 0.90000000000000002}>
- Adding player #1 = #1<Thompson> ...
  Using this already created player 'player' = #1<Thompson> ...
- Adding player #2 = #2<Thompson> ...
  Using this already created player 'player' = #2<Thompson> ...
Giving the final ranks ...

Final ranking for this environment #0 :
- Player #2, '#2<Thompson>'	was ranked	1 / 2 for this simulation (last rewards = 8643.6).
- Player #1, '#1<Thompson>'	was ranked	2 / 2 for this simulation (last rewards = 8233).


- Plotting the decentralized rewards


- Plotting the centralized regret
  - For 2 player, our lower bound gave = 20.087060498005187 ...
  - For 2 player, the initial lower bound in Theorem 6 from [Anandkumar et al., 2010] gave = 13.779784637458883 ...
 - Our lowerbound = 20.087060498005187,
 - anandkumar_lowerbound = 13.779784637458883


- Plotting the centralized regret
  - For 2 player, our lower bound gave = 20.087060498005187 ...
  - For 2 player, the initial lower bound in Theorem 6 from [Anandkumar et al., 2010] gave = 13.779784637458883 ...
 - Our lowerbound = 20.087060498005187,
 - anandkumar_lowerbound = 13.779784637458883


- Plotting the normalized centralized rewards
  - For 2 player, our lower bound gave = 20.087060498005187 ...
  - For 2 player, the initial lower bound in Theorem 6 from [Anandkumar et al., 2010] gave = 13.779784637458883 ...
 - Our lowerbound = 20.087060498005187,
 - anandkumar_lowerbound = 13.779784637458883


- Plotting the number of switches


- Plotting the cumulative number of switches
 - Plotting the probability of picking the best arm
 - Plotting the total nb of collision as a function of time
 - Plotting the cumulated total nb of collision as a function of time
 - Plotting the frequency of collision in each arm
  - For #$0$: $B(0.1)$,	frequency of collisions is 2e-05  ...
  - For #$1$: $B(0.2)$,	frequency of collisions is 1.5e-05  ...
  - For #$2$: $B(0.3)$,	frequency of collisions is 2.5e-05  ...
  - For #$3$: $B(0.4)$,	frequency of collisions is 3.5e-05  ...
  - For #$4$: $B(0.5)$,	frequency of collisions is 5.5e-05  ...
  - For #$5$: $B(0.6)$,	frequency of collisions is 0.000145  ...
  - For #$6$: $B(0.7)$,	frequency of collisions is 0.0002  ...
  - For #$7$: $B(0.8)$,	frequency of collisions is 0.000535  ...
  - For #$8$: $B(0.9)$,	frequency of collisions is 0.00084  ...
Done for simulations main_multiplayers.py ...
