Loaded experiments configuration from 'configuration.py' :
configuration = {'repetitions': 20, 'averageOn': 0.001, 'players': [{'params': {}, 'archtype': <class 'Policies.TakeRandomFixedArm.TakeRandomFixedArm'>}, {'params': {}, 'archtype': <class 'Policies.TakeRandomFixedArm.TakeRandomFixedArm'>}, {'params': {}, 'archtype': <class 'Policies.TakeRandomFixedArm.TakeRandomFixedArm'>}, {'params': {}, 'archtype': <class 'Policies.TakeRandomFixedArm.TakeRandomFixedArm'>}, {'params': {}, 'archtype': <class 'Policies.TakeRandomFixedArm.TakeRandomFixedArm'>}, {'params': {}, 'archtype': <class 'Policies.TakeRandomFixedArm.TakeRandomFixedArm'>}, {'params': {}, 'archtype': <class 'Policies.TakeRandomFixedArm.TakeRandomFixedArm'>}, {'params': {}, 'archtype': <class 'Policies.TakeRandomFixedArm.TakeRandomFixedArm'>}, {'params': {}, 'archtype': <class 'Policies.TakeRandomFixedArm.TakeRandomFixedArm'>}, {'params': {}, 'archtype': <class 'Policies.TakeRandomFixedArm.TakeRandomFixedArm'>}], 'horizon': 10000, 'environment': [{'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': [0.005, 0.01, 0.015, 0.02, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.78, 0.8, 0.82, 0.83, 0.84, 0.85]}], 'collisionModel': <function onlyUniqUserGetsReward at 0x7fbca312fa60>, 'verbosity': 8, 'n_jobs': -1, 'finalRanksOnAverage': True}
plots is already a directory here...
Number of players in the multi-players game: 10
Time horizon: 10000
Number of repetitions: 20
Using collision model: onlyUniqUserGetsReward
  Detail:  Simple collision model where only the players alone on one arm sample it and receive the reward.

    - This is the default collision model, cf. https://arxiv.org/abs/0910.2065v3 collision model 1.
    - The numpy array 'choices' is increased according to the number of users who collided (it is NOT binary).
    
Number of environments to try: 1

Evaluating environment: <MAB{'maxArm': 0.85, 'nbArms': 17, 'arms': [B(0.005), B(0.01), B(0.015), B(0.02), B(0.3), B(0.35), B(0.4), B(0.45), B(0.5), B(0.55), B(0.6), B(0.78), B(0.8), B(0.82), B(0.83), B(0.84), B(0.85)]}>
- Adding player #1 = {'params': {}, 'archtype': <class 'Policies.TakeRandomFixedArm.TakeRandomFixedArm'>} ...
New player following TakeRandomFixedArm with arms [11 12  3  6 14 10  8  7  0  2  5  9 16  4 15  1 13]
- Adding player #2 = {'params': {}, 'archtype': <class 'Policies.TakeRandomFixedArm.TakeRandomFixedArm'>} ...
New player following TakeRandomFixedArm with arms [15  3  5  4 13 16  7  6 10 14 12  1 11  0  9]
- Adding player #3 = {'params': {}, 'archtype': <class 'Policies.TakeRandomFixedArm.TakeRandomFixedArm'>} ...
New player following TakeRandomFixedArm with arms [ 3  5 13]
- Adding player #4 = {'params': {}, 'archtype': <class 'Policies.TakeRandomFixedArm.TakeRandomFixedArm'>} ...
New player following TakeRandomFixedArm with arms [13  4  1  0  6 11 10  2  7  9 12  5  8 15]
- Adding player #5 = {'params': {}, 'archtype': <class 'Policies.TakeRandomFixedArm.TakeRandomFixedArm'>} ...
New player following TakeRandomFixedArm with arms [16 10  4  8 14  6  2 15  0  9]
- Adding player #6 = {'params': {}, 'archtype': <class 'Policies.TakeRandomFixedArm.TakeRandomFixedArm'>} ...
New player following TakeRandomFixedArm with arms [ 4  2 15  1  0  8  9 13  5  3 16  7 10 12 11]
- Adding player #7 = {'params': {}, 'archtype': <class 'Policies.TakeRandomFixedArm.TakeRandomFixedArm'>} ...
New player following TakeRandomFixedArm with arms [ 1 10]
- Adding player #8 = {'params': {}, 'archtype': <class 'Policies.TakeRandomFixedArm.TakeRandomFixedArm'>} ...
New player following TakeRandomFixedArm with arms [13 10  0  4 15 16  8  2  7]
- Adding player #9 = {'params': {}, 'archtype': <class 'Policies.TakeRandomFixedArm.TakeRandomFixedArm'>} ...
New player following TakeRandomFixedArm with arms [ 8 10 12  3  6]
- Adding player #10 = {'params': {}, 'archtype': <class 'Policies.TakeRandomFixedArm.TakeRandomFixedArm'>} ...
New player following TakeRandomFixedArm with arms [ 2  5  1 11 16 12  6]
Giving the final ranks ...

Final ranking for this environment #0 :
- Player 'TakeRandomFixedArm(array([16, 10,  4,  8, 14,  6,  2, 15,  0,  9]))'	was ranked	1 / 10 for this simulation (last regret = 5386.900).
- Player 'TakeRandomFixedArm(array([15,  3,  5,  4, 13, 16,  7,  6, 10, 14, 12,  1, 11,  0,  9]))'	was ranked	2 / 10 for this simulation (last regret = 5417.900).
- Player 'TakeRandomFixedArm(array([ 2,  5,  1, 11, 16, 12,  6]))'	was ranked	3 / 10 for this simulation (last regret = 5552.750).
- Player 'TakeRandomFixedArm(array([11, 12,  3,  6, 14, 10,  8,  7,  0,  2,  5,  9, 16,  4, 15,  1, 13]))'	was ranked	4 / 10 for this simulation (last regret = 5607.500).
- Player 'TakeRandomFixedArm(array([13, 10,  0,  4, 15, 16,  8,  2,  7]))'	was ranked	5 / 10 for this simulation (last regret = 5654.250).
- Player 'TakeRandomFixedArm(array([13,  4,  1,  0,  6, 11, 10,  2,  7,  9, 12,  5,  8, 15]))'	was ranked	6 / 10 for this simulation (last regret = 5835.100).
- Player 'TakeRandomFixedArm(array([ 4,  2, 15,  1,  0,  8,  9, 13,  5,  3, 16,  7, 10, 12, 11]))'	was ranked	7 / 10 for this simulation (last regret = 5837.300).
- Player 'TakeRandomFixedArm(array([ 3,  5, 13]))'	was ranked	8 / 10 for this simulation (last regret = 5847.800).
- Player 'TakeRandomFixedArm(array([ 8, 10, 12,  3,  6]))'	was ranked	9 / 10 for this simulation (last regret = 5903.000).
- Player 'TakeRandomFixedArm(array([ 1, 10]))'	was ranked	10 / 10 for this simulation (last regret = 7008.900).
- Plotting the decentralized rewards, and saving the plot to plots/MP__M10_T10000_N20__10_algos/main____env1-1_8862908603847526193.png ...
Saving to plots/MP__M10_T10000_N20__10_algos/main____env1-1_8862908603847526193.png ...
 - Plotting the probability of picking the best arm, and saving the plot to plots/MP__M10_T10000_N20__10_algos/main_BestArmPulls____env1-1_8862908603847526193.png ...
Saving to plots/MP__M10_T10000_N20__10_algos/main_BestArmPulls____env1-1_8862908603847526193.png ...
 - Plotting the probability of transmission on a free channel, and saving the plot to plots/MP__M10_T10000_N20__10_algos/main_FreeTransmissions_BestArmPulls____env1-1_8862908603847526193.png ...
Saving to plots/MP__M10_T10000_N20__10_algos/main_FreeTransmissions_BestArmPulls____env1-1_8862908603847526193.png ...
 - Plotting the frequency of collision in each arm, and saving the plot to plots/MP__M10_T10000_N20__10_algos/main_FrequencyCollisions_FreeTransmissions_BestArmPulls____env1-1_8862908603847526193.png ...
  - For #$1$: B(0.005), frequency of collisions is 0.15675999999999998  ...
  - For #$2$: B(0.01), frequency of collisions is 0.42916000000000004  ...
  - For #$3$: B(0.015), frequency of collisions is 0.20647999999999997  ...
  - For #$4$: B(0.02), frequency of collisions is 0.30944000000000005  ...
  - For #$5$: B(0.3), frequency of collisions is 0.1551  ...
  - For #$6$: B(0.35), frequency of collisions is 0.32692  ...
  - For #$7$: B(0.4), frequency of collisions is 0.26686000000000004  ...
  - For #$8$: B(0.45), frequency of collisions is 0.09994  ...
  - For #$9$: B(0.5), frequency of collisions is 0.2423  ...
  - For #$10$: B(0.55), frequency of collisions is 0.0936  ...
  - For #$11$: B(0.6), frequency of collisions is 0.75292  ...
  - For #$12$: B(0.78), frequency of collisions is 0.11721999999999998  ...
  - For #$13$: B(0.8), frequency of collisions is 0.2363  ...
  - For #$14$: B(0.82), frequency of collisions is 0.30651999999999996  ...
  - For #$15$: B(0.83), frequency of collisions is 0.029720000000000003  ...
  - For #$16$: B(0.84), frequency of collisions is 0.1591  ...
  - For #$17$: B(0.85), frequency of collisions is 0.20717999999999998  ...
Saving to plots/MP__M10_T10000_N20__10_algos/main_FrequencyCollisions_FreeTransmissions_BestArmPulls____env1-1_8862908603847526193.png ...
