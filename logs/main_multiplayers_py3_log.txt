 - Setting dpi of all figures to 110 ...
 - Setting 'figsize' of all figures to (19.8, 10.8) ...
Info: Using the regular tqdm() decorator ...
Info: numba.jit seems to be available.
Info: numba.jit seems to be available.
Loaded experiments configuration from 'configuration.py' :
configuration = {'delta_t_save': 1, 'collisionModel': <function onlyUniqUserGetsReward at 0x7f7331734d08>, 'environment': [{'params': [0, 0, 0, 1, 1, 1, 0, 0, 0], 'arm_type': <class 'Arms.Bernoulli.Bernoulli'>}], 'successive_players': [[Selfish(BayesUCB), Selfish(BayesUCB), Selfish(BayesUCB)], [rhoRand(BayesUCB), rhoRand(BayesUCB), rhoRand(BayesUCB)], [rhoLearn(BayesUCB), rhoLearn(BayesUCB), rhoLearn(BayesUCB)]], 'verbosity': 6, 'horizon': 500, 'players': [rhoRand(BayesUCB), rhoRand(BayesUCB), rhoRand(BayesUCB)], 'n_jobs': -1, 'repetitions': 20, 'finalRanksOnAverage': True, 'averageOn': 0.001}
plots/ is already a directory here...
Number of players in the multi-players game: 3
Time horizon: 500
Number of repetitions: 20
Sampling rate for saving, delta_t_save: 1
Sampling rate for plotting, delta_t_plot: 1
Number of jobs for parallelization: -1
Using collision model: onlyUniqUserGetsReward
  Detail:  Simple collision model where only the players alone on one arm sample it and receive the reward.

    - This is the default collision model, cf. https://arxiv.org/abs/0910.2065v3 collision model 1.
    - The numpy array 'choices' is increased according to the number of users who collided (it is NOT binary).
    
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'params': [0, 0, 0, 1, 1, 1, 0, 0, 0], 'arm_type': <class 'Arms.Bernoulli.Bernoulli'>} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [0, 0, 0, 1, 1, 1, 0, 0, 0]
 - with 'arms' = [B(0), B(0), B(0), B(1), B(1), B(1), B(0), B(0), B(0)]
 - with 'nbArms' = 9
 - with 'maxArm' = 1
 - with 'minArm' = 0

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 0.174 ... 
 - a Optimal Arm Identification factor H_OI(mu) = 0.00% ...
Number of environments to try: 1

Evaluating environment: MAB(nbArms: 9, arms: [B(0), B(0), B(0), B(1), B(1), B(1), B(0), B(0), B(0)], minArm: 0, maxArm: 1)
- Adding player #1 = #1<$\rho^{\mathrm{Rand}}$, BayesUCB> ...
  Using this already created player 'player' = #1<$\rho^{\mathrm{Rand}}$, BayesUCB> ...
- Adding player #2 = #2<$\rho^{\mathrm{Rand}}$, BayesUCB> ...
  Using this already created player 'player' = #2<$\rho^{\mathrm{Rand}}$, BayesUCB> ...
- Adding player #3 = #3<$\rho^{\mathrm{Rand}}$, BayesUCB> ...
  Using this already created player 'player' = #3<$\rho^{\mathrm{Rand}}$, BayesUCB> ...

Estimated order by the policy #1<$\rho^{\mathrm{Rand}}$, BayesUCB, rank:1> after 500 steps: [0 1 2 6 7 8 3 4 5] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 55.56% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 93.94% (relative success)...
  ==> Spearman    distance from optimal ordering: 87.50% (relative success)...
  ==> Gestalt     distance from optimal ordering: 66.67% (relative success)...
  ==> Mean distance from optimal ordering: 75.92% (relative success)...

Estimated order by the policy #2<$\rho^{\mathrm{Rand}}$, BayesUCB, rank:1> after 500 steps: [0 1 2 6 7 8 3 5 4] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 55.56% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 90.47% (relative success)...
  ==> Spearman    distance from optimal ordering: 86.08% (relative success)...
  ==> Gestalt     distance from optimal ordering: 66.67% (relative success)...
  ==> Mean distance from optimal ordering: 74.69% (relative success)...

Estimated order by the policy #3<$\rho^{\mathrm{Rand}}$, BayesUCB, rank:1> after 500 steps: [2 6 8 0 1 7 4 5 3] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 25.93% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 0.00% (relative success)...
  ==> Spearman    distance from optimal ordering: 0.00% (relative success)...
  ==> Gestalt     distance from optimal ordering: 44.44% (relative success)...
  ==> Mean distance from optimal ordering: 17.59% (relative success)...
Giving the final ranks ...

Final ranking for this environment #0 :
- Player #2, '#2<$\rho^{\mathrm{Rand}}$, BayesUCB>'	was ranked	1 / 3 for this simulation (last rewards = 0.25).
- Player #3, '#3<$\rho^{\mathrm{Rand}}$, BayesUCB>'	was ranked	2 / 3 for this simulation (last rewards = 0.2).
- Player #1, '#1<$\rho^{\mathrm{Rand}}$, BayesUCB>'	was ranked	3 / 3 for this simulation (last rewards = 0.15).


- Plotting the decentralized rewards


- Plotting the centralized fairness (STD)


- Plotting the centralized regret
  - For 3 players, Anandtharam et al. centralized lower-bound gave = 0.174 ...
  - For 3 players, our lower bound gave = 0.521 ...
  - For 3 players, the initial lower bound in Theorem 6 from [Anandkumar et al., 2010] gave = 0.521 ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 0.174 for 1-player problem ... 
 - a Optimal Arm Identification factor H_OI(mu) = 0.00% ...
 - [Anandtharam et al] centralized lowerbound = 0.521,
 - Our decentralized lowerbound = 0.521,
 - [Anandkumar et al] decentralized lowerbound = 0.174


- Plotting the centralized regret
  - For 3 players, Anandtharam et al. centralized lower-bound gave = 0.174 ...
  - For 3 players, our lower bound gave = 0.521 ...
  - For 3 players, the initial lower bound in Theorem 6 from [Anandkumar et al., 2010] gave = 0.521 ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 0.174 for 1-player problem ... 
 - a Optimal Arm Identification factor H_OI(mu) = 0.00% ...
 - [Anandtharam et al] centralized lowerbound = 0.521,
 - Our decentralized lowerbound = 0.521,
 - [Anandkumar et al] decentralized lowerbound = 0.174


- Plotting the centralized regret
  - For 3 players, Anandtharam et al. centralized lower-bound gave = 0.174 ...
  - For 3 players, our lower bound gave = 0.521 ...
  - For 3 players, the initial lower bound in Theorem 6 from [Anandkumar et al., 2010] gave = 0.521 ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 0.174 for 1-player problem ... 
 - a Optimal Arm Identification factor H_OI(mu) = 0.00% ...
 - [Anandtharam et al] centralized lowerbound = 0.521,
 - Our decentralized lowerbound = 0.521,
 - [Anandkumar et al] decentralized lowerbound = 0.174


- Plotting the centralized regret
  - For 3 players, Anandtharam et al. centralized lower-bound gave = 0.174 ...
  - For 3 players, our lower bound gave = 0.521 ...
  - For 3 players, the initial lower bound in Theorem 6 from [Anandkumar et al., 2010] gave = 0.521 ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 0.174 for 1-player problem ... 
 - a Optimal Arm Identification factor H_OI(mu) = 0.00% ...
 - [Anandtharam et al] centralized lowerbound = 0.521,
 - Our decentralized lowerbound = 0.521,
 - [Anandkumar et al] decentralized lowerbound = 0.174


- Plotting the number of switches


- Plotting the cumulative number of switches
 - Plotting the probability of picking the best arm
 - Plotting the total nb of collision as a function of time
No upper bound for the non-cumulated number of collisions...
 - Plotting the cumulated total nb of collision as a function of time
No upper bound for the non-cumulated number of collisions...
 - Plotting the frequency of collision in each arm
  - For #$0$: $B(0)$ ($0.0%$$\%$),	frequency of collisions is 0.000166667  ...
  - For #$1$: $B(0)$ ($0.0%$$\%$),	frequency of collisions is 0.0002  ...
  - For #$2$: $B(0)$ ($0.0%$$\%$),	frequency of collisions is 0.0002  ...
  - For #$3$: $B(1)$ ($2.1%$$\%$),	frequency of collisions is 0.0211667  ...
  - For #$4$: $B(1)$ ($2.0%$$\%$),	frequency of collisions is 0.0195333  ...
  - For #$5$: $B(1)$ ($1.9%$$\%$),	frequency of collisions is 0.0189667  ...
  - For #$6$: $B(0)$ ($0.0%$$\%$),	frequency of collisions is 0.0002  ...
  - For #$7$: $B(0)$ ($0.0%$$\%$),	frequency of collisions is 0.0002  ...
  - For #$8$: $B(0)$ ($0.0%$$\%$),	frequency of collisions is 6.66667e-05  ...
Done for simulations main_multiplayers.py ...
