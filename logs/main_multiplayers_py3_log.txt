Loaded experiments configuration from 'configuration.py' :
configuration = {'collisionModel': <function onlyUniqUserGetsReward at 0x7f8eee545d08>, 'n_jobs': -1, 'horizon': 20000, 'players': [MOSS, MOSS], 'verbosity': 6, 'finalRanksOnAverage': True, 'repetitions': 20, 'averageOn': 0.001, 'environment': [{'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': [0.1, 0.5, 0.9]}]}
plots/ is already a directory here...
Number of players in the multi-players game: 2
Time horizon: 20000
Number of repetitions: 20
Using collision model: onlyUniqUserGetsReward
  Detail:  Simple collision model where only the players alone on one arm sample it and receive the reward.

    - This is the default collision model, cf. https://arxiv.org/abs/0910.2065v3 collision model 1.
    - The numpy array 'choices' is increased according to the number of users who collided (it is NOT binary).
    
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': [0.1, 0.5, 0.9]} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [0.1, 0.5, 0.9]
 - with 'arms' = [B(0.1), B(0.5), B(0.9)]
 - with 'nbArms' = 3
 - with 'maxArm' = 0.9
Number of environments to try: 1

Evaluating environment: <MAB{'nbArms': 3, 'maxArm': 0.90000000000000002, 'arms': [B(0.1), B(0.5), B(0.9)]}>
- Adding player #1 = #1<rhoRand, MOSS, rank:1> ...
  Using this already created player 'player' = #1<rhoRand, MOSS, rank:1> ...
- Adding player #2 = #2<rhoRand, MOSS, rank:1> ...
  Using this already created player 'player' = #2<rhoRand, MOSS, rank:1> ...
 - End of one game, rhoRand player #1<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #2<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [2, 1] ...
 - End of one game, rhoRand player #1<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #2<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #1<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #2<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #1<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #2<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #1<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #2<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [1, 2] ...
 - End of one game, rhoRand player #1<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #2<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #1<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #2<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #1<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #2<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #1<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #2<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #1<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #2<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #1<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #2<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [1, 2] ...
 - End of one game, rhoRand player #1<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #2<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #1<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #2<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #1<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #2<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #1<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #2<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [1, 2] ...
 - End of one game, rhoRand player #1<rhoRand, MOSS, rank:2> had rank 2 ...
 - End of one game, rhoRand player #2<rhoRand, MOSS, rank:2> had rank 2 ...
Giving the final ranks ...

Final ranking for this environment #0 :
- Player #1, '#1<rhoRand, MOSS, rank:1>'	was ranked	1 / 2 for this simulation (last rewards = 15204).
- Player #2, '#2<rhoRand, MOSS, rank:1>'	was ranked	2 / 2 for this simulation (last rewards = 12740.1).
plots/MP__M2_T20000_N20__2_algos is already a directory here...


- Plotting the decentralized rewards, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main____env1-1_3451814159053546151.png ...


- Plotting the centralized regret, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main_RegretCentralized____env1-1_3451814159053546151.png ...
  - For 2 player, our lower bound gave = 2.173533813989595 ...
  - For 2 player, the initial lower bound in Theorem 6 from [Anandkumar et al., 2010] gave = 1.3143267136515069 ...
 - Our lowerbound = 2.173533813989595,
 - anandkumar_lowerbound = 1.3143267136515069


- Plotting the centralized regret, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main_RegretCentralized____env1-1_3451814159053546151.png ...
  - For 2 player, our lower bound gave = 2.173533813989595 ...
  - For 2 player, the initial lower bound in Theorem 6 from [Anandkumar et al., 2010] gave = 1.3143267136515069 ...
 - Our lowerbound = 2.173533813989595,
 - anandkumar_lowerbound = 1.3143267136515069


- Plotting the normalized centralized rewards, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main_NormalizedRewardsCentralized____env1-1_3451814159053546151.png ...
  - For 2 player, our lower bound gave = 2.173533813989595 ...
  - For 2 player, the initial lower bound in Theorem 6 from [Anandkumar et al., 2010] gave = 1.3143267136515069 ...
 - Our lowerbound = 2.173533813989595,
 - anandkumar_lowerbound = 1.3143267136515069


- Plotting the cumulative number of switches, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main_CumNbSwitchs____env1-1_3451814159053546151.png ...
 - Plotting the probability of picking the best arm, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main_BestArmPulls____env1-1_3451814159053546151.png ...
 - Plotting the cumulative number of pulls of all arms, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main_NormalizedAllPulls____env1-1_3451814159053546151.png ...
 - Plotting the total nb of collision as a function of time, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main_NbCollisions____env1-1_3451814159053546151.png ...
 - Plotting the cumulated total nb of collision as a function of time, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main_CumNbCollisions____env1-1_3451814159053546151.png ...
 - Plotting the frequency of collision in each arm, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main_FrequencyCollisions____env1-1_3451814159053546151.png ...
  - For #$0$: $B(0.1)$,	frequency of collisions is 6.5e-05  ...
  - For #$1$: $B(0.5)$,	frequency of collisions is 0.0002325  ...
  - For #$2$: $B(0.9)$,	frequency of collisions is 0.000235  ...
