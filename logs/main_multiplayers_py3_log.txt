 - Setting dpi of all figures to 110 ...
 - Setting 'figsize' of all figures to (19.8, 10.8) ...
Info: numba.jit seems to be available.
Info: numba.jit seems to be available.
 - One new child, of index 0, and class #1<CentralizedMultiplePlay(UCB)> ...
 - One new child, of index 1, and class #2<CentralizedMultiplePlay(UCB)> ...
 - One new child, of index 2, and class #3<CentralizedMultiplePlay(UCB)> ...
 - One new child, of index 3, and class #4<CentralizedMultiplePlay(UCB)> ...
 - One new child, of index 4, and class #5<CentralizedMultiplePlay(UCB)> ...
 - One new child, of index 5, and class #6<CentralizedMultiplePlay(UCB)> ...
Loaded experiments configuration from 'configuration.py' :
configuration = {'repetitions': 4, 'players': [CentralizedMultiplePlay(UCB), CentralizedMultiplePlay(UCB), CentralizedMultiplePlay(UCB), CentralizedMultiplePlay(UCB), CentralizedMultiplePlay(UCB), CentralizedMultiplePlay(UCB)], 'averageOn': 0.001, 'horizon': 5000, 'successive_players': [[Selfish(UCB($\alpha=1$)), Selfish(UCB($\alpha=1$)), Selfish(UCB($\alpha=1$)), Selfish(UCB($\alpha=1$)), Selfish(UCB($\alpha=1$)), Selfish(UCB($\alpha=1$))], [Selfish(UCB($\alpha=0.25$)), Selfish(UCB($\alpha=0.25$)), Selfish(UCB($\alpha=0.25$)), Selfish(UCB($\alpha=0.25$)), Selfish(UCB($\alpha=0.25$)), Selfish(UCB($\alpha=0.25$))], [Selfish(MOSS), Selfish(MOSS), Selfish(MOSS), Selfish(MOSS), Selfish(MOSS), Selfish(MOSS)], [Selfish(KL-UCB(Bern)), Selfish(KL-UCB(Bern)), Selfish(KL-UCB(Bern)), Selfish(KL-UCB(Bern)), Selfish(KL-UCB(Bern)), Selfish(KL-UCB(Bern))], [Selfish(KL-UCB+(Bern)), Selfish(KL-UCB+(Bern)), Selfish(KL-UCB+(Bern)), Selfish(KL-UCB+(Bern)), Selfish(KL-UCB+(Bern)), Selfish(KL-UCB+(Bern))], [Selfish(Thompson), Selfish(Thompson), Selfish(Thompson), Selfish(Thompson), Selfish(Thompson), Selfish(Thompson)], [Selfish(Softmax(decreasing)), Selfish(Softmax(decreasing)), Selfish(Softmax(decreasing)), Selfish(Softmax(decreasing)), Selfish(Softmax(decreasing)), Selfish(Softmax(decreasing))], [Selfish(BayesUCB), Selfish(BayesUCB), Selfish(BayesUCB), Selfish(BayesUCB), Selfish(BayesUCB), Selfish(BayesUCB)], [Selfish(AdBandits($\alpha=0.5$, $T=5000$)), Selfish(AdBandits($\alpha=0.5$, $T=5000$)), Selfish(AdBandits($\alpha=0.5$, $T=5000$)), Selfish(AdBandits($\alpha=0.5$, $T=5000$)), Selfish(AdBandits($\alpha=0.5$, $T=5000$)), Selfish(AdBandits($\alpha=0.5$, $T=5000$))]], 'collisionModel': <function onlyUniqUserGetsReward at 0x7f669bedf620>, 'verbosity': 6, 'environment': [{'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': [0.005, 0.01, 0.015, 0.02, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.78, 0.8, 0.82, 0.83, 0.84, 0.85]}], 'n_jobs': -1, 'finalRanksOnAverage': True, 'delta_t_save': 1}
plots/ is already a directory here...
Number of players in the multi-players game: 6
Time horizon: 5000
Number of repetitions: 4
Sampling rate DELTA_T_SAVE: 1
Using collision model: onlyUniqUserGetsReward
  Detail:  Simple collision model where only the players alone on one arm sample it and receive the reward.

    - This is the default collision model, cf. https://arxiv.org/abs/0910.2065v3 collision model 1.
    - The numpy array 'choices' is increased according to the number of users who collided (it is NOT binary).
    
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': [0.005, 0.01, 0.015, 0.02, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.78, 0.8, 0.82, 0.83, 0.84, 0.85]} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [0.005, 0.01, 0.015, 0.02, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.78, 0.8, 0.82, 0.83, 0.84, 0.85]
 - with 'arms' = [B(0.005), B(0.01), B(0.015), B(0.02), B(0.3), B(0.35), B(0.4), B(0.45), B(0.5), B(0.55), B(0.6), B(0.78), B(0.8), B(0.82), B(0.83), B(0.84), B(0.85)]
 - with 'nbArms' = 17
 - with 'maxArm' = 0.85
 - with 'minArm' = 0.005

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 66.4 ... 
 - a Optimal Arm Identification factor H_OI(mu) = 62.76% ...
Number of environments to try: 1

Evaluating environment: <MAB{'maxArm': 0.84999999999999998, 'nbArms': 17, 'arms': [B(0.005), B(0.01), B(0.015), B(0.02), B(0.3), B(0.35), B(0.4), B(0.45), B(0.5), B(0.55), B(0.6), B(0.78), B(0.8), B(0.82), B(0.83), B(0.84), B(0.85)], 'minArm': 0.0050000000000000001}>
- Adding player #1 = #1<CentralizedMultiplePlay(UCB)> ...
  Using this already created player 'player' = #1<CentralizedMultiplePlay(UCB)> ...
- Adding player #2 = #2<CentralizedMultiplePlay(UCB)> ...
  Using this already created player 'player' = #2<CentralizedMultiplePlay(UCB)> ...
- Adding player #3 = #3<CentralizedMultiplePlay(UCB)> ...
  Using this already created player 'player' = #3<CentralizedMultiplePlay(UCB)> ...
- Adding player #4 = #4<CentralizedMultiplePlay(UCB)> ...
  Using this already created player 'player' = #4<CentralizedMultiplePlay(UCB)> ...
- Adding player #5 = #5<CentralizedMultiplePlay(UCB)> ...
  Using this already created player 'player' = #5<CentralizedMultiplePlay(UCB)> ...
- Adding player #6 = #6<CentralizedMultiplePlay(UCB)> ...
  Using this already created player 'player' = #6<CentralizedMultiplePlay(UCB)> ...
Giving the final ranks ...

Final ranking for this environment #0 :
- Player #4, '#4<CentralizedMultiplePlay(UCB)>'	was ranked	1 / 6 for this simulation (last rewards = 4119).
- Player #5, '#5<CentralizedMultiplePlay(UCB)>'	was ranked	2 / 6 for this simulation (last rewards = 4094.25).
- Player #1, '#1<CentralizedMultiplePlay(UCB)>'	was ranked	3 / 6 for this simulation (last rewards = 4058.25).
- Player #2, '#2<CentralizedMultiplePlay(UCB)>'	was ranked	4 / 6 for this simulation (last rewards = 4037.5).
- Player #3, '#3<CentralizedMultiplePlay(UCB)>'	was ranked	5 / 6 for this simulation (last rewards = 4012.25).
- Player #6, '#6<CentralizedMultiplePlay(UCB)>'	was ranked	6 / 6 for this simulation (last rewards = 3822).


- Plotting the decentralized rewards


- Plotting the centralized fairness (RajJain)
  - Default fairness index is = [ 0.67702343  0.48208536  0.34466531 ...,  0.03991297  0.03990728
  0.0399635 ] ...
  - Amplitude fairness index is = [ 1.          0.8         0.5        ...,  0.0720267   0.07201359
  0.07211743] ...
  - STD fairness index is = [ 0.74535599  0.49888765  0.44790321 ...,  0.04701781  0.047014    0.04707691] ...
  - Mean fairness index is = [ 0.67702343  0.48208536  0.34466531 ...,  0.03991297  0.03990728
  0.0399635 ] ...
  - RajJain fairness index is = [ 0.28571429  0.14736842  0.08609272 ...,  0.0006944   0.00069426
  0.00069616] ...


- Plotting the centralized regret
  - For 6 player, our lower bound gave = 71.75492878990443 ...
  - For 6 player, the initial lower bound in Theorem 6 from [Anandkumar et al., 2010] gave = 54.27851671604706 ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 66.4 for 1-player problem ... 
 - a Optimal Arm Identification factor H_OI(mu) = 62.76% ...
 - Our lowerbound = 71.8,
 - anandkumar_lowerbound = 54.3


- Plotting the centralized regret
  - For 6 player, our lower bound gave = 71.75492878990443 ...
  - For 6 player, the initial lower bound in Theorem 6 from [Anandkumar et al., 2010] gave = 54.27851671604706 ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 66.4 for 1-player problem ... 
 - a Optimal Arm Identification factor H_OI(mu) = 62.76% ...
 - Our lowerbound = 71.8,
 - anandkumar_lowerbound = 54.3


- Plotting the number of switches


- Plotting the cumulative number of switches
 - Plotting the probability of picking the best arm
 - Plotting the total nb of collision as a function of time
 - Plotting the cumulated total nb of collision as a function of time
 - Plotting the frequency of collision in each arm
  - For #$0$: $B(0.005)$ ($0.0%$$\%$),	frequency of collisions is 0  ...
  - For #$1$: $B(0.01)$ ($0.0%$$\%$),	frequency of collisions is 0  ...
  - For #$2$: $B(0.015)$ ($0.0%$$\%$),	frequency of collisions is 0  ...
  - For #$3$: $B(0.02)$ ($0.0%$$\%$),	frequency of collisions is 0  ...
  - For #$4$: $B(0.3)$ ($0.0%$$\%$),	frequency of collisions is 0  ...
  - For #$5$: $B(0.35)$ ($0.0%$$\%$),	frequency of collisions is 0  ...
  - For #$6$: $B(0.4)$ ($0.0%$$\%$),	frequency of collisions is 0  ...
  - For #$7$: $B(0.45)$ ($0.0%$$\%$),	frequency of collisions is 0  ...
  - For #$8$: $B(0.5)$ ($0.0%$$\%$),	frequency of collisions is 0  ...
  - For #$9$: $B(0.55)$ ($0.0%$$\%$),	frequency of collisions is 0  ...
  - For #$10$: $B(0.6)$ ($0.0%$$\%$),	frequency of collisions is 0  ...
  - For #$11$: $B(0.78)$ ($0.0%$$\%$),	frequency of collisions is 0  ...
  - For #$12$: $B(0.8)$ ($0.0%$$\%$),	frequency of collisions is 0  ...
  - For #$13$: $B(0.82)$ ($0.0%$$\%$),	frequency of collisions is 0  ...
  - For #$14$: $B(0.83)$ ($0.0%$$\%$),	frequency of collisions is 0  ...
  - For #$15$: $B(0.84)$ ($0.0%$$\%$),	frequency of collisions is 0  ...
  - For #$16$: $B(0.85)$ ($0.0%$$\%$),	frequency of collisions is 0  ...
==> No collisions to plot ... Stopping now  ...


==> To see the figures, do :
eog plots/MP__M6_T5000_N4/main*5441428995493763510.png
Done for simulations main_multiplayers.py ...
