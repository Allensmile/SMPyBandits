CentralizedFair: initialized with 3 arms and 2 players ...
It decided to use this affectation of arms :
 - Player number 1 will use an offset of 0 ...
 - Player number 2 will use an offset of 1 ...
Loaded experiments configuration from 'configuration.py' :
configuration = {'repetitions': 20, 'verbosity': 6, 'collisionModel': <function onlyUniqUserGetsReward at 0x7f162213fa60>, 'players': [<PoliciesMultiPlayers.ChildPointer.ChildPointer object at 0x7f1622028128>, <PoliciesMultiPlayers.ChildPointer.ChildPointer object at 0x7f16220281d0>], 'horizon': 20000, 'finalRanksOnAverage': True, 'averageOn': 0.001, 'n_jobs': -1, 'environment': [{'params': [0.1, 0.5, 0.9], 'arm_type': <class 'Arms.Bernoulli.Bernoulli'>}]}
plots/ is already a directory here...
Number of players in the multi-players game: 2
Time horizon: 20000
Number of repetitions: 20
Using collision model: onlyUniqUserGetsReward
  Detail:  Simple collision model where only the players alone on one arm sample it and receive the reward.

    - This is the default collision model, cf. https://arxiv.org/abs/0910.2065v3 collision model 1.
    - The numpy array 'choices' is increased according to the number of users who collided (it is NOT binary).
    
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'params': [0.1, 0.5, 0.9], 'arm_type': <class 'Arms.Bernoulli.Bernoulli'>} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [0.1, 0.5, 0.9]
 - with 'arms' = [B(0.1), B(0.5), B(0.9)]
 - with 'nbArms' = 3
 - with 'maxArm' = 0.9
Number of environments to try: 1

Evaluating environment: <MAB{'arms': [B(0.1), B(0.5), B(0.9)], 'nbArms': 3, 'maxArm': 0.9}>
- Adding player #1 = #1<Cycling(0)> ...
  Using this already created player 'player' = #1<Cycling(0)> ...
- Adding player #2 = #2<Cycling(1)> ...
  Using this already created player 'player' = #2<Cycling(1)> ...
Giving the final ranks ...

Final ranking for this environment #0 :
- Player #1, '#1<Cycling(0)>'	was ranked	1 / 2 for this simulation (last rewards = 10001.2).
- Player #2, '#2<Cycling(1)>'	was ranked	2 / 2 for this simulation (last rewards = 9996.55).
plots/MP__M2_T20000_N20__2_algos is already a directory here...


- Plotting the decentralized rewards, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main____env1-1_6078276307114808545.png ...
Saving to plots/MP__M2_T20000_N20__2_algos/main____env1-1_6078276307114808545.png ...


- Plotting the centralized rewards, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main_RewardsCentralized____env1-1_6078276307114808545.png ...
  Using oneLR = <function Bernoulli.oneLR at 0x7f1622148840>
- Our lower bound gave = 2.173533813989595 ...
  Using kl = <function Bernoulli.kl at 0x7f16221487b8>
- The initial lower bound in Theorem 6 from [Anandkumar et al., 2010] gave = 1.3143267136515069 ...
Saving to plots/MP__M2_T20000_N20__2_algos/main_RewardsCentralized____env1-1_6078276307114808545.png ...


- Plotting the normalized centralized rewards, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main_RewardsCentralized____env1-1_6078276307114808545.png ...
  Using oneLR = <function Bernoulli.oneLR at 0x7f1622148840>
- Our lower bound gave = 2.173533813989595 ...
  Using kl = <function Bernoulli.kl at 0x7f16221487b8>
- The initial lower bound in Theorem 6 from [Anandkumar et al., 2010] gave = 1.3143267136515069 ...


- Plotting the number of switches, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main_NbSwitchs____env1-1_6078276307114808545.png ...


- Plotting the cumulative number of switches, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main_NbSwitchs____env1-1_6078276307114808545.png ...
 - Plotting the probability of picking the best arm, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main_BestArmPulls____env1-1_6078276307114808545.png ...
 - Plotting the total nb of collision as a function of time, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main_NbCollisions____env1-1_6078276307114808545.png ...
 - Plotting the cumulated total nb of collision as a function of time, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main_NbCollisionsCum____env1-1_6078276307114808545.png ...
 - Plotting the frequency of collision in each arm, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main_FrequencyCollisions____env1-1_6078276307114808545.png ...
  - For #$0$: $B(0.1)$,	frequency of collisions is 0  ...
  - For #$1$: $B(0.5)$,	frequency of collisions is 0  ...
  - For #$2$: $B(0.9)$,	frequency of collisions is 0  ...
==> No collisions to plot ... Stopping now  ...
