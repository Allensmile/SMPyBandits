Loaded experiments configuration from 'configuration.py' :
configuration = {'environment': [{'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': [0.1, 0.5, 0.9]}], 'players': [<PoliciesMultiPlayers.rhoRand.oneRhoRand object at 0x7f0aea0b1358>, <PoliciesMultiPlayers.rhoRand.oneRhoRand object at 0x7f0aea0be400>], 'finalRanksOnAverage': True, 'collisionModel': <function onlyUniqUserGetsReward at 0x7f0aea1be840>, 'averageOn': 0.001, 'horizon': 20000, 'verbosity': 6, 'repetitions': 20, 'n_jobs': -1}
plots/ is already a directory here...
Number of players in the multi-players game: 2
Time horizon: 20000
Number of repetitions: 20
Using collision model: onlyUniqUserGetsReward
  Detail:  Simple collision model where only the players alone on one arm sample it and receive the reward.

    - This is the default collision model, cf. https://arxiv.org/abs/0910.2065v3 collision model 1.
    - The numpy array 'choices' is increased according to the number of users who collided (it is NOT binary).
    
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': [0.1, 0.5, 0.9]} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [0.1, 0.5, 0.9]
 - with 'arms' = [B(0.1), B(0.5), B(0.9)]
 - with 'nbArms' = 3
 - with 'maxArm' = 0.9
Number of environments to try: 1

Evaluating environment: <MAB{'arms': [B(0.1), B(0.5), B(0.9)], 'nbArms': 3, 'maxArm': 0.9}>
- Adding player #1 = #1<rhoRand, Thompson, rank:1> ...
  Using this already created player 'player' = #1<rhoRand, Thompson, rank:1> ...
- Adding player #2 = #2<rhoRand, Thompson, rank:1> ...
  Using this already created player 'player' = #2<rhoRand, Thompson, rank:1> ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [2, 1] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [1, 2] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [2, 1] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [1, 2] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [2, 1] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [2, 1] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [1, 2] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [1, 2] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [2, 1] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [2, 1] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [1, 2] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [1, 2] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [2, 1] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [1, 2] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [1, 2] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [1, 2] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [1, 2] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [1, 2] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [1, 2] ...
 - End of one game, rhoRand found orthogonal ranks: ranks = [1, 2] ...
Giving the final ranks ...

Final ranking for this environment #0 :
- Player #1, '#1<rhoRand, Thompson, rank:1>'	was ranked	1 / 2 for this simulation (last rewards = 14723.3).
- Player #2, '#2<rhoRand, Thompson, rank:1>'	was ranked	2 / 2 for this simulation (last rewards = 13217.9).
plots/MP__M2_T20000_N20__2_algos is already a directory here...
- Plotting the decentralized rewards, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main____env1-1_3768622399199453807.png ...
Saving to plots/MP__M2_T20000_N20__2_algos/main____env1-1_3768622399199453807.png ...
- Plotting the centralized  rewards, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main_RewardsCentralized____env1-1_3768622399199453807.png ...
Saving to plots/MP__M2_T20000_N20__2_algos/main_RewardsCentralized____env1-1_3768622399199453807.png ...
 - Plotting the total nb of collision as a function of time, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main_NbCollisions_RewardsCentralized____env1-1_3768622399199453807.png ...
 - Plotting the cumulated total nb of collision as a function of time, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main_NbCollisionsCum_NbCollisions_RewardsCentralized____env1-1_3768622399199453807.png ...
 - Plotting the frequency of collision in each arm, and saving the plot to plots/MP__M2_T20000_N20__2_algos/main_FrequencyCollisions_NbCollisionsCum_NbCollisions_RewardsCentralized____env1-1_3768622399199453807.png ...
  - For #$0$: $B(0.1)$,	frequency of collisions is 6e-05  ...
  - For #$1$: $B(0.5)$,	frequency of collisions is 0.0004775  ...
  - For #$2$: $B(0.9)$,	frequency of collisions is 0.0006675  ...
