Loaded experiments configuration from 'configuration.py' :
configuration = {'finalRanksOnAverage': True, 'averageOn': 0.001, 'verbosity': 6, 'environment': [{'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': [0.1, 0.5, 0.9]}], 'collisionModel': <function onlyUniqUserGetsReward at 0x7fe5c17836a8>, 'delta_t_save': 1, 'players': [AdBandits(alpha: 0.5), AdBandits(alpha: 0.5)], 'n_jobs': -1, 'horizon': 10000, 'repetitions': 20}
plots/ is already a directory here...
Number of players in the multi-players game: 2
Time horizon: 10000
Number of repetitions: 20
Sampling rate DELTA_T_SAVE: 1
Using collision model: onlyUniqUserGetsReward
  Detail:  Simple collision model where only the players alone on one arm sample it and receive the reward.

    - This is the default collision model, cf. https://arxiv.org/abs/0910.2065v3 collision model 1.
    - The numpy array 'choices' is increased according to the number of users who collided (it is NOT binary).
    
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': [0.1, 0.5, 0.9]} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [0.1, 0.5, 0.9]
 - with 'arms' = [B(0.1), B(0.5), B(0.9)]
 - with 'nbArms' = 3
 - with 'maxArm' = 0.9
Number of environments to try: 1

Evaluating environment: <MAB{'maxArm': 0.90000000000000002, 'nbArms': 3, 'arms': [B(0.1), B(0.5), B(0.9)]}>
- Adding player #1 = #1<rhoRand, AdBandits(alpha: 0.5)> ...
  Using this already created player 'player' = #1<rhoRand, AdBandits(alpha: 0.5)> ...
- Adding player #2 = #2<rhoRand, AdBandits(alpha: 0.5)> ...
  Using this already created player 'player' = #2<rhoRand, AdBandits(alpha: 0.5)> ...
Giving the final ranks ...

Final ranking for this environment #0 :
- Player #1, '#1<rhoRand, AdBandits(alpha: 0.5)>'	was ranked	1 / 2 for this simulation (last rewards = 7282.65).
- Player #2, '#2<rhoRand, AdBandits(alpha: 0.5)>'	was ranked	2 / 2 for this simulation (last rewards = 6652.15).


- Plotting the decentralized rewards


- Plotting the centralized regret
  - For 2 player, our lower bound gave = 2.173533813989595 ...
  - For 2 player, the initial lower bound in Theorem 6 from [Anandkumar et al., 2010] gave = 1.3143267136515069 ...
 - Our lowerbound = 2.173533813989595,
 - anandkumar_lowerbound = 1.3143267136515069


- Plotting the centralized regret
  - For 2 player, our lower bound gave = 2.173533813989595 ...
  - For 2 player, the initial lower bound in Theorem 6 from [Anandkumar et al., 2010] gave = 1.3143267136515069 ...
 - Our lowerbound = 2.173533813989595,
 - anandkumar_lowerbound = 1.3143267136515069


- Plotting the normalized centralized rewards
  - For 2 player, our lower bound gave = 2.173533813989595 ...
  - For 2 player, the initial lower bound in Theorem 6 from [Anandkumar et al., 2010] gave = 1.3143267136515069 ...
 - Our lowerbound = 2.173533813989595,
 - anandkumar_lowerbound = 1.3143267136515069


- Plotting the number of switches


- Plotting the cumulative number of switches
 - Plotting the probability of picking the best arm
 - Plotting the total nb of collision as a function of time
 - Plotting the cumulated total nb of collision as a function of time
 - Plotting the frequency of collision in each arm
  - For #$0$: $B(0.1)$,	frequency of collisions is 0.00011  ...
  - For #$1$: $B(0.5)$,	frequency of collisions is 0.000855  ...
  - For #$2$: $B(0.9)$,	frequency of collisions is 0.00094  ...
