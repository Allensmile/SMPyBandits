 - Setting dpi of all figures to 110 ...
 - Setting 'figsize' of all figures to (19.8, 10.8) ...
Info: Using the regular tqdm() decorator ...
Info: numba.jit seems to be available.
Info: numba.jit seems to be available.
Loaded experiments configuration from 'configuration.py' :
configuration = {'successive_players': [[Selfish(BayesUCB), Selfish(BayesUCB), Selfish(BayesUCB)], [rhoRand(BayesUCB), rhoRand(BayesUCB), rhoRand(BayesUCB)], [rhoEst(BayesUCB), rhoEst(BayesUCB), rhoEst(BayesUCB)], [rhoLearn(BayesUCB), rhoLearn(BayesUCB), rhoLearn(BayesUCB)]], 'delta_t_save': 1, 'finalRanksOnAverage': True, 'repetitions': 100, 'players': [rhoRand(UCB), rhoRand(UCB), rhoRand(UCB)], 'n_jobs': -1, 'environment': [{'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': array([ 0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9])}], 'horizon': 30000, 'collisionModel': <function onlyUniqUserGetsReward at 0x7f683e22c378>, 'verbosity': 6, 'averageOn': 0.001}
plots/ is already a directory here...



Considering the list of players :
 [Selfish(BayesUCB), Selfish(BayesUCB), Selfish(BayesUCB)]
Number of players in the multi-players game: 3
Time horizon: 30000
Number of repetitions: 100
Sampling rate for saving, delta_t_save: 1
Sampling rate for plotting, delta_t_plot: 50
Using collision model: onlyUniqUserGetsReward
  Detail:  Simple collision model where only the players alone on one arm sample it and receive the reward.

    - This is the default collision model, cf. https://arxiv.org/abs/0910.2065v3 collision model 1.
    - The numpy array 'choices' is increased according to the number of users who collided (it is NOT binary).
    
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': array([ 0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9])} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [ 0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9]
 - with 'arms' = [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)]
 - with 'nbArms' = 9
 - with 'maxArm' = 0.9
 - with 'minArm' = 0.1

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 ... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
Number of environments to try: 1

Evaluating environment: MAB(nbArms: 9, arms: [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)], minArm: 0.1, maxArm: 0.9)
- Adding player #1 = #1<Selfish, BayesUCB> ...
  Using this already created player 'player' = #1<Selfish, BayesUCB> ...
- Adding player #2 = #2<Selfish, BayesUCB> ...
  Using this already created player 'player' = #2<Selfish, BayesUCB> ...
- Adding player #3 = #3<Selfish, BayesUCB> ...
  Using this already created player 'player' = #3<Selfish, BayesUCB> ...

Estimated order by the policy #1<Selfish, BayesUCB> after 30000 steps: [1 7 8 0 2 3 4 5 6] ...
  ==> Optimal arm identification: 75.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 35.80% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 70.29% (relative success)...
  ==> Spearman    distance from optimal ordering: 29.99% (relative success)...
  ==> Gestalt     distance from optimal ordering: 66.67% (relative success)...
  ==> Mean distance from optimal ordering: 50.69% (relative success)...

Estimated order by the policy #2<Selfish, BayesUCB> after 30000 steps: [3 6 8 0 1 2 4 5 7] ...
  ==> Optimal arm identification: 79.17% (relative success)...
  ==> Manhattan   distance from optimal ordering: 30.86% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 59.58% (relative success)...
  ==> Spearman    distance from optimal ordering: 23.50% (relative success)...
  ==> Gestalt     distance from optimal ordering: 66.67% (relative success)...
  ==> Mean distance from optimal ordering: 45.15% (relative success)...

Estimated order by the policy #3<Selfish, BayesUCB> after 30000 steps: [1 0 2 5 7 3 6 4 8] ...
  ==> Optimal arm identification: 87.50% (relative success)...
  ==> Manhattan   distance from optimal ordering: 70.37% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 97.82% (relative success)...
  ==> Spearman    distance from optimal ordering: 98.41% (relative success)...
  ==> Gestalt     distance from optimal ordering: 55.56% (relative success)...
  ==> Mean distance from optimal ordering: 80.54% (relative success)...
Giving the final ranks ...

Final ranking for this environment #0 :
- Player #1, '#1<Selfish, BayesUCB>'	was ranked	1 / 3 for this simulation (last rewards = 24084.6).
- Player #2, '#2<Selfish, BayesUCB>'	was ranked	2 / 3 for this simulation (last rewards = 23825.9).
- Player #3, '#3<Selfish, BayesUCB>'	was ranked	3 / 3 for this simulation (last rewards = 23823.1).



Considering the list of players :
 [rhoRand(BayesUCB), rhoRand(BayesUCB), rhoRand(BayesUCB)]
Number of players in the multi-players game: 3
Time horizon: 30000
Number of repetitions: 100
Sampling rate for saving, delta_t_save: 1
Sampling rate for plotting, delta_t_plot: 50
Using collision model: onlyUniqUserGetsReward
  Detail:  Simple collision model where only the players alone on one arm sample it and receive the reward.

    - This is the default collision model, cf. https://arxiv.org/abs/0910.2065v3 collision model 1.
    - The numpy array 'choices' is increased according to the number of users who collided (it is NOT binary).
    
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': array([ 0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9])} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [ 0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9]
 - with 'arms' = [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)]
 - with 'nbArms' = 9
 - with 'maxArm' = 0.9
 - with 'minArm' = 0.1

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 ... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
Number of environments to try: 1

Evaluating environment: MAB(nbArms: 9, arms: [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)], minArm: 0.1, maxArm: 0.9)
- Adding player #1 = #1<$\rho^{\mathrm{Rand}}$, BayesUCB> ...
  Using this already created player 'player' = #1<$\rho^{\mathrm{Rand}}$, BayesUCB> ...
- Adding player #2 = #2<$\rho^{\mathrm{Rand}}$, BayesUCB> ...
  Using this already created player 'player' = #2<$\rho^{\mathrm{Rand}}$, BayesUCB> ...
- Adding player #3 = #3<$\rho^{\mathrm{Rand}}$, BayesUCB> ...
  Using this already created player 'player' = #3<$\rho^{\mathrm{Rand}}$, BayesUCB> ...

Estimated order by the policy #1<$\rho^{\mathrm{Rand}}$, BayesUCB, rank:2> after 30000 steps: [3 5 6 4 0 1 2 8 7] ...
  ==> Optimal arm identification: 83.33% (relative success)...
  ==> Manhattan   distance from optimal ordering: 35.80% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 46.84% (relative success)...
  ==> Spearman    distance from optimal ordering: 45.43% (relative success)...
  ==> Gestalt     distance from optimal ordering: 44.44% (relative success)...
  ==> Mean distance from optimal ordering: 43.13% (relative success)...

Estimated order by the policy #2<$\rho^{\mathrm{Rand}}$, BayesUCB, rank:3> after 30000 steps: [1 2 4 0 3 5 6 8 7] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 75.31% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.33% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.63% (relative success)...
  ==> Gestalt     distance from optimal ordering: 66.67% (relative success)...
  ==> Mean distance from optimal ordering: 85.23% (relative success)...

Estimated order by the policy #3<$\rho^{\mathrm{Rand}}$, BayesUCB, rank:3> after 30000 steps: [0 4 1 2 5 6 7 3 8] ...
  ==> Optimal arm identification: 87.50% (relative success)...
  ==> Manhattan   distance from optimal ordering: 70.37% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 98.77% (relative success)...
  ==> Spearman    distance from optimal ordering: 98.01% (relative success)...
  ==> Gestalt     distance from optimal ordering: 77.78% (relative success)...
  ==> Mean distance from optimal ordering: 86.23% (relative success)...
Giving the final ranks ...

Final ranking for this environment #0 :
- Player #1, '#1<$\rho^{\mathrm{Rand}}$, BayesUCB>'	was ranked	1 / 3 for this simulation (last rewards = 24107.5).
- Player #3, '#3<$\rho^{\mathrm{Rand}}$, BayesUCB>'	was ranked	2 / 3 for this simulation (last rewards = 23962.5).
- Player #2, '#2<$\rho^{\mathrm{Rand}}$, BayesUCB>'	was ranked	3 / 3 for this simulation (last rewards = 23405.6).
plots/MP__M3_T30000_N100__3_algos is already a directory here...



Considering the list of players :
 [rhoEst(BayesUCB), rhoEst(BayesUCB), rhoEst(BayesUCB)]
Number of players in the multi-players game: 3
Time horizon: 30000
Number of repetitions: 100
Sampling rate for saving, delta_t_save: 1
Sampling rate for plotting, delta_t_plot: 50
Using collision model: onlyUniqUserGetsReward
  Detail:  Simple collision model where only the players alone on one arm sample it and receive the reward.

    - This is the default collision model, cf. https://arxiv.org/abs/0910.2065v3 collision model 1.
    - The numpy array 'choices' is increased according to the number of users who collided (it is NOT binary).
    
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': array([ 0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9])} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [ 0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9]
 - with 'arms' = [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)]
 - with 'nbArms' = 9
 - with 'maxArm' = 0.9
 - with 'minArm' = 0.1

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 ... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
Number of environments to try: 1

Evaluating environment: MAB(nbArms: 9, arms: [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)], minArm: 0.1, maxArm: 0.9)
- Adding player #1 = #1<$\rho^{\mathrm{Est}}$, BayesUCB> ...
  Using this already created player 'player' = #1<$\rho^{\mathrm{Est}}$, BayesUCB> ...
- Adding player #2 = #2<$\rho^{\mathrm{Est}}$, BayesUCB> ...
  Using this already created player 'player' = #2<$\rho^{\mathrm{Est}}$, BayesUCB> ...
- Adding player #3 = #3<$\rho^{\mathrm{Est}}$, BayesUCB> ...
  Using this already created player 'player' = #3<$\rho^{\mathrm{Est}}$, BayesUCB> ...

Estimated order by the policy #1<$\rho^{\mathrm{Est}}$, BayesUCB, rank:2> after 30000 steps: [0 1 2 3 4 6 5 7 8] ...
  ==> Optimal arm identification: 95.83% (relative success)...
  ==> Manhattan   distance from optimal ordering: 95.06% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.96% (relative success)...
  ==> Spearman    distance from optimal ordering: 100.00% (relative success)...
  ==> Gestalt     distance from optimal ordering: 88.89% (relative success)...
  ==> Mean distance from optimal ordering: 95.98% (relative success)...

Estimated order by the policy #2<$\rho^{\mathrm{Est}}$, BayesUCB, rank:2> after 30000 steps: [0 2 1 3 6 5 4 7 8] ...
  ==> Optimal arm identification: 91.67% (relative success)...
  ==> Manhattan   distance from optimal ordering: 85.19% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.65% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.95% (relative success)...
  ==> Gestalt     distance from optimal ordering: 66.67% (relative success)...
  ==> Mean distance from optimal ordering: 87.86% (relative success)...

Estimated order by the policy #3<$\rho^{\mathrm{Est}}$, BayesUCB, rank:1> after 30000 steps: [1 0 4 2 3 5 6 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 85.19% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.82% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.98% (relative success)...
  ==> Gestalt     distance from optimal ordering: 77.78% (relative success)...
  ==> Mean distance from optimal ordering: 90.69% (relative success)...
Giving the final ranks ...

Final ranking for this environment #0 :
- Player #3, '#3<$\rho^{\mathrm{Est}}$, BayesUCB>'	was ranked	1 / 3 for this simulation (last rewards = 6705.21).
- Player #2, '#2<$\rho^{\mathrm{Est}}$, BayesUCB>'	was ranked	2 / 3 for this simulation (last rewards = 6704.34).
- Player #1, '#1<$\rho^{\mathrm{Est}}$, BayesUCB>'	was ranked	3 / 3 for this simulation (last rewards = 6697.22).
plots/MP__M3_T30000_N100__3_algos is already a directory here...



Considering the list of players :
 [rhoLearn(BayesUCB), rhoLearn(BayesUCB), rhoLearn(BayesUCB)]
Number of players in the multi-players game: 3
Time horizon: 30000
Number of repetitions: 100
Sampling rate for saving, delta_t_save: 1
Sampling rate for plotting, delta_t_plot: 50
Using collision model: onlyUniqUserGetsReward
  Detail:  Simple collision model where only the players alone on one arm sample it and receive the reward.

    - This is the default collision model, cf. https://arxiv.org/abs/0910.2065v3 collision model 1.
    - The numpy array 'choices' is increased according to the number of users who collided (it is NOT binary).
    
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': array([ 0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9])} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [ 0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9]
 - with 'arms' = [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)]
 - with 'nbArms' = 9
 - with 'maxArm' = 0.9
 - with 'minArm' = 0.1

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 ... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
Number of environments to try: 1

Evaluating environment: MAB(nbArms: 9, arms: [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)], minArm: 0.1, maxArm: 0.9)
- Adding player #1 = #1<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ BayesUCB> ...
  Using this already created player 'player' = #1<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ BayesUCB> ...
- Adding player #2 = #2<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ BayesUCB> ...
  Using this already created player 'player' = #2<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ BayesUCB> ...
- Adding player #3 = #3<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ BayesUCB> ...
  Using this already created player 'player' = #3<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ BayesUCB> ...

Estimated order by the policy #1<$\rho^{\mathrm{Learn}}$, BayesUCB, rank: 3 ~ BayesUCB> after 30000 steps: [1 2 0 4 3 5 6 8 7] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 80.25% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.65% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.95% (relative success)...
  ==> Gestalt     distance from optimal ordering: 66.67% (relative success)...
  ==> Mean distance from optimal ordering: 86.63% (relative success)...

Estimated order by the policy #2<$\rho^{\mathrm{Learn}}$, BayesUCB, rank: 3 ~ BayesUCB> after 30000 steps: [0 3 1 2 4 5 7 6 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 85.19% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.82% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.98% (relative success)...
  ==> Gestalt     distance from optimal ordering: 77.78% (relative success)...
  ==> Mean distance from optimal ordering: 90.69% (relative success)...

Estimated order by the policy #3<$\rho^{\mathrm{Learn}}$, BayesUCB, rank: 3 ~ BayesUCB> after 30000 steps: [0 3 5 1 2 4 8 6 7] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 65.43% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 97.82% (relative success)...
  ==> Spearman    distance from optimal ordering: 98.41% (relative success)...
  ==> Gestalt     distance from optimal ordering: 66.67% (relative success)...
  ==> Mean distance from optimal ordering: 82.08% (relative success)...
Giving the final ranks ...

Final ranking for this environment #0 :
- Player #3, '#3<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ BayesUCB>'	was ranked	1 / 3 for this simulation (last rewards = 22486.4).
- Player #1, '#1<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ BayesUCB>'	was ranked	2 / 3 for this simulation (last rewards = 22456.2).
- Player #2, '#2<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ BayesUCB>'	was ranked	3 / 3 for this simulation (last rewards = 22213.3).
plots/MP__M3_T30000_N100__3_algos is already a directory here...


- Plotting the centralized regret for all 'players' values
  and saving the plot to plots/MP__M3_T30000_N100__3_algos/all_RegretCentralized____env1-1_4972077372766571200 ...
  - For 3 players, our lower bound gave = 33.5 ...
  - For 3 players, the initial lower bound in Theorem 6 from [Anandkumar et al., 2010] gave = 17.8 ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 for 1-player problem ... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
 - Our lowerbound = 33.5,
 - [Anandkumar et al] lowerbound = 17.8
Saving figure with format png, to file 'plots/MP__M3_T30000_N100__3_algos/all_RegretCentralized____env1-1_4972077372766571200.png'...
       Saved! 'plots/MP__M3_T30000_N100__3_algos/all_RegretCentralized____env1-1_4972077372766571200.png' created of size '165469b', at 'Mon Mar 20 17:46:06 2017' ...
Saving figure with format pdf, to file 'plots/MP__M3_T30000_N100__3_algos/all_RegretCentralized____env1-1_4972077372766571200.pdf'...
       Saved! 'plots/MP__M3_T30000_N100__3_algos/all_RegretCentralized____env1-1_4972077372766571200.pdf' created of size '47113b', at 'Mon Mar 20 17:46:06 2017' ...


- Plotting the centralized regret for all 'players' values, in semilogx scale
  and saving the plot to plots/MP__M3_T30000_N100__3_algos/all_RegretCentralized_semilogx____env1-1_4972077372766571200 ...
  - For 3 players, our lower bound gave = 33.5 ...
  - For 3 players, the initial lower bound in Theorem 6 from [Anandkumar et al., 2010] gave = 17.8 ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 for 1-player problem ... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
 - Our lowerbound = 33.5,
 - [Anandkumar et al] lowerbound = 17.8
Saving figure with format png, to file 'plots/MP__M3_T30000_N100__3_algos/all_RegretCentralized_semilogx____env1-1_4972077372766571200.png'...
       Saved! 'plots/MP__M3_T30000_N100__3_algos/all_RegretCentralized_semilogx____env1-1_4972077372766571200.png' created of size '156500b', at 'Mon Mar 20 17:46:07 2017' ...
Saving figure with format pdf, to file 'plots/MP__M3_T30000_N100__3_algos/all_RegretCentralized_semilogx____env1-1_4972077372766571200.pdf'...
       Saved! 'plots/MP__M3_T30000_N100__3_algos/all_RegretCentralized_semilogx____env1-1_4972077372766571200.pdf' created of size '47655b', at 'Mon Mar 20 17:46:07 2017' ...


- Plotting the centralized regret for all 'players' values, in semilogy scale
  and saving the plot to plots/MP__M3_T30000_N100__3_algos/all_RegretCentralized_semilogy____env1-1_4972077372766571200 ...
  - For 3 players, our lower bound gave = 33.5 ...
  - For 3 players, the initial lower bound in Theorem 6 from [Anandkumar et al., 2010] gave = 17.8 ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 for 1-player problem ... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
 - Our lowerbound = 33.5,
 - [Anandkumar et al] lowerbound = 17.8
Saving figure with format png, to file 'plots/MP__M3_T30000_N100__3_algos/all_RegretCentralized_semilogy____env1-1_4972077372766571200.png'...
       Saved! 'plots/MP__M3_T30000_N100__3_algos/all_RegretCentralized_semilogy____env1-1_4972077372766571200.png' created of size '180224b', at 'Mon Mar 20 17:46:08 2017' ...
Saving figure with format pdf, to file 'plots/MP__M3_T30000_N100__3_algos/all_RegretCentralized_semilogy____env1-1_4972077372766571200.pdf'...
       Saved! 'plots/MP__M3_T30000_N100__3_algos/all_RegretCentralized_semilogy____env1-1_4972077372766571200.pdf' created of size '53653b', at 'Mon Mar 20 17:46:08 2017' ...


- Plotting the centralized regret for all 'players' values, in loglog scale
  and saving the plot to plots/MP__M3_T30000_N100__3_algos/all_RegretCentralized_loglog____env1-1_4972077372766571200 ...
  - For 3 players, our lower bound gave = 33.5 ...
  - For 3 players, the initial lower bound in Theorem 6 from [Anandkumar et al., 2010] gave = 17.8 ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 for 1-player problem ... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
 - Our lowerbound = 33.5,
 - [Anandkumar et al] lowerbound = 17.8
Saving figure with format png, to file 'plots/MP__M3_T30000_N100__3_algos/all_RegretCentralized_loglog____env1-1_4972077372766571200.png'...
       Saved! 'plots/MP__M3_T30000_N100__3_algos/all_RegretCentralized_loglog____env1-1_4972077372766571200.png' created of size '193474b', at 'Mon Mar 20 17:46:09 2017' ...
Saving figure with format pdf, to file 'plots/MP__M3_T30000_N100__3_algos/all_RegretCentralized_loglog____env1-1_4972077372766571200.pdf'...
       Saved! 'plots/MP__M3_T30000_N100__3_algos/all_RegretCentralized_loglog____env1-1_4972077372766571200.pdf' created of size '54496b', at 'Mon Mar 20 17:46:09 2017' ...


- Plotting the centralized fairness (STD)
  and saving the plot to plots/MP__M3_T30000_N100__3_algos/all____env1-1_4972077372766571200 ...
Saving figure with format png, to file 'plots/MP__M3_T30000_N100__3_algos/all____env1-1_4972077372766571200.png'...
       Saved! 'plots/MP__M3_T30000_N100__3_algos/all____env1-1_4972077372766571200.png' created of size '210893b', at 'Mon Mar 20 17:46:10 2017' ...
Saving figure with format pdf, to file 'plots/MP__M3_T30000_N100__3_algos/all____env1-1_4972077372766571200.pdf'...
       Saved! 'plots/MP__M3_T30000_N100__3_algos/all____env1-1_4972077372766571200.pdf' created of size '61127b', at 'Mon Mar 20 17:46:10 2017' ...
 - Plotting the total nb of collision as a function of time for all 'players' values
  and saving the plot to plots/MP__M3_T30000_N100__3_algos/all_NbCollisions____env1-1_4972077372766571200 ...
No upper bound for the non-cumulated number of collisions...
Saving figure with format png, to file 'plots/MP__M3_T30000_N100__3_algos/all_NbCollisions____env1-1_4972077372766571200.png'...
       Saved! 'plots/MP__M3_T30000_N100__3_algos/all_NbCollisions____env1-1_4972077372766571200.png' created of size '163663b', at 'Mon Mar 20 17:46:10 2017' ...
Saving figure with format pdf, to file 'plots/MP__M3_T30000_N100__3_algos/all_NbCollisions____env1-1_4972077372766571200.pdf'...
       Saved! 'plots/MP__M3_T30000_N100__3_algos/all_NbCollisions____env1-1_4972077372766571200.pdf' created of size '46423b', at 'Mon Mar 20 17:46:10 2017' ...
 - Plotting the cumulated total nb of collision as a function of time for all 'players' values
  and saving the plot to plots/MP__M3_T30000_N100__3_algos/all_CumNbCollisions____env1-1_4972077372766571200 ...
No upper bound for the non-cumulated number of collisions...
Saving figure with format png, to file 'plots/MP__M3_T30000_N100__3_algos/all_CumNbCollisions____env1-1_4972077372766571200.png'...
       Saved! 'plots/MP__M3_T30000_N100__3_algos/all_CumNbCollisions____env1-1_4972077372766571200.png' created of size '137624b', at 'Mon Mar 20 17:46:11 2017' ...
Saving figure with format pdf, to file 'plots/MP__M3_T30000_N100__3_algos/all_CumNbCollisions____env1-1_4972077372766571200.pdf'...
       Saved! 'plots/MP__M3_T30000_N100__3_algos/all_CumNbCollisions____env1-1_4972077372766571200.pdf' created of size '42355b', at 'Mon Mar 20 17:46:11 2017' ...


- Plotting the number of switches as a function of time for all 'players' values
  and saving the plot to plots/MP__M3_T30000_N100__3_algos/all_CumNbSwitchs____env1-1_4972077372766571200 ...
Saving figure with format png, to file 'plots/MP__M3_T30000_N100__3_algos/all_CumNbSwitchs____env1-1_4972077372766571200.png'...
       Saved! 'plots/MP__M3_T30000_N100__3_algos/all_CumNbSwitchs____env1-1_4972077372766571200.png' created of size '143261b', at 'Mon Mar 20 17:46:11 2017' ...
Saving figure with format pdf, to file 'plots/MP__M3_T30000_N100__3_algos/all_CumNbSwitchs____env1-1_4972077372766571200.pdf'...
       Saved! 'plots/MP__M3_T30000_N100__3_algos/all_CumNbSwitchs____env1-1_4972077372766571200.pdf' created of size '43255b', at 'Mon Mar 20 17:46:12 2017' ...


==> To see the figures, do :
eog plots/MP__M3_T30000_N100__3_algos/all*4972077372766571200.png
Done for simulations main_multiplayers.py ...
