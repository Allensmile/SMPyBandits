 - Setting dpi of all figures to 110 ...
 - Setting 'figsize' of all figures to (19.8, 10.8) ...
Info: Using the regular tqdm() decorator ...
Info: numba.jit seems to be available.
Info: numba.jit seems to be available.
Loaded experiments configuration from 'configuration.py' :
configuration = {'collisionModel': <function onlyUniqUserGetsReward at 0x7fda908461e0>, 'environment': [{'params': array([ 0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9]), 'arm_type': <class 'Arms.Bernoulli.Bernoulli'>}], 'verbosity': 6, 'n_jobs': -1, 'horizon': 10000, 'repetitions': 50, 'averageOn': 0.001, 'successive_players': [[Selfish(BayesUCB), Selfish(BayesUCB), Selfish(BayesUCB)], [rhoRand(BayesUCB), rhoRand(BayesUCB), rhoRand(BayesUCB)], [rhoLearn(BayesUCB), rhoLearn(BayesUCB), rhoLearn(BayesUCB)], [rhoLearn(BayesUCB), rhoLearn(BayesUCB), rhoLearn(BayesUCB)], [rhoLearn(BayesUCB), rhoLearn(BayesUCB), rhoLearn(BayesUCB)], [rhoLearn(BayesUCB), rhoLearn(BayesUCB), rhoLearn(BayesUCB)]], 'delta_t_save': 1, 'finalRanksOnAverage': True, 'players': [Selfish(BayesUCB), Selfish(BayesUCB), Selfish(BayesUCB)]}
plots/ is already a directory here...



Considering the list of players :
 [Selfish(BayesUCB), Selfish(BayesUCB), Selfish(BayesUCB)]
Number of players in the multi-players game: 3
Time horizon: 10000
Number of repetitions: 50
Sampling rate DELTA_T_SAVE: 1
Using collision model: onlyUniqUserGetsReward
  Detail:  Simple collision model where only the players alone on one arm sample it and receive the reward.

    - This is the default collision model, cf. https://arxiv.org/abs/0910.2065v3 collision model 1.
    - The numpy array 'choices' is increased according to the number of users who collided (it is NOT binary).
    
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'params': array([ 0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9]), 'arm_type': <class 'Arms.Bernoulli.Bernoulli'>} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [ 0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9]
 - with 'arms' = [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)]
 - with 'nbArms' = 9
 - with 'maxArm' = 0.9
 - with 'minArm' = 0.1

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 ... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
Number of environments to try: 1

Evaluating environment: MAB(nbArms: 9, arms: [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)], minArm: 0.1, maxArm: 0.9)
- Adding player #1 = #1<Selfish, BayesUCB> ...
  Using this already created player 'player' = #1<Selfish, BayesUCB> ...
- Adding player #2 = #2<Selfish, BayesUCB> ...
  Using this already created player 'player' = #2<Selfish, BayesUCB> ...
- Adding player #3 = #3<Selfish, BayesUCB> ...
  Using this already created player 'player' = #3<Selfish, BayesUCB> ...

Estimated order by the policy #1<Selfish, BayesUCB> after 10000 steps: [2 1 3 4 5 0 6 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 75.31% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 98.77% (relative success)...
  ==> Spearman    distance from optimal ordering: 97.54% (relative success)...
  ==> Gestalt     distance from optimal ordering: 77.78% (relative success)...
  ==> Mean distance from optimal ordering: 87.35% (relative success)...

Estimated order by the policy #2<Selfish, BayesUCB> after 10000 steps: [0 2 5 1 3 8 4 6 7] ...
  ==> Optimal arm identification: 83.33% (relative success)...
  ==> Manhattan   distance from optimal ordering: 65.43% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 97.82% (relative success)...
  ==> Spearman    distance from optimal ordering: 98.01% (relative success)...
  ==> Gestalt     distance from optimal ordering: 55.56% (relative success)...
  ==> Mean distance from optimal ordering: 79.20% (relative success)...

Estimated order by the policy #3<Selfish, BayesUCB> after 10000 steps: [0 1 8 4 2 3 7 5 6] ...
  ==> Optimal arm identification: 87.50% (relative success)...
  ==> Manhattan   distance from optimal ordering: 60.49% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 90.47% (relative success)...
  ==> Spearman    distance from optimal ordering: 87.50% (relative success)...
  ==> Gestalt     distance from optimal ordering: 66.67% (relative success)...
  ==> Mean distance from optimal ordering: 76.28% (relative success)...
Giving the final ranks ...

Final ranking for this environment #0 :
- Player #2, '#2<Selfish, BayesUCB>'	was ranked	1 / 3 for this simulation (last rewards = 8106.52).
- Player #1, '#1<Selfish, BayesUCB>'	was ranked	2 / 3 for this simulation (last rewards = 7877.44).
- Player #3, '#3<Selfish, BayesUCB>'	was ranked	3 / 3 for this simulation (last rewards = 7824.72).



Considering the list of players :
 [rhoRand(BayesUCB), rhoRand(BayesUCB), rhoRand(BayesUCB)]
Number of players in the multi-players game: 3
Time horizon: 10000
Number of repetitions: 50
Sampling rate DELTA_T_SAVE: 1
Using collision model: onlyUniqUserGetsReward
  Detail:  Simple collision model where only the players alone on one arm sample it and receive the reward.

    - This is the default collision model, cf. https://arxiv.org/abs/0910.2065v3 collision model 1.
    - The numpy array 'choices' is increased according to the number of users who collided (it is NOT binary).
    
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'params': array([ 0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9]), 'arm_type': <class 'Arms.Bernoulli.Bernoulli'>} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [ 0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9]
 - with 'arms' = [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)]
 - with 'nbArms' = 9
 - with 'maxArm' = 0.9
 - with 'minArm' = 0.1

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 ... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
Number of environments to try: 1

Evaluating environment: MAB(nbArms: 9, arms: [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)], minArm: 0.1, maxArm: 0.9)
- Adding player #1 = #1<$\rho^{\mathrm{Rand}}$, BayesUCB> ...
  Using this already created player 'player' = #1<$\rho^{\mathrm{Rand}}$, BayesUCB> ...
- Adding player #2 = #2<$\rho^{\mathrm{Rand}}$, BayesUCB> ...
  Using this already created player 'player' = #2<$\rho^{\mathrm{Rand}}$, BayesUCB> ...
- Adding player #3 = #3<$\rho^{\mathrm{Rand}}$, BayesUCB> ...
  Using this already created player 'player' = #3<$\rho^{\mathrm{Rand}}$, BayesUCB> ...

Estimated order by the policy #1<$\rho^{\mathrm{Rand}}$, BayesUCB, rank:2> after 10000 steps: [1 0 3 5 6 4 2 7 8] ...
  ==> Optimal arm identification: 83.33% (relative success)...
  ==> Manhattan   distance from optimal ordering: 70.37% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 97.82% (relative success)...
  ==> Spearman    distance from optimal ordering: 98.41% (relative success)...
  ==> Gestalt     distance from optimal ordering: 66.67% (relative success)...
  ==> Mean distance from optimal ordering: 83.32% (relative success)...

Estimated order by the policy #2<$\rho^{\mathrm{Rand}}$, BayesUCB, rank:1> after 10000 steps: [7 3 6 5 0 2 4 1 8] ...
  ==> Optimal arm identification: 66.67% (relative success)...
  ==> Manhattan   distance from optimal ordering: 25.93% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 46.84% (relative success)...
  ==> Spearman    distance from optimal ordering: 29.99% (relative success)...
  ==> Gestalt     distance from optimal ordering: 22.22% (relative success)...
  ==> Mean distance from optimal ordering: 31.24% (relative success)...

Estimated order by the policy #3<$\rho^{\mathrm{Rand}}$, BayesUCB, rank:3> after 10000 steps: [0 1 4 2 3 5 6 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 90.12% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.92% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.99% (relative success)...
  ==> Gestalt     distance from optimal ordering: 88.89% (relative success)...
  ==> Mean distance from optimal ordering: 94.73% (relative success)...
Giving the final ranks ...

Final ranking for this environment #0 :
- Player #3, '#3<$\rho^{\mathrm{Rand}}$, BayesUCB>'	was ranked	1 / 3 for this simulation (last rewards = 7937.02).
- Player #2, '#2<$\rho^{\mathrm{Rand}}$, BayesUCB>'	was ranked	2 / 3 for this simulation (last rewards = 7855.7).
- Player #1, '#1<$\rho^{\mathrm{Rand}}$, BayesUCB>'	was ranked	3 / 3 for this simulation (last rewards = 7790.82).
plots/MP__M3_T10000_N50__3_algos is already a directory here...



Considering the list of players :
 [rhoLearn(BayesUCB), rhoLearn(BayesUCB), rhoLearn(BayesUCB)]
Number of players in the multi-players game: 3
Time horizon: 10000
Number of repetitions: 50
Sampling rate DELTA_T_SAVE: 1
Using collision model: onlyUniqUserGetsReward
  Detail:  Simple collision model where only the players alone on one arm sample it and receive the reward.

    - This is the default collision model, cf. https://arxiv.org/abs/0910.2065v3 collision model 1.
    - The numpy array 'choices' is increased according to the number of users who collided (it is NOT binary).
    
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'params': array([ 0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9]), 'arm_type': <class 'Arms.Bernoulli.Bernoulli'>} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [ 0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9]
 - with 'arms' = [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)]
 - with 'nbArms' = 9
 - with 'maxArm' = 0.9
 - with 'minArm' = 0.1

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 ... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
Number of environments to try: 1

Evaluating environment: MAB(nbArms: 9, arms: [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)], minArm: 0.1, maxArm: 0.9)
- Adding player #1 = #1<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ UCB($\alpha=4$)> ...
  Using this already created player 'player' = #1<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ UCB($\alpha=4$)> ...
- Adding player #2 = #2<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ UCB($\alpha=4$)> ...
  Using this already created player 'player' = #2<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ UCB($\alpha=4$)> ...
- Adding player #3 = #3<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ UCB($\alpha=4$)> ...
  Using this already created player 'player' = #3<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ UCB($\alpha=4$)> ...

Estimated order by the policy #1<$\rho^{\mathrm{Learn}}$, BayesUCB, rank: 3 ~ UCB($\alpha=4$)> after 10000 steps: [2 0 1 3 6 5 8 4 7] ...
  ==> Optimal arm identification: 91.67% (relative success)...
  ==> Manhattan   distance from optimal ordering: 70.37% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 97.82% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.04% (relative success)...
  ==> Gestalt     distance from optimal ordering: 55.56% (relative success)...
  ==> Mean distance from optimal ordering: 80.70% (relative success)...

Estimated order by the policy #2<$\rho^{\mathrm{Learn}}$, BayesUCB, rank: 2 ~ UCB($\alpha=4$)> after 10000 steps: [4 5 3 2 0 6 1 7 8] ...
  ==> Optimal arm identification: 79.17% (relative success)...
  ==> Manhattan   distance from optimal ordering: 50.62% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 59.58% (relative success)...
  ==> Spearman    distance from optimal ordering: 66.83% (relative success)...
  ==> Gestalt     distance from optimal ordering: 55.56% (relative success)...
  ==> Mean distance from optimal ordering: 58.14% (relative success)...

Estimated order by the policy #3<$\rho^{\mathrm{Learn}}$, BayesUCB, rank: 3 ~ UCB($\alpha=4$)> after 10000 steps: [2 3 0 1 4 5 6 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 80.25% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.65% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.75% (relative success)...
  ==> Gestalt     distance from optimal ordering: 77.78% (relative success)...
  ==> Mean distance from optimal ordering: 89.36% (relative success)...
Giving the final ranks ...

Final ranking for this environment #0 :
- Player #1, '#1<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ UCB($\alpha=4$)>'	was ranked	1 / 3 for this simulation (last rewards = 8032.16).
- Player #3, '#3<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ UCB($\alpha=4$)>'	was ranked	2 / 3 for this simulation (last rewards = 7763.86).
- Player #2, '#2<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ UCB($\alpha=4$)>'	was ranked	3 / 3 for this simulation (last rewards = 7656.94).
plots/MP__M3_T10000_N50__3_algos is already a directory here...



Considering the list of players :
 [rhoLearn(BayesUCB), rhoLearn(BayesUCB), rhoLearn(BayesUCB)]
Number of players in the multi-players game: 3
Time horizon: 10000
Number of repetitions: 50
Sampling rate DELTA_T_SAVE: 1
Using collision model: onlyUniqUserGetsReward
  Detail:  Simple collision model where only the players alone on one arm sample it and receive the reward.

    - This is the default collision model, cf. https://arxiv.org/abs/0910.2065v3 collision model 1.
    - The numpy array 'choices' is increased according to the number of users who collided (it is NOT binary).
    
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'params': array([ 0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9]), 'arm_type': <class 'Arms.Bernoulli.Bernoulli'>} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [ 0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9]
 - with 'arms' = [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)]
 - with 'nbArms' = 9
 - with 'maxArm' = 0.9
 - with 'minArm' = 0.1

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 ... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
Number of environments to try: 1

Evaluating environment: MAB(nbArms: 9, arms: [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)], minArm: 0.1, maxArm: 0.9)
- Adding player #1 = #1<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ Thompson> ...
  Using this already created player 'player' = #1<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ Thompson> ...
- Adding player #2 = #2<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ Thompson> ...
  Using this already created player 'player' = #2<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ Thompson> ...
- Adding player #3 = #3<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ Thompson> ...
  Using this already created player 'player' = #3<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ Thompson> ...

Estimated order by the policy #1<$\rho^{\mathrm{Learn}}$, BayesUCB, rank: 3 ~ Thompson> after 10000 steps: [0 2 3 4 1 5 7 6 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 80.25% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.65% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.84% (relative success)...
  ==> Gestalt     distance from optimal ordering: 77.78% (relative success)...
  ==> Mean distance from optimal ordering: 89.38% (relative success)...

Estimated order by the policy #2<$\rho^{\mathrm{Learn}}$, BayesUCB, rank: 3 ~ Thompson> after 10000 steps: [0 1 2 3 4 5 8 7 6] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 90.12% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.82% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.98% (relative success)...
  ==> Gestalt     distance from optimal ordering: 77.78% (relative success)...
  ==> Mean distance from optimal ordering: 91.93% (relative success)...

Estimated order by the policy #3<$\rho^{\mathrm{Learn}}$, BayesUCB, rank: 3 ~ Thompson> after 10000 steps: [0 2 4 1 5 3 6 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 80.25% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.65% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.84% (relative success)...
  ==> Gestalt     distance from optimal ordering: 77.78% (relative success)...
  ==> Mean distance from optimal ordering: 89.38% (relative success)...
Giving the final ranks ...

Final ranking for this environment #0 :
- Player #1, '#1<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ Thompson>'	was ranked	1 / 3 for this simulation (last rewards = 7697.14).
- Player #3, '#3<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ Thompson>'	was ranked	2 / 3 for this simulation (last rewards = 7348.26).
- Player #2, '#2<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ Thompson>'	was ranked	3 / 3 for this simulation (last rewards = 7246.62).
plots/MP__M3_T10000_N50__3_algos is already a directory here...



Considering the list of players :
 [rhoLearn(BayesUCB), rhoLearn(BayesUCB), rhoLearn(BayesUCB)]
Number of players in the multi-players game: 3
Time horizon: 10000
Number of repetitions: 50
Sampling rate DELTA_T_SAVE: 1
Using collision model: onlyUniqUserGetsReward
  Detail:  Simple collision model where only the players alone on one arm sample it and receive the reward.

    - This is the default collision model, cf. https://arxiv.org/abs/0910.2065v3 collision model 1.
    - The numpy array 'choices' is increased according to the number of users who collided (it is NOT binary).
    
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'params': array([ 0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9]), 'arm_type': <class 'Arms.Bernoulli.Bernoulli'>} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [ 0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9]
 - with 'arms' = [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)]
 - with 'nbArms' = 9
 - with 'maxArm' = 0.9
 - with 'minArm' = 0.1

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 ... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
Number of environments to try: 1

Evaluating environment: MAB(nbArms: 9, arms: [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)], minArm: 0.1, maxArm: 0.9)
- Adding player #1 = #1<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ KL-UCB+(Bern)> ...
  Using this already created player 'player' = #1<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ KL-UCB+(Bern)> ...
- Adding player #2 = #2<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ KL-UCB+(Bern)> ...
  Using this already created player 'player' = #2<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ KL-UCB+(Bern)> ...
- Adding player #3 = #3<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ KL-UCB+(Bern)> ...
  Using this already created player 'player' = #3<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ KL-UCB+(Bern)> ...

Estimated order by the policy #1<$\rho^{\mathrm{Learn}}$, BayesUCB, rank: 3 ~ KL-UCB+(Bern)> after 10000 steps: [0 1 2 3 4 5 6 8 7] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 95.06% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.96% (relative success)...
  ==> Spearman    distance from optimal ordering: 100.00% (relative success)...
  ==> Gestalt     distance from optimal ordering: 88.89% (relative success)...
  ==> Mean distance from optimal ordering: 95.98% (relative success)...

Estimated order by the policy #2<$\rho^{\mathrm{Learn}}$, BayesUCB, rank: 3 ~ KL-UCB+(Bern)> after 10000 steps: [5 0 1 2 3 8 7 6 4] ...
  ==> Optimal arm identification: 83.33% (relative success)...
  ==> Manhattan   distance from optimal ordering: 55.56% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 85.56% (relative success)...
  ==> Spearman    distance from optimal ordering: 86.08% (relative success)...
  ==> Gestalt     distance from optimal ordering: 55.56% (relative success)...
  ==> Mean distance from optimal ordering: 70.69% (relative success)...

Estimated order by the policy #3<$\rho^{\mathrm{Learn}}$, BayesUCB, rank: 2 ~ KL-UCB+(Bern)> after 10000 steps: [0 3 1 2 5 4 6 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 85.19% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.82% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.98% (relative success)...
  ==> Gestalt     distance from optimal ordering: 77.78% (relative success)...
  ==> Mean distance from optimal ordering: 90.69% (relative success)...
Giving the final ranks ...

Final ranking for this environment #0 :
- Player #1, '#1<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ KL-UCB+(Bern)>'	was ranked	1 / 3 for this simulation (last rewards = 7521.24).
- Player #3, '#3<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ KL-UCB+(Bern)>'	was ranked	2 / 3 for this simulation (last rewards = 7414.32).
- Player #2, '#2<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ KL-UCB+(Bern)>'	was ranked	3 / 3 for this simulation (last rewards = 7216.56).
plots/MP__M3_T10000_N50__3_algos is already a directory here...



Considering the list of players :
 [rhoLearn(BayesUCB), rhoLearn(BayesUCB), rhoLearn(BayesUCB)]
Number of players in the multi-players game: 3
Time horizon: 10000
Number of repetitions: 50
Sampling rate DELTA_T_SAVE: 1
Using collision model: onlyUniqUserGetsReward
  Detail:  Simple collision model where only the players alone on one arm sample it and receive the reward.

    - This is the default collision model, cf. https://arxiv.org/abs/0910.2065v3 collision model 1.
    - The numpy array 'choices' is increased according to the number of users who collided (it is NOT binary).
    
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'params': array([ 0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9]), 'arm_type': <class 'Arms.Bernoulli.Bernoulli'>} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [ 0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9]
 - with 'arms' = [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)]
 - with 'nbArms' = 9
 - with 'maxArm' = 0.9
 - with 'minArm' = 0.1

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 ... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
Number of environments to try: 1

Evaluating environment: MAB(nbArms: 9, arms: [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)], minArm: 0.1, maxArm: 0.9)
- Adding player #1 = #1<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ BayesUCB> ...
  Using this already created player 'player' = #1<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ BayesUCB> ...
- Adding player #2 = #2<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ BayesUCB> ...
  Using this already created player 'player' = #2<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ BayesUCB> ...
- Adding player #3 = #3<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ BayesUCB> ...
  Using this already created player 'player' = #3<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ BayesUCB> ...

Estimated order by the policy #1<$\rho^{\mathrm{Learn}}$, BayesUCB, rank: 3 ~ BayesUCB> after 10000 steps: [0 2 5 4 1 3 7 8 6] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 65.43% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 96.29% (relative success)...
  ==> Spearman    distance from optimal ordering: 98.01% (relative success)...
  ==> Gestalt     distance from optimal ordering: 55.56% (relative success)...
  ==> Mean distance from optimal ordering: 78.82% (relative success)...

Estimated order by the policy #2<$\rho^{\mathrm{Learn}}$, BayesUCB, rank: 2 ~ BayesUCB> after 10000 steps: [0 1 7 4 5 2 3 8 6] ...
  ==> Optimal arm identification: 83.33% (relative success)...
  ==> Manhattan   distance from optimal ordering: 60.49% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 90.47% (relative success)...
  ==> Spearman    distance from optimal ordering: 90.08% (relative success)...
  ==> Gestalt     distance from optimal ordering: 55.56% (relative success)...
  ==> Mean distance from optimal ordering: 74.15% (relative success)...

Estimated order by the policy #3<$\rho^{\mathrm{Learn}}$, BayesUCB, rank: 3 ~ BayesUCB> after 10000 steps: [3 4 0 1 2 5 6 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 70.37% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 98.77% (relative success)...
  ==> Spearman    distance from optimal ordering: 98.01% (relative success)...
  ==> Gestalt     distance from optimal ordering: 77.78% (relative success)...
  ==> Mean distance from optimal ordering: 86.23% (relative success)...
Giving the final ranks ...

Final ranking for this environment #0 :
- Player #3, '#3<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ BayesUCB>'	was ranked	1 / 3 for this simulation (last rewards = 7484.48).
- Player #2, '#2<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ BayesUCB>'	was ranked	2 / 3 for this simulation (last rewards = 7452.42).
- Player #1, '#1<$\rho^{\mathrm{Learn}}$, BayesUCB, rank ~ BayesUCB>'	was ranked	3 / 3 for this simulation (last rewards = 7446.02).
plots/MP__M3_T10000_N50__3_algos is already a directory here...


- Plotting the centralized regret for all 'players' values
  and saving the plot to plots/MP__M3_T10000_N50__3_algos/all_RegretCentralized____env1-1_3476648460116388499 ...
  - For 3 player, our lower bound gave = 33.5 ...
  - For 3 player, the initial lower bound in Theorem 6 from [Anandkumar et al., 2010] gave = 17.8 ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 for 1-player problem ... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
 - Our lowerbound = 33.5,
 - [Anandkumar et al] lowerbound = 17.8
Saving figure with format png, to file 'plots/MP__M3_T10000_N50__3_algos/all_RegretCentralized____env1-1_3476648460116388499.png'...
       Saved! 'plots/MP__M3_T10000_N50__3_algos/all_RegretCentralized____env1-1_3476648460116388499.png' created of size '247137b', at 'Mon Mar 20 15:09:30 2017' ...
Saving figure with format pdf, to file 'plots/MP__M3_T10000_N50__3_algos/all_RegretCentralized____env1-1_3476648460116388499.pdf'...
       Saved! 'plots/MP__M3_T10000_N50__3_algos/all_RegretCentralized____env1-1_3476648460116388499.pdf' created of size '122331b', at 'Mon Mar 20 15:09:30 2017' ...


- Plotting the centralized regret for all 'players' values, in semilogx scale
  and saving the plot to plots/MP__M3_T10000_N50__3_algos/all_RegretCentralized_semilogx____env1-1_3476648460116388499 ...
  - For 3 player, our lower bound gave = 33.5 ...
  - For 3 player, the initial lower bound in Theorem 6 from [Anandkumar et al., 2010] gave = 17.8 ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 for 1-player problem ... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
 - Our lowerbound = 33.5,
 - [Anandkumar et al] lowerbound = 17.8
Saving figure with format png, to file 'plots/MP__M3_T10000_N50__3_algos/all_RegretCentralized_semilogx____env1-1_3476648460116388499.png'...
       Saved! 'plots/MP__M3_T10000_N50__3_algos/all_RegretCentralized_semilogx____env1-1_3476648460116388499.png' created of size '230828b', at 'Mon Mar 20 15:09:32 2017' ...
Saving figure with format pdf, to file 'plots/MP__M3_T10000_N50__3_algos/all_RegretCentralized_semilogx____env1-1_3476648460116388499.pdf'...
       Saved! 'plots/MP__M3_T10000_N50__3_algos/all_RegretCentralized_semilogx____env1-1_3476648460116388499.pdf' created of size '118302b', at 'Mon Mar 20 15:09:32 2017' ...


- Plotting the centralized regret for all 'players' values, in semilogy scale
  and saving the plot to plots/MP__M3_T10000_N50__3_algos/all_RegretCentralized_semilogy____env1-1_3476648460116388499 ...
  - For 3 player, our lower bound gave = 33.5 ...
  - For 3 player, the initial lower bound in Theorem 6 from [Anandkumar et al., 2010] gave = 17.8 ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 for 1-player problem ... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
 - Our lowerbound = 33.5,
 - [Anandkumar et al] lowerbound = 17.8
Saving figure with format png, to file 'plots/MP__M3_T10000_N50__3_algos/all_RegretCentralized_semilogy____env1-1_3476648460116388499.png'...
       Saved! 'plots/MP__M3_T10000_N50__3_algos/all_RegretCentralized_semilogy____env1-1_3476648460116388499.png' created of size '205800b', at 'Mon Mar 20 15:09:33 2017' ...
Saving figure with format pdf, to file 'plots/MP__M3_T10000_N50__3_algos/all_RegretCentralized_semilogy____env1-1_3476648460116388499.pdf'...
       Saved! 'plots/MP__M3_T10000_N50__3_algos/all_RegretCentralized_semilogy____env1-1_3476648460116388499.pdf' created of size '85075b', at 'Mon Mar 20 15:09:33 2017' ...


- Plotting the centralized regret for all 'players' values, in loglog scale
  and saving the plot to plots/MP__M3_T10000_N50__3_algos/all_RegretCentralized_loglog____env1-1_3476648460116388499 ...
  - For 3 player, our lower bound gave = 33.5 ...
  - For 3 player, the initial lower bound in Theorem 6 from [Anandkumar et al., 2010] gave = 17.8 ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 for 1-player problem ... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
 - Our lowerbound = 33.5,
 - [Anandkumar et al] lowerbound = 17.8
Saving figure with format png, to file 'plots/MP__M3_T10000_N50__3_algos/all_RegretCentralized_loglog____env1-1_3476648460116388499.png'...
       Saved! 'plots/MP__M3_T10000_N50__3_algos/all_RegretCentralized_loglog____env1-1_3476648460116388499.png' created of size '251091b', at 'Mon Mar 20 15:09:35 2017' ...
Saving figure with format pdf, to file 'plots/MP__M3_T10000_N50__3_algos/all_RegretCentralized_loglog____env1-1_3476648460116388499.pdf'...
       Saved! 'plots/MP__M3_T10000_N50__3_algos/all_RegretCentralized_loglog____env1-1_3476648460116388499.pdf' created of size '145509b', at 'Mon Mar 20 15:09:35 2017' ...


- Plotting the centralized fairness (RajJain)
  and saving the plot to plots/MP__M3_T10000_N50__3_algos/all____env1-1_3476648460116388499 ...
Saving figure with format png, to file 'plots/MP__M3_T10000_N50__3_algos/all____env1-1_3476648460116388499.png'...
       Saved! 'plots/MP__M3_T10000_N50__3_algos/all____env1-1_3476648460116388499.png' created of size '179162b', at 'Mon Mar 20 15:09:36 2017' ...
Saving figure with format pdf, to file 'plots/MP__M3_T10000_N50__3_algos/all____env1-1_3476648460116388499.pdf'...
       Saved! 'plots/MP__M3_T10000_N50__3_algos/all____env1-1_3476648460116388499.pdf' created of size '104139b', at 'Mon Mar 20 15:09:37 2017' ...
 - Plotting the total nb of collision as a function of time for all 'players' values
  and saving the plot to plots/MP__M3_T10000_N50__3_algos/all_NbCollisions____env1-1_3476648460116388499 ...
Saving figure with format png, to file 'plots/MP__M3_T10000_N50__3_algos/all_NbCollisions____env1-1_3476648460116388499.png'...
       Saved! 'plots/MP__M3_T10000_N50__3_algos/all_NbCollisions____env1-1_3476648460116388499.png' created of size '267007b', at 'Mon Mar 20 15:09:37 2017' ...
Saving figure with format pdf, to file 'plots/MP__M3_T10000_N50__3_algos/all_NbCollisions____env1-1_3476648460116388499.pdf'...
       Saved! 'plots/MP__M3_T10000_N50__3_algos/all_NbCollisions____env1-1_3476648460116388499.pdf' created of size '71108b', at 'Mon Mar 20 15:09:37 2017' ...
 - Plotting the cumulated total nb of collision as a function of time for all 'players' values
  and saving the plot to plots/MP__M3_T10000_N50__3_algos/all_CumNbCollisions____env1-1_3476648460116388499 ...
Saving figure with format png, to file 'plots/MP__M3_T10000_N50__3_algos/all_CumNbCollisions____env1-1_3476648460116388499.png'...
       Saved! 'plots/MP__M3_T10000_N50__3_algos/all_CumNbCollisions____env1-1_3476648460116388499.png' created of size '203059b', at 'Mon Mar 20 15:09:41 2017' ...
Saving figure with format pdf, to file 'plots/MP__M3_T10000_N50__3_algos/all_CumNbCollisions____env1-1_3476648460116388499.pdf'...
       Saved! 'plots/MP__M3_T10000_N50__3_algos/all_CumNbCollisions____env1-1_3476648460116388499.pdf' created of size '61187b', at 'Mon Mar 20 15:09:41 2017' ...


- Plotting the number of switches as a function of time for all 'players' values
  and saving the plot to plots/MP__M3_T10000_N50__3_algos/all_CumNbSwitchs____env1-1_3476648460116388499 ...
Saving figure with format png, to file 'plots/MP__M3_T10000_N50__3_algos/all_CumNbSwitchs____env1-1_3476648460116388499.png'...
       Saved! 'plots/MP__M3_T10000_N50__3_algos/all_CumNbSwitchs____env1-1_3476648460116388499.png' created of size '222163b', at 'Mon Mar 20 15:09:42 2017' ...
Saving figure with format pdf, to file 'plots/MP__M3_T10000_N50__3_algos/all_CumNbSwitchs____env1-1_3476648460116388499.pdf'...
       Saved! 'plots/MP__M3_T10000_N50__3_algos/all_CumNbSwitchs____env1-1_3476648460116388499.pdf' created of size '96693b', at 'Mon Mar 20 15:09:42 2017' ...


==> To see the figures, do :
eog plots/MP__M3_T10000_N50__3_algos/all*3476648460116388499.png
Done for simulations main_multiplayers.py ...
