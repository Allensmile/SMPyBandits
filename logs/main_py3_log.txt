Loaded experiments configuration from 'configuration.py' :
configuration['policies'] = [{'archtype': <class 'Policies.Aggr.Aggr'>, 'params': {'update_like_exp4': True, 'children': [{'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}}, {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {}}, {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {}}, {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}}, {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.5, 'horizon': 30000}}, {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.125, 'horizon': 30000}}, {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.01, 'horizon': 30000}}], 'decreaseRate': 'auto', 'learningRate': 0.01, 'update_all_children': False, 'unbiased': False}}, {'archtype': <class 'Policies.Aggr.Aggr'>, 'params': {'update_like_exp4': False, 'children': [{'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}}, {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {}}, {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {}}, {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}}, {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.5, 'horizon': 30000}}, {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.125, 'horizon': 30000}}, {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.01, 'horizon': 30000}}], 'decreaseRate': 'auto', 'learningRate': 0.01, 'update_all_children': False, 'unbiased': False}}, {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}}, {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {}}, {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {}}, {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}}, {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.5, 'horizon': 30000}}, {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.125, 'horizon': 30000}}, {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.01, 'horizon': 30000}}]
plots/ is already a directory here...
Number of policies in this comparaison: 9
Time horizon: 30000
Number of repetitions: 4
Sampling rate DELTA_T_SAVE: 1
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': [0.01, 0.02, 0.3, 0.4, 0.5, 0.6, 0.78, 0.8, 0.82]} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [0.01, 0.02, 0.3, 0.4, 0.5, 0.6, 0.78, 0.8, 0.82]
 - with 'arms' = [B(0.01), B(0.02), B(0.3), B(0.4), B(0.5), B(0.6), B(0.78), B(0.8), B(0.82)]
 - with 'nbArms' = 9
 - with 'maxArm' = 0.82
Number of environments to try: 1

Evaluating environment: <MAB{'maxArm': 0.81999999999999995, 'nbArms': 9, 'arms': [B(0.01), B(0.02), B(0.3), B(0.4), B(0.5), B(0.6), B(0.78), B(0.8), B(0.82)]}>
- Adding policy #1 = {'archtype': <class 'Policies.Aggr.Aggr'>, 'params': {'update_like_exp4': True, 'children': [{'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}}, {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {}}, {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {}}, {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}}, {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.5, 'horizon': 30000}}, {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.125, 'horizon': 30000}}, {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.01, 'horizon': 30000}}], 'decreaseRate': 'auto', 'learningRate': 0.01, 'update_all_children': False, 'unbiased': False}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][0]' = {'archtype': <class 'Policies.Aggr.Aggr'>, 'params': {'update_like_exp4': True, 'children': [{'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}}, {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {}}, {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {}}, {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}}, {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.5, 'horizon': 30000}}, {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.125, 'horizon': 30000}}, {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.01, 'horizon': 30000}}], 'decreaseRate': 'auto', 'learningRate': 0.01, 'update_all_children': False, 'unbiased': False}} ...
  Creating this child player from a dictionnary 'children[0]' = {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}} ...
  Creating this child player from a dictionnary 'children[1]' = {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {}} ...
  Creating this child player from a dictionnary 'children[2]' = {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {}} ...
  Creating this child player from a dictionnary 'children[3]' = {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}} ...
  Creating this child player from a dictionnary 'children[4]' = {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.5, 'horizon': 30000}} ...
  Creating this child player from a dictionnary 'children[5]' = {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.125, 'horizon': 30000}} ...
  Creating this child player from a dictionnary 'children[6]' = {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.01, 'horizon': 30000}} ...
- Adding policy #2 = {'archtype': <class 'Policies.Aggr.Aggr'>, 'params': {'update_like_exp4': False, 'children': [{'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}}, {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {}}, {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {}}, {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}}, {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.5, 'horizon': 30000}}, {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.125, 'horizon': 30000}}, {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.01, 'horizon': 30000}}], 'decreaseRate': 'auto', 'learningRate': 0.01, 'update_all_children': False, 'unbiased': False}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][1]' = {'archtype': <class 'Policies.Aggr.Aggr'>, 'params': {'update_like_exp4': False, 'children': [{'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}}, {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {}}, {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {}}, {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}}, {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.5, 'horizon': 30000}}, {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.125, 'horizon': 30000}}, {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.01, 'horizon': 30000}}], 'decreaseRate': 'auto', 'learningRate': 0.01, 'update_all_children': False, 'unbiased': False}} ...
  Creating this child player from a dictionnary 'children[0]' = {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}} ...
  Creating this child player from a dictionnary 'children[1]' = {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {}} ...
  Creating this child player from a dictionnary 'children[2]' = {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {}} ...
  Creating this child player from a dictionnary 'children[3]' = {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}} ...
  Creating this child player from a dictionnary 'children[4]' = {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.5, 'horizon': 30000}} ...
  Creating this child player from a dictionnary 'children[5]' = {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.125, 'horizon': 30000}} ...
  Creating this child player from a dictionnary 'children[6]' = {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.01, 'horizon': 30000}} ...
- Adding policy #3 = {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][2]' = {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}} ...
- Adding policy #4 = {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][3]' = {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {}} ...
- Adding policy #5 = {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][4]' = {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {}} ...
- Adding policy #6 = {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][5]' = {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}} ...
- Adding policy #7 = {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.5, 'horizon': 30000}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][6]' = {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.5, 'horizon': 30000}} ...
- Adding policy #8 = {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.125, 'horizon': 30000}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][7]' = {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.125, 'horizon': 30000}} ...
- Adding policy #9 = {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.01, 'horizon': 30000}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][8]' = {'archtype': <class 'Policies.AdBandits.AdBandits'>, 'params': {'alpha': 0.01, 'horizon': 30000}} ...

===> Pre-computing the rewards ... Of shape (9, 30000) ...
    In order for all simulated algorithms to face the same random rewards (robust comparaison of A1,..,An vs Aggr(A1,..,An)) ...


- Evaluating policy #1/9: Aggr($N=7$, Exp4) ...

- Evaluating policy #2/9: Aggr($N=7$) ...

- Evaluating policy #3/9: Thompson ...

- Evaluating policy #4/9: klUCB ...

- Evaluating policy #5/9: klUCBPlus ...

- Evaluating policy #6/9: BayesUCB ...

- Evaluating policy #7/9: AdBandits($\alpha=0.5$, $T=3e+04$) ...

- Evaluating policy #8/9: AdBandits($\alpha=0.125$, $T=3e+04$) ...

- Evaluating policy #9/9: AdBandits($\alpha=0.01$, $T=3e+04$) ...
Giving the final ranks ...

Final ranking for this environment #0 :
- Policy 'AdBandits($\alpha=0.125$, $T=3e+04$)'	was ranked	1 / 9 for this simulation (last regret = 33.82).
- Policy 'Aggr($N=7$, Exp4)'	was ranked	2 / 9 for this simulation (last regret = 58.82).
- Policy 'AdBandits($\alpha=0.5$, $T=3e+04$)'	was ranked	3 / 9 for this simulation (last regret = 66.82).
- Policy 'BayesUCB'	was ranked	4 / 9 for this simulation (last regret = 74.82).
- Policy 'Aggr($N=7$)'	was ranked	5 / 9 for this simulation (last regret = 79.82).
- Policy 'klUCBPlus'	was ranked	6 / 9 for this simulation (last regret = 86.32).
- Policy 'klUCB'	was ranked	7 / 9 for this simulation (last regret = 165.82).
- Policy 'Thompson'	was ranked	8 / 9 for this simulation (last regret = 168.82).
- Policy 'AdBandits($\alpha=0.01$, $T=3e+04$)'	was ranked	9 / 9 for this simulation (last regret = 780.07).
plots/T30000_N4__9_algos is already a directory here...
 - Plotting the cumulative rewards, and saving the plot to plots/T30000_N4__9_algos/main____env1-1_7563945944272408907.png ...
Saving to plots/T30000_N4__9_algos/main____env1-1_7563945944272408907.png ...
 - Plotting the mean rewards, and saving the plot to plots/T30000_N4__9_algos/main_MeanRewards____env1-1_7563945944272408907.png ...
Saving to plots/T30000_N4__9_algos/main_MeanRewards____env1-1_7563945944272408907.png ...
 - Plotting the mean rewards, and saving the plot to plots/T30000_N4__9_algos/main_Normalized_MeanRewards____env1-1_7563945944272408907.png ...
Saving to plots/T30000_N4__9_algos/main_Normalized_MeanRewards____env1-1_7563945944272408907.png ...
 - Plotting the results, and saving the plot to plots/T30000_N4__9_algos/main_BestArmPulls_Normalized_MeanRewards____env1-1_7563945944272408907.png ...
Saving to plots/T30000_N4__9_algos/main_BestArmPulls_Normalized_MeanRewards____env1-1_7563945944272408907.png ...
