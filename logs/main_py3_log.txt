 - Setting dpi of all figures to 110 ...
 - Setting 'figsize' of all figures to (19.8, 10.8) ...
Info: Using the regular tqdm() decorator ...
Info: numba.jit seems to be available.
Info: numba.jit seems to be available.
Loaded experiments configuration from 'configuration.py' :
configuration['policies'] = [{'params': {}, 'archtype': <class 'Policies.EmpiricalMeans.EmpiricalMeans'>}, {'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {}, 'archtype': <class 'Policies.MOSS.MOSS'>}, {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>}, {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCB.klUCB'>}, {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>}, {'params': {'horizon': 30000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>}, {'params': {'horizon': 30000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>}, {'params': {}, 'archtype': <class 'Policies.BayesUCB.BayesUCB'>}]
plots/ is already a directory here...
Number of policies in this comparison: 11
Time horizon: 30000
Number of repetitions: 100
Sampling rate DELTA_T_SAVE: 1
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
 - with 'arms' = [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)]
 - with 'nbArms' = 9
 - with 'maxArm' = 0.9
 - with 'minArm' = 0.1

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 ... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
Number of environments to try: 1

Evaluating environment: <MAB{'arms': [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)], 'nbArms': 9, 'maxArm': 0.90000000000000002, 'minArm': 0.10000000000000001}>
- Adding policy #1 = {'params': {}, 'archtype': <class 'Policies.EmpiricalMeans.EmpiricalMeans'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][0]' = {'params': {}, 'archtype': <class 'Policies.EmpiricalMeans.EmpiricalMeans'>} ...
- Adding policy #2 = {'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][1]' = {'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
- Adding policy #3 = {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][2]' = {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
- Adding policy #4 = {'params': {'alpha': 0.1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][3]' = {'params': {'alpha': 0.1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
- Adding policy #5 = {'params': {}, 'archtype': <class 'Policies.MOSS.MOSS'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][4]' = {'params': {}, 'archtype': <class 'Policies.MOSS.MOSS'>} ...
- Adding policy #6 = {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][5]' = {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>} ...
- Adding policy #7 = {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCB.klUCB'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][6]' = {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCB.klUCB'>} ...
- Adding policy #8 = {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][7]' = {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>} ...
- Adding policy #9 = {'params': {'horizon': 30000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][8]' = {'params': {'horizon': 30000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>} ...
- Adding policy #10 = {'params': {'horizon': 30000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][9]' = {'params': {'horizon': 30000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>} ...
- Adding policy #11 = {'params': {}, 'archtype': <class 'Policies.BayesUCB.BayesUCB'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][10]' = {'params': {}, 'archtype': <class 'Policies.BayesUCB.BayesUCB'>} ...

- Evaluating policy #1/11: EmpiricalMeans ...

Estimated order by the policy EmpiricalMeans after 30000 steps: [0 4 5 1 3 6 2 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 65.43% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 96.29% (relative success)...
  ==> Spearman    distance from optimal ordering: 95.01% (relative success)...
  ==> Gestalt     distance from optimal ordering: 66.67% (relative success)...
  ==> Mean distance from optimal ordering: 80.85% (relative success)...

- Evaluating policy #2/11: UCB($\alpha=1$) ...

Estimated order by the policy UCB($\alpha=1$) after 30000 steps: [0 5 4 1 3 2 6 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 70.37% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 96.29% (relative success)...
  ==> Spearman    distance from optimal ordering: 97.02% (relative success)...
  ==> Gestalt     distance from optimal ordering: 55.56% (relative success)...
  ==> Mean distance from optimal ordering: 79.81% (relative success)...

- Evaluating policy #3/11: UCB($\alpha=0.5$) ...

Estimated order by the policy UCB($\alpha=0.5$) after 30000 steps: [0 5 3 4 6 1 2 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 60.49% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 90.47% (relative success)...
  ==> Spearman    distance from optimal ordering: 87.50% (relative success)...
  ==> Gestalt     distance from optimal ordering: 66.67% (relative success)...
  ==> Mean distance from optimal ordering: 76.28% (relative success)...

- Evaluating policy #4/11: UCB($\alpha=0.1$) ...

Estimated order by the policy UCB($\alpha=0.1$) after 30000 steps: [1 2 3 0 5 4 6 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 80.25% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.65% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.84% (relative success)...
  ==> Gestalt     distance from optimal ordering: 77.78% (relative success)...
  ==> Mean distance from optimal ordering: 89.38% (relative success)...

- Evaluating policy #5/11: MOSS ...

Estimated order by the policy MOSS after 30000 steps: [0 1 2 4 3 5 6 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 95.06% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.96% (relative success)...
  ==> Spearman    distance from optimal ordering: 100.00% (relative success)...
  ==> Gestalt     distance from optimal ordering: 88.89% (relative success)...
  ==> Mean distance from optimal ordering: 95.98% (relative success)...

- Evaluating policy #6/11: Thompson ...

Estimated order by the policy Thompson after 30000 steps: [3 4 0 1 5 6 2 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 60.49% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 96.29% (relative success)...
  ==> Spearman    distance from optimal ordering: 93.29% (relative success)...
  ==> Gestalt     distance from optimal ordering: 66.67% (relative success)...
  ==> Mean distance from optimal ordering: 79.19% (relative success)...

- Evaluating policy #7/11: KL-UCB(Bern) ...

Estimated order by the policy KL-UCB(Bern) after 30000 steps: [0 1 5 7 2 4 6 3 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 65.43% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 93.94% (relative success)...
  ==> Spearman    distance from optimal ordering: 92.31% (relative success)...
  ==> Gestalt     distance from optimal ordering: 55.56% (relative success)...
  ==> Mean distance from optimal ordering: 76.81% (relative success)...

- Evaluating policy #8/11: KL-UCB+(Bern) ...

Estimated order by the policy KL-UCB+(Bern) after 30000 steps: [0 3 4 5 1 2 6 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 70.37% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 98.77% (relative success)...
  ==> Spearman    distance from optimal ordering: 98.01% (relative success)...
  ==> Gestalt     distance from optimal ordering: 77.78% (relative success)...
  ==> Mean distance from optimal ordering: 86.23% (relative success)...

- Evaluating policy #9/11: KL-UCB-H+(Bern) ...

Estimated order by the policy KL-UCB-H+(Bern) after 30000 steps: [0 5 3 4 2 1 6 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 70.37% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 93.94% (relative success)...
  ==> Spearman    distance from optimal ordering: 95.76% (relative success)...
  ==> Gestalt     distance from optimal ordering: 66.67% (relative success)...
  ==> Mean distance from optimal ordering: 81.68% (relative success)...

- Evaluating policy #10/11: KL-UCB++(Bern) ...

Estimated order by the policy KL-UCB++(Bern) after 30000 steps: [4 0 1 2 5 3 6 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 75.31% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.33% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.04% (relative success)...
  ==> Gestalt     distance from optimal ordering: 77.78% (relative success)...
  ==> Mean distance from optimal ordering: 87.86% (relative success)...

- Evaluating policy #11/11: BayesUCB ...

Estimated order by the policy BayesUCB after 30000 steps: [2 1 5 0 3 6 4 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 70.37% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 97.82% (relative success)...
  ==> Spearman    distance from optimal ordering: 98.41% (relative success)...
  ==> Gestalt     distance from optimal ordering: 55.56% (relative success)...
  ==> Mean distance from optimal ordering: 80.54% (relative success)...
Giving the final ranks ...

Final ranking for this environment #0 :
- Policy 'Thompson'	was ranked	1 / 11 for this simulation (last regret = 48.05).
- Policy 'KL-UCB-H+(Bern)'	was ranked	2 / 11 for this simulation (last regret = 49.47).
- Policy 'BayesUCB'	was ranked	3 / 11 for this simulation (last regret = 54.39).
- Policy 'KL-UCB++(Bern)'	was ranked	4 / 11 for this simulation (last regret = 57.28).
- Policy 'KL-UCB+(Bern)'	was ranked	5 / 11 for this simulation (last regret = 59.83).
- Policy 'UCB($\alpha=0.5$)'	was ranked	6 / 11 for this simulation (last regret = 63.66).
- Policy 'KL-UCB(Bern)'	was ranked	7 / 11 for this simulation (last regret = 71.49).
- Policy 'MOSS'	was ranked	8 / 11 for this simulation (last regret = 104.3).
- Policy 'UCB($\alpha=1$)'	was ranked	9 / 11 for this simulation (last regret = 128.25).
- Policy 'UCB($\alpha=0.1$)'	was ranked	10 / 11 for this simulation (last regret = 287.61).
- Policy 'EmpiricalMeans'	was ranked	11 / 11 for this simulation (last regret = 1042.55).
 - Plotting the cumulative rewards, and saving the plot to plots/T30000_N100__11_algos/main____env1-1_7173767119885164790 ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 for 1-player problem... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
Saving figure with format png, to file 'plots/T30000_N100__11_algos/main____env1-1_7173767119885164790.png'...
       Saved! 'plots/T30000_N100__11_algos/main____env1-1_7173767119885164790.png' created of size '209456b', at 'Tue Mar 14 11:55:34 2017' ...
Saving figure with format pdf, to file 'plots/T30000_N100__11_algos/main____env1-1_7173767119885164790.pdf'...
       Saved! 'plots/T30000_N100__11_algos/main____env1-1_7173767119885164790.pdf' created of size '256029b', at 'Tue Mar 14 11:55:34 2017' ...
Saving figure with format eps, to file 'plots/T30000_N100__11_algos/main____env1-1_7173767119885164790.eps'...
       Saved! 'plots/T30000_N100__11_algos/main____env1-1_7173767119885164790.eps' created of size '625263b', at 'Tue Mar 14 11:55:35 2017' ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 for 1-player problem... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
Saving figure with format png, to file 'plots/T30000_N100__11_algos/main_semilogx____env1-1_7173767119885164790.png'...
       Saved! 'plots/T30000_N100__11_algos/main_semilogx____env1-1_7173767119885164790.png' created of size '179907b', at 'Tue Mar 14 11:55:36 2017' ...
Saving figure with format pdf, to file 'plots/T30000_N100__11_algos/main_semilogx____env1-1_7173767119885164790.pdf'...
       Saved! 'plots/T30000_N100__11_algos/main_semilogx____env1-1_7173767119885164790.pdf' created of size '278802b', at 'Tue Mar 14 11:55:36 2017' ...
Saving figure with format eps, to file 'plots/T30000_N100__11_algos/main_semilogx____env1-1_7173767119885164790.eps'...
       Saved! 'plots/T30000_N100__11_algos/main_semilogx____env1-1_7173767119885164790.eps' created of size '778523b', at 'Tue Mar 14 11:55:37 2017' ...
 - Plotting the mean rewards, and saving the plot to plots/T30000_N100__11_algos/main_MeanRewards____env1-1_7173767119885164790 ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 for 1-player problem... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
Saving figure with format png, to file 'plots/T30000_N100__11_algos/main_MeanRewards____env1-1_7173767119885164790.png'...
       Saved! 'plots/T30000_N100__11_algos/main_MeanRewards____env1-1_7173767119885164790.png' created of size '155771b', at 'Tue Mar 14 11:55:38 2017' ...
Saving figure with format pdf, to file 'plots/T30000_N100__11_algos/main_MeanRewards____env1-1_7173767119885164790.pdf'...
       Saved! 'plots/T30000_N100__11_algos/main_MeanRewards____env1-1_7173767119885164790.pdf' created of size '86302b', at 'Tue Mar 14 11:55:38 2017' ...
Saving figure with format eps, to file 'plots/T30000_N100__11_algos/main_MeanRewards____env1-1_7173767119885164790.eps'...
       Saved! 'plots/T30000_N100__11_algos/main_MeanRewards____env1-1_7173767119885164790.eps' created of size '181141b', at 'Tue Mar 14 11:55:39 2017' ...
 - Plotting the results, and saving the plot to plots/T30000_N100__11_algos/main_BestArmPulls____env1-1_7173767119885164790 ...
Saving figure with format png, to file 'plots/T30000_N100__11_algos/main_BestArmPulls____env1-1_7173767119885164790.png'...
       Saved! 'plots/T30000_N100__11_algos/main_BestArmPulls____env1-1_7173767119885164790.png' created of size '171000b', at 'Tue Mar 14 11:55:40 2017' ...
Saving figure with format pdf, to file 'plots/T30000_N100__11_algos/main_BestArmPulls____env1-1_7173767119885164790.pdf'...
       Saved! 'plots/T30000_N100__11_algos/main_BestArmPulls____env1-1_7173767119885164790.pdf' created of size '55735b', at 'Tue Mar 14 11:55:40 2017' ...
Saving figure with format eps, to file 'plots/T30000_N100__11_algos/main_BestArmPulls____env1-1_7173767119885164790.eps'...
       Saved! 'plots/T30000_N100__11_algos/main_BestArmPulls____env1-1_7173767119885164790.eps' created of size '110481b', at 'Tue Mar 14 11:55:41 2017' ...


==> To see the figures, do :
eog plots/T30000_N100__11_algos/main*7173767119885164790.png
Done for simulations main.py ...
