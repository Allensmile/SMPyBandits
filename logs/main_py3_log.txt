Loaded experiments configuration from 'configuration.py' :
configuration['policies'] = [{'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 4}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 3}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 2}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.25}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.05}}, {'archtype': <class 'Policies.Aggr.Aggr'>, 'params': {'update_all_children': True, 'decreaseRate': 'auto', 'learningRate': 0.01, 'update_like_exp4': True, 'children': [{'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 4}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 3}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 2}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.25}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.05}}], 'unbiased': True}}]
plots/ is already a directory here...
Number of policies in this comparaison: 9
Time horizon: 10000
Number of repetitions: 20
Sampling rate DELTA_T_SAVE: 1
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': [0.01, 0.02, 0.3, 0.4, 0.5, 0.6, 0.78, 0.8, 0.82]} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [0.01, 0.02, 0.3, 0.4, 0.5, 0.6, 0.78, 0.8, 0.82]
 - with 'arms' = [B(0.01), B(0.02), B(0.3), B(0.4), B(0.5), B(0.6), B(0.78), B(0.8), B(0.82)]
 - with 'nbArms' = 9
 - with 'maxArm' = 0.82
Number of environments to try: 1

Evaluating environment: <MAB{'maxArm': 0.81999999999999995, 'nbArms': 9, 'arms': [B(0.01), B(0.02), B(0.3), B(0.4), B(0.5), B(0.6), B(0.78), B(0.8), B(0.82)]}>
- Adding policy #1 = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 4}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][0]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 4}} ...
- Adding policy #2 = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 3}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][1]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 3}} ...
- Adding policy #3 = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 2}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][2]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 2}} ...
- Adding policy #4 = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][3]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}} ...
- Adding policy #5 = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][4]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}} ...
- Adding policy #6 = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.25}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][5]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.25}} ...
- Adding policy #7 = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][6]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}} ...
- Adding policy #8 = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.05}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][7]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.05}} ...
- Adding policy #9 = {'archtype': <class 'Policies.Aggr.Aggr'>, 'params': {'update_all_children': True, 'decreaseRate': 'auto', 'learningRate': 0.01, 'update_like_exp4': True, 'children': [{'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 4}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 3}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 2}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.25}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.05}}], 'unbiased': True}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][8]' = {'archtype': <class 'Policies.Aggr.Aggr'>, 'params': {'update_all_children': True, 'decreaseRate': 'auto', 'learningRate': 0.01, 'update_like_exp4': True, 'children': [{'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 4}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 3}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 2}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.25}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.05}}], 'unbiased': True}} ...
  Creating this child player from a dictionnary 'children[0]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 4}} ...
  Creating this child player from a dictionnary 'children[1]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 3}} ...
  Creating this child player from a dictionnary 'children[2]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 2}} ...
  Creating this child player from a dictionnary 'children[3]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}} ...
  Creating this child player from a dictionnary 'children[4]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}} ...
  Creating this child player from a dictionnary 'children[5]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.25}} ...
  Creating this child player from a dictionnary 'children[6]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}} ...
  Creating this child player from a dictionnary 'children[7]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.05}} ...

===> Pre-computing the rewards ... Of shape (9, 10000) ...


- Evaluating policy #1/9: UCB(alpha: 4) ...

- Evaluating policy #2/9: UCB(alpha: 3) ...

- Evaluating policy #3/9: UCB(alpha: 2) ...

- Evaluating policy #4/9: UCB(alpha: 1) ...

- Evaluating policy #5/9: UCB(alpha: 0.5) ...

- Evaluating policy #6/9: UCB(alpha: 0.25) ...

- Evaluating policy #7/9: UCB(alpha: 0.1) ...

- Evaluating policy #8/9: UCB(alpha: 0.05) ...

- Evaluating policy #9/9: Aggr(nb: 8, dRate: auto) ...
Giving the final ranks ...

Final ranking for this environment #0 :
- Policy 'UCB(alpha: 1)'	was ranked	1 / 9 for this simulation (last regret = 354.97).
- Policy 'UCB(alpha: 0.5)'	was ranked	2 / 9 for this simulation (last regret = 375.72).
- Policy 'UCB(alpha: 2)'	was ranked	3 / 9 for this simulation (last regret = 394.17).
- Policy 'UCB(alpha: 3)'	was ranked	4 / 9 for this simulation (last regret = 416.07).
- Policy 'UCB(alpha: 4)'	was ranked	5 / 9 for this simulation (last regret = 490.62).
- Policy 'Aggr(nb: 8, dRate: auto)'	was ranked	6 / 9 for this simulation (last regret = 534.52).
- Policy 'UCB(alpha: 0.25)'	was ranked	7 / 9 for this simulation (last regret = 668.77).
- Policy 'UCB(alpha: 0.05)'	was ranked	8 / 9 for this simulation (last regret = 874.12).
- Policy 'UCB(alpha: 0.1)'	was ranked	9 / 9 for this simulation (last regret = 1081.87).
plots/T10000_N20__9_algos is already a directory here...
 - Plotting the cumulative rewards, and saving the plot to plots/T10000_N20__9_algos/main____env1-1_2800267205962837980.png ...
Saving to plots/T10000_N20__9_algos/main____env1-1_2800267205962837980.png ...
 - Plotting the mean rewards, and saving the plot to plots/T10000_N20__9_algos/main_MeanRewards____env1-1_2800267205962837980.png ...
Saving to plots/T10000_N20__9_algos/main_MeanRewards____env1-1_2800267205962837980.png ...
