 - Setting dpi of all figures to 110 ...
 - Setting 'figsize' of all figures to (19.8, 10.8) ...
Info: numba.jit seems to be available.
Info: numba.jit seems to be available.
Loaded experiments configuration from 'configuration.py' :
configuration['policies'] = [{'params': {'update_all_children': False, 'learningRate': 0.01, 'children': [{'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>}, {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCB.klUCB'>}, {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>}, {'params': {'horizon': 5000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>}, {'params': {'horizon': 5000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>}, {'params': {}, 'archtype': <class 'Policies.BayesUCB.BayesUCB'>}], 'unbiased': False, 'decreaseRate': 'auto', 'update_like_exp4': True}, 'archtype': <class 'Policies.Aggr.Aggr'>}, {'params': {'update_all_children': False, 'learningRate': 0.01, 'children': [{'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>}, {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCB.klUCB'>}, {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>}, {'params': {'horizon': 5000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>}, {'params': {'horizon': 5000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>}, {'params': {}, 'archtype': <class 'Policies.BayesUCB.BayesUCB'>}], 'unbiased': False, 'decreaseRate': 'auto', 'update_like_exp4': False}, 'archtype': <class 'Policies.Aggr.Aggr'>}, {'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>}, {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCB.klUCB'>}, {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>}, {'params': {'horizon': 5000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>}, {'params': {'horizon': 5000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>}, {'params': {}, 'archtype': <class 'Policies.BayesUCB.BayesUCB'>}]
plots/ is already a directory here...
Number of policies in this comparaison: 11
Time horizon: 5000
Number of repetitions: 4
Sampling rate DELTA_T_SAVE: 1
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
 - with 'arms' = [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)]
 - with 'nbArms' = 9
 - with 'maxArm' = 0.9
 - with 'minArm' = 0.1

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 ... 
 - a Optimal Arm Identification factor H_OI(mu) = 60.00% ...
Number of environments to try: 1

Evaluating environment: <MAB{'arms': [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)], 'minArm': 0.10000000000000001, 'maxArm': 0.90000000000000002, 'nbArms': 9}>
- Adding policy #1 = {'params': {'update_all_children': False, 'learningRate': 0.01, 'children': [{'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>}, {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCB.klUCB'>}, {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>}, {'params': {'horizon': 5000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>}, {'params': {'horizon': 5000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>}, {'params': {}, 'archtype': <class 'Policies.BayesUCB.BayesUCB'>}], 'unbiased': False, 'decreaseRate': 'auto', 'update_like_exp4': True}, 'archtype': <class 'Policies.Aggr.Aggr'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][0]' = {'params': {'update_all_children': False, 'learningRate': 0.01, 'children': [{'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>}, {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCB.klUCB'>}, {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>}, {'params': {'horizon': 5000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>}, {'params': {'horizon': 5000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>}, {'params': {}, 'archtype': <class 'Policies.BayesUCB.BayesUCB'>}], 'unbiased': False, 'decreaseRate': 'auto', 'update_like_exp4': True}, 'archtype': <class 'Policies.Aggr.Aggr'>} ...
  Creating this child player from a dictionnary 'children[0]' = {'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this child player from a dictionnary 'children[1]' = {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this child player from a dictionnary 'children[2]' = {'params': {'alpha': 0.1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this child player from a dictionnary 'children[3]' = {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>} ...
  Creating this child player from a dictionnary 'children[4]' = {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCB.klUCB'>} ...
  Creating this child player from a dictionnary 'children[5]' = {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>} ...
  Creating this child player from a dictionnary 'children[6]' = {'params': {'horizon': 5000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>} ...
  Creating this child player from a dictionnary 'children[7]' = {'params': {'horizon': 5000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>} ...
  Creating this child player from a dictionnary 'children[8]' = {'params': {}, 'archtype': <class 'Policies.BayesUCB.BayesUCB'>} ...
- Adding policy #2 = {'params': {'update_all_children': False, 'learningRate': 0.01, 'children': [{'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>}, {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCB.klUCB'>}, {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>}, {'params': {'horizon': 5000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>}, {'params': {'horizon': 5000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>}, {'params': {}, 'archtype': <class 'Policies.BayesUCB.BayesUCB'>}], 'unbiased': False, 'decreaseRate': 'auto', 'update_like_exp4': False}, 'archtype': <class 'Policies.Aggr.Aggr'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][1]' = {'params': {'update_all_children': False, 'learningRate': 0.01, 'children': [{'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>}, {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCB.klUCB'>}, {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>}, {'params': {'horizon': 5000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>}, {'params': {'horizon': 5000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>}, {'params': {}, 'archtype': <class 'Policies.BayesUCB.BayesUCB'>}], 'unbiased': False, 'decreaseRate': 'auto', 'update_like_exp4': False}, 'archtype': <class 'Policies.Aggr.Aggr'>} ...
  Creating this child player from a dictionnary 'children[0]' = {'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this child player from a dictionnary 'children[1]' = {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this child player from a dictionnary 'children[2]' = {'params': {'alpha': 0.1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this child player from a dictionnary 'children[3]' = {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>} ...
  Creating this child player from a dictionnary 'children[4]' = {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCB.klUCB'>} ...
  Creating this child player from a dictionnary 'children[5]' = {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>} ...
  Creating this child player from a dictionnary 'children[6]' = {'params': {'horizon': 5000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>} ...
  Creating this child player from a dictionnary 'children[7]' = {'params': {'horizon': 5000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>} ...
  Creating this child player from a dictionnary 'children[8]' = {'params': {}, 'archtype': <class 'Policies.BayesUCB.BayesUCB'>} ...
- Adding policy #3 = {'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][2]' = {'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
- Adding policy #4 = {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][3]' = {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
- Adding policy #5 = {'params': {'alpha': 0.1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][4]' = {'params': {'alpha': 0.1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
- Adding policy #6 = {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][5]' = {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>} ...
- Adding policy #7 = {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCB.klUCB'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][6]' = {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCB.klUCB'>} ...
- Adding policy #8 = {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][7]' = {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>} ...
- Adding policy #9 = {'params': {'horizon': 5000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][8]' = {'params': {'horizon': 5000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>} ...
- Adding policy #10 = {'params': {'horizon': 5000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][9]' = {'params': {'horizon': 5000, 'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>} ...
- Adding policy #11 = {'params': {}, 'archtype': <class 'Policies.BayesUCB.BayesUCB'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][10]' = {'params': {}, 'archtype': <class 'Policies.BayesUCB.BayesUCB'>} ...

- Evaluating policy #1/11: Aggr($N=9$, Exp4) ...

- Evaluating policy #2/11: Aggr($N=9$) ...

- Evaluating policy #3/11: UCB($\alpha=1$) ...

Estimated order by the policy UCB($\alpha=1$) after 5000 steps: [0 2 3 1 5 4 7 6 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 80.25% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.65% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.95% (relative success)...
  ==> Gestalt     distance from optimal ordering: 66.67% (relative success)...
  ==> Mean distance from optimal ordering: 86.63% (relative success)...

- Evaluating policy #4/11: UCB($\alpha=0.5$) ...

Estimated order by the policy UCB($\alpha=0.5$) after 5000 steps: [0 1 2 5 4 3 6 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 90.12% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.82% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.98% (relative success)...
  ==> Gestalt     distance from optimal ordering: 77.78% (relative success)...
  ==> Mean distance from optimal ordering: 91.93% (relative success)...

- Evaluating policy #5/11: UCB($\alpha=0.1$) ...

Estimated order by the policy UCB($\alpha=0.1$) after 5000 steps: [0 2 3 1 5 6 4 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 80.25% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.65% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.91% (relative success)...
  ==> Gestalt     distance from optimal ordering: 77.78% (relative success)...
  ==> Mean distance from optimal ordering: 89.39% (relative success)...

- Evaluating policy #6/11: Thompson ...

Estimated order by the policy Thompson after 5000 steps: [0 4 5 3 2 6 1 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 65.43% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 90.47% (relative success)...
  ==> Spearman    distance from optimal ordering: 91.24% (relative success)...
  ==> Gestalt     distance from optimal ordering: 66.67% (relative success)...
  ==> Mean distance from optimal ordering: 78.45% (relative success)...

- Evaluating policy #7/11: KL-UCB(Bern) ...

Estimated order by the policy KL-UCB(Bern) after 5000 steps: [0 4 1 2 3 7 5 6 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 75.31% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.33% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.63% (relative success)...
  ==> Gestalt     distance from optimal ordering: 77.78% (relative success)...
  ==> Mean distance from optimal ordering: 88.01% (relative success)...

- Evaluating policy #8/11: KL-UCB+(Bern) ...

Estimated order by the policy KL-UCB+(Bern) after 5000 steps: [0 1 2 5 4 7 3 6 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 80.25% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.33% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.63% (relative success)...
  ==> Gestalt     distance from optimal ordering: 66.67% (relative success)...
  ==> Mean distance from optimal ordering: 86.47% (relative success)...

- Evaluating policy #9/11: KL-UCB-H+(Bern) ...

Estimated order by the policy KL-UCB-H+(Bern) after 5000 steps: [0 3 4 6 7 1 2 5 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 50.62% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 90.47% (relative success)...
  ==> Spearman    distance from optimal ordering: 81.25% (relative success)...
  ==> Gestalt     distance from optimal ordering: 66.67% (relative success)...
  ==> Mean distance from optimal ordering: 72.25% (relative success)...

- Evaluating policy #10/11: KL-UCB++(Bern) ...

Estimated order by the policy KL-UCB++(Bern) after 5000 steps: [0 2 3 4 1 5 7 6 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 80.25% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.65% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.84% (relative success)...
  ==> Gestalt     distance from optimal ordering: 77.78% (relative success)...
  ==> Mean distance from optimal ordering: 89.38% (relative success)...

- Evaluating policy #11/11: BayesUCB ...

Estimated order by the policy BayesUCB after 5000 steps: [2 0 1 3 7 5 6 4 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 75.31% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 97.82% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.04% (relative success)...
  ==> Gestalt     distance from optimal ordering: 66.67% (relative success)...
  ==> Mean distance from optimal ordering: 84.71% (relative success)...
Giving the final ranks ...

Final ranking for this environment #0 :
- Policy 'UCB($\alpha=0.1$)'	was ranked	1 / 11 for this simulation (last regret = 12.4).
- Policy 'Aggr($N=9$)'	was ranked	2 / 11 for this simulation (last regret = 29.9).
- Policy 'KL-UCB++(Bern)'	was ranked	3 / 11 for this simulation (last regret = 33.15).
- Policy 'KL-UCB-H+(Bern)'	was ranked	4 / 11 for this simulation (last regret = 36.15).
- Policy 'KL-UCB+(Bern)'	was ranked	5 / 11 for this simulation (last regret = 38.4).
- Policy 'Thompson'	was ranked	6 / 11 for this simulation (last regret = 41.65).
- Policy 'BayesUCB'	was ranked	7 / 11 for this simulation (last regret = 42.4).
- Policy 'UCB($\alpha=0.5$)'	was ranked	8 / 11 for this simulation (last regret = 45.15).
- Policy 'Aggr($N=9$, Exp4)'	was ranked	9 / 11 for this simulation (last regret = 46.9).
- Policy 'KL-UCB(Bern)'	was ranked	10 / 11 for this simulation (last regret = 62.4).
- Policy 'UCB($\alpha=1$)'	was ranked	11 / 11 for this simulation (last regret = 67.65).


==> To see the figures, do :
eog plots/T5000_N4__11_algos/main*2853686895346639001.png
Done for simulations main.py ...
