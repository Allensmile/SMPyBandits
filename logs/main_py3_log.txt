 - Setting dpi of all figures to 110 ...
 - Setting 'figsize' of all figures to (19.8, 10.8) ...
Info: Using the regular tqdm() decorator ...
Info: numba.jit seems to be available.
Info: numba.jit seems to be available.
Loaded experiments configuration from 'configuration.py' :
configuration['policies'] = [{'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}}, {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {'klucb': <built-in function klucbBern>}}, {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {'klucb': <built-in function klucbBern>}}, {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}}]
plots/ is already a directory here...
Number of policies in this comparison: 5
Time horizon: 10000
Number of repetitions: 50
Sampling rate for saving, delta_t_save: 1
Sampling rate for plotting, delta_t_plot: 1
Number of jobs for parallelization: 4
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': [0.001, 0.001, 0.005, 0.005, 0.01, 0.01, 0.02, 0.02, 0.02, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.3]} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [0.001, 0.001, 0.005, 0.005, 0.01, 0.01, 0.02, 0.02, 0.02, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.3]
 - with 'arms' = [B(0.001), B(0.001), B(0.005), B(0.005), B(0.01), B(0.01), B(0.02), B(0.02), B(0.02), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.3)]
 - with 'means' = [ 0.001  0.001  0.005  0.005  0.01   0.01   0.02   0.02   0.02   0.05   0.05
  0.05   0.05   0.05   0.05   0.3  ]
 - with 'nbArms' = 16
 - with 'maxArm' = 0.3
 - with 'minArm' = 0.001

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 15.9 ... 
 - a Optimal Arm Identification factor H_OI(mu) = 68.08% ...
Number of environments to try: 1

Evaluating environment: MAB(nbArms: 16, arms: [B(0.001), B(0.001), B(0.005), B(0.005), B(0.01), B(0.01), B(0.02), B(0.02), B(0.02), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.3)], minArm: 0.001, maxArm: 0.3)
- Adding policy #1 = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][0]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}} ...
- Adding policy #2 = {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][1]' = {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}} ...
- Adding policy #3 = {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {'klucb': <built-in function klucbBern>}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][2]' = {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {'klucb': <built-in function klucbBern>}} ...
- Adding policy #4 = {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {'klucb': <built-in function klucbBern>}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][3]' = {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {'klucb': <built-in function klucbBern>}} ...
- Adding policy #5 = {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][4]' = {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}} ...

- Evaluating policy #1/5: UCB($\alpha=0.5$) ...

Estimated order by the policy UCB($\alpha=0.5$) after 10000 steps: [ 0  1  2  3  5  6  7  8 10 11 14  9 13  4 12 15] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 79.69% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.99% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.99% (relative success)...
  ==> Gestalt     distance from optimal ordering: 75.00% (relative success)...
  ==> Mean distance from optimal ordering: 88.67% (relative success)...

- Evaluating policy #2/5: Thompson ...

Estimated order by the policy Thompson after 10000 steps: [ 7  5  0 14  4  1  2 13 11  8  3 12 10  9  6 15] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 50.00% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 79.26% (relative success)...
  ==> Spearman    distance from optimal ordering: 88.41% (relative success)...
  ==> Gestalt     distance from optimal ordering: 31.25% (relative success)...
  ==> Mean distance from optimal ordering: 62.23% (relative success)...

- Evaluating policy #3/5: KL-UCB(Bern) ...

Estimated order by the policy KL-UCB(Bern) after 10000 steps: [ 3 12 11  0  1  2  4  5  6  7  8  9 10 13 14 15] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 64.06% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.88% (relative success)...
  ==> Spearman    distance from optimal ordering: 98.77% (relative success)...
  ==> Gestalt     distance from optimal ordering: 81.25% (relative success)...
  ==> Mean distance from optimal ordering: 85.99% (relative success)...

- Evaluating policy #4/5: KL-UCB+(Bern) ...

Estimated order by the policy KL-UCB+(Bern) after 10000 steps: [10 14  0  1  2  3  4  5  6  8 12  7 11 13  9 15] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 60.94% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.48% (relative success)...
  ==> Spearman    distance from optimal ordering: 94.83% (relative success)...
  ==> Gestalt     distance from optimal ordering: 68.75% (relative success)...
  ==> Mean distance from optimal ordering: 81.00% (relative success)...

- Evaluating policy #5/5: BayesUCB ...

Estimated order by the policy BayesUCB after 10000 steps: [ 0  1  3  4  7 14  2  5  8  6 12 13  9 10 11 15] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 71.88% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.96% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.95% (relative success)...
  ==> Gestalt     distance from optimal ordering: 62.50% (relative success)...
  ==> Mean distance from optimal ordering: 83.57% (relative success)...
Giving the final ranks ...

Final ranking for this environment #0 :
- Policy 'KL-UCB+(Bern)'	was ranked	1 / 5 for this simulation (last regret = 98.94).
- Policy 'Thompson'	was ranked	2 / 5 for this simulation (last regret = 104.94).
- Policy 'UCB($\alpha=0.5$)'	was ranked	3 / 5 for this simulation (last regret = 112.22).
- Policy 'BayesUCB'	was ranked	4 / 5 for this simulation (last regret = 119.26).
- Policy 'KL-UCB(Bern)'	was ranked	5 / 5 for this simulation (last regret = 127.92).
 - Plotting the cumulative rewards, and saving the plot to plots/T10000_N50__5_algos/main____env1-1_7743582136072486614 ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 15.9 for 1-player problem... 
 - a Optimal Arm Identification factor H_OI(mu) = 68.08% ...
Saving figure with format png, to file 'plots/T10000_N50__5_algos/main____env1-1_7743582136072486614.png'...
       Saved! 'plots/T10000_N50__5_algos/main____env1-1_7743582136072486614.png' created of size '220448b', at 'Wed Mar 29 16:45:32 2017' ...
Saving figure with format pdf, to file 'plots/T10000_N50__5_algos/main____env1-1_7743582136072486614.pdf'...
       Saved! 'plots/T10000_N50__5_algos/main____env1-1_7743582136072486614.pdf' created of size '258794b', at 'Wed Mar 29 16:45:32 2017' ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 15.9 for 1-player problem... 
 - a Optimal Arm Identification factor H_OI(mu) = 68.08% ...
Saving figure with format png, to file 'plots/T10000_N50__5_algos/main_semilogx____env1-1_7743582136072486614.png'...
       Saved! 'plots/T10000_N50__5_algos/main_semilogx____env1-1_7743582136072486614.png' created of size '211403b', at 'Wed Mar 29 16:45:33 2017' ...
Saving figure with format pdf, to file 'plots/T10000_N50__5_algos/main_semilogx____env1-1_7743582136072486614.pdf'...
       Saved! 'plots/T10000_N50__5_algos/main_semilogx____env1-1_7743582136072486614.pdf' created of size '241401b', at 'Wed Mar 29 16:45:33 2017' ...
 - Plotting the mean rewards, and saving the plot to plots/T10000_N50__5_algos/main_MeanRewards____env1-1_7743582136072486614 ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 15.9 for 1-player problem... 
 - a Optimal Arm Identification factor H_OI(mu) = 68.08% ...
Saving figure with format png, to file 'plots/T10000_N50__5_algos/main_MeanRewards____env1-1_7743582136072486614.png'...
       Saved! 'plots/T10000_N50__5_algos/main_MeanRewards____env1-1_7743582136072486614.png' created of size '158500b', at 'Wed Mar 29 16:45:34 2017' ...
Saving figure with format pdf, to file 'plots/T10000_N50__5_algos/main_MeanRewards____env1-1_7743582136072486614.pdf'...
       Saved! 'plots/T10000_N50__5_algos/main_MeanRewards____env1-1_7743582136072486614.pdf' created of size '117701b', at 'Wed Mar 29 16:45:34 2017' ...
 - Plotting the results, and saving the plot to plots/T10000_N50__5_algos/main_BestArmPulls____env1-1_7743582136072486614 ...
Saving figure with format png, to file 'plots/T10000_N50__5_algos/main_BestArmPulls____env1-1_7743582136072486614.png'...
       Saved! 'plots/T10000_N50__5_algos/main_BestArmPulls____env1-1_7743582136072486614.png' created of size '154312b', at 'Wed Mar 29 16:45:35 2017' ...
Saving figure with format pdf, to file 'plots/T10000_N50__5_algos/main_BestArmPulls____env1-1_7743582136072486614.pdf'...
       Saved! 'plots/T10000_N50__5_algos/main_BestArmPulls____env1-1_7743582136072486614.pdf' created of size '46803b', at 'Wed Mar 29 16:45:35 2017' ...


==> To see the figures, do :
eog plots/T10000_N50__5_algos/main*7743582136072486614.png
Done for simulations main.py ...
