Loaded experiments configuration from 'configuration.py' :
configuration['policies'] = [{'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 4}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 3}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 2}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}}, {'archtype': <class 'Policies.Aggr.Aggr'>, 'params': {'learningRate': 0.01, 'children': [{'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 4}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 3}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 2}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}}], 'unbiased': True, 'update_all_children': False, 'decreaseRate': 'auto'}}]
plots/ is already a directory here...
Number of policies in this comparaison: 7
Time horizon: 10000
Number of repetitions: 20
Sampling rate DELTA_T_SAVE: 1
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'params': [0.005, 0.01, 0.015, 0.02, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.78, 0.8, 0.82, 0.83, 0.84, 0.85], 'arm_type': <class 'Arms.Bernoulli.Bernoulli'>} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [0.005, 0.01, 0.015, 0.02, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.78, 0.8, 0.82, 0.83, 0.84, 0.85]
 - with 'arms' = [B(0.005), B(0.01), B(0.015), B(0.02), B(0.3), B(0.35), B(0.4), B(0.45), B(0.5), B(0.55), B(0.6), B(0.78), B(0.8), B(0.82), B(0.83), B(0.84), B(0.85)]
 - with 'nbArms' = 17
 - with 'maxArm' = 0.85
Number of environments to try: 1

Evaluating environment: <MAB{'maxArm': 0.84999999999999998, 'arms': [B(0.005), B(0.01), B(0.015), B(0.02), B(0.3), B(0.35), B(0.4), B(0.45), B(0.5), B(0.55), B(0.6), B(0.78), B(0.8), B(0.82), B(0.83), B(0.84), B(0.85)], 'nbArms': 17}>
- Adding policy #1 = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 4}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][0]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 4}} ...
- Adding policy #2 = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 3}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][1]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 3}} ...
- Adding policy #3 = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 2}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][2]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 2}} ...
- Adding policy #4 = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][3]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}} ...
- Adding policy #5 = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][4]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}} ...
- Adding policy #6 = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][5]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}} ...
- Adding policy #7 = {'archtype': <class 'Policies.Aggr.Aggr'>, 'params': {'learningRate': 0.01, 'children': [{'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 4}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 3}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 2}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}}], 'unbiased': True, 'update_all_children': False, 'decreaseRate': 'auto'}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][6]' = {'archtype': <class 'Policies.Aggr.Aggr'>, 'params': {'learningRate': 0.01, 'children': [{'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 4}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 3}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 2}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}}], 'unbiased': True, 'update_all_children': False, 'decreaseRate': 'auto'}} ...
  Creating this child player from a dictionnary 'children[0]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 4}} ...
  Creating this child player from a dictionnary 'children[1]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 3}} ...
  Creating this child player from a dictionnary 'children[2]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 2}} ...
  Creating this child player from a dictionnary 'children[3]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}} ...
  Creating this child player from a dictionnary 'children[4]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}} ...
  Creating this child player from a dictionnary 'children[5]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}} ...

===> Pre-computing the rewards ... Of shape (17, 10000) ...


- Evaluating policy #1/7: UCB(alpha: 4) ...

- Evaluating policy #2/7: UCB(alpha: 3) ...

- Evaluating policy #3/7: UCB(alpha: 2) ...

- Evaluating policy #4/7: UCB(alpha: 1) ...

- Evaluating policy #5/7: UCB(alpha: 0.5) ...

- Evaluating policy #6/7: UCB(alpha: 0.1) ...

- Evaluating policy #7/7: Aggr(nb: 6, dRate: auto) ...
Giving the final ranks ...

Final ranking for this environment #0 :
- Policy 'UCB(alpha: 0.1)'	was ranked	1 / 7 for this simulation (last regret = 98).
- Policy 'UCB(alpha: 0.5)'	was ranked	2 / 7 for this simulation (last regret = 165.4).
- Policy 'UCB(alpha: 1)'	was ranked	3 / 7 for this simulation (last regret = 246.1).
- Policy 'Aggr(nb: 6, dRate: auto)'	was ranked	4 / 7 for this simulation (last regret = 263.4).
- Policy 'UCB(alpha: 2)'	was ranked	5 / 7 for this simulation (last regret = 345.4).
- Policy 'UCB(alpha: 3)'	was ranked	6 / 7 for this simulation (last regret = 437.4).
- Policy 'UCB(alpha: 4)'	was ranked	7 / 7 for this simulation (last regret = 492.85).
plots/T10000_N20__7_algos is already a directory here...
 - Plotting the cumulative rewards, and saving the plot to plots/T10000_N20__7_algos/main____env1-1_8856039343400657407.png ...
Saving to plots/T10000_N20__7_algos/main____env1-1_8856039343400657407.png ...
 - Plotting the mean rewards, and saving the plot to plots/T10000_N20__7_algos/main_MeanRewards____env1-1_8856039343400657407.png ...
Saving to plots/T10000_N20__7_algos/main_MeanRewards____env1-1_8856039343400657407.png ...
