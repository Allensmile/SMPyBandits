Loaded experiments configuration from 'configuration.py' :
configuration['policies'] = [{'params': {'unbiased': True, 'update_like_exp4': True, 'children': [{'params': {'alpha': 4}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 3}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 2}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.25}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.05}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}], 'update_all_children': False, 'decreaseRate': 'auto', 'learningRate': 0.01}, 'archtype': <class 'Policies.Aggr.Aggr'>}, {'params': {'alpha': 4}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 3}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 2}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.25}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.05}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}]
plots/ is already a directory here...
Number of policies in this comparaison: 9
Time horizon: 500
Number of repetitions: 50
Sampling rate DELTA_T_SAVE: 1
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': [0.01, 0.02, 0.3, 0.4, 0.5, 0.6, 0.78, 0.8, 0.82]} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [0.01, 0.02, 0.3, 0.4, 0.5, 0.6, 0.78, 0.8, 0.82]
 - with 'arms' = [B(0.01), B(0.02), B(0.3), B(0.4), B(0.5), B(0.6), B(0.78), B(0.8), B(0.82)]
 - with 'nbArms' = 9
 - with 'maxArm' = 0.82
Number of environments to try: 1

Evaluating environment: <MAB{'arms': [B(0.01), B(0.02), B(0.3), B(0.4), B(0.5), B(0.6), B(0.78), B(0.8), B(0.82)], 'nbArms': 9, 'maxArm': 0.81999999999999995}>
- Adding policy #1 = {'params': {'unbiased': True, 'update_like_exp4': True, 'children': [{'params': {'alpha': 4}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 3}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 2}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.25}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.05}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}], 'update_all_children': False, 'decreaseRate': 'auto', 'learningRate': 0.01}, 'archtype': <class 'Policies.Aggr.Aggr'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][0]' = {'params': {'unbiased': True, 'update_like_exp4': True, 'children': [{'params': {'alpha': 4}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 3}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 2}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.25}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.05}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}], 'update_all_children': False, 'decreaseRate': 'auto', 'learningRate': 0.01}, 'archtype': <class 'Policies.Aggr.Aggr'>} ...
  Creating this child player from a dictionnary 'children[0]' = {'params': {'alpha': 4}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this child player from a dictionnary 'children[1]' = {'params': {'alpha': 3}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this child player from a dictionnary 'children[2]' = {'params': {'alpha': 2}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this child player from a dictionnary 'children[3]' = {'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this child player from a dictionnary 'children[4]' = {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this child player from a dictionnary 'children[5]' = {'params': {'alpha': 0.25}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this child player from a dictionnary 'children[6]' = {'params': {'alpha': 0.1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this child player from a dictionnary 'children[7]' = {'params': {'alpha': 0.05}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
- Adding policy #2 = {'params': {'alpha': 4}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][1]' = {'params': {'alpha': 4}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
- Adding policy #3 = {'params': {'alpha': 3}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][2]' = {'params': {'alpha': 3}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
- Adding policy #4 = {'params': {'alpha': 2}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][3]' = {'params': {'alpha': 2}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
- Adding policy #5 = {'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][4]' = {'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
- Adding policy #6 = {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][5]' = {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
- Adding policy #7 = {'params': {'alpha': 0.25}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][6]' = {'params': {'alpha': 0.25}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
- Adding policy #8 = {'params': {'alpha': 0.1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][7]' = {'params': {'alpha': 0.1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
- Adding policy #9 = {'params': {'alpha': 0.05}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][8]' = {'params': {'alpha': 0.05}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...

===> Pre-computing the rewards ... Of shape (9, 500) ...
    In order for all simulated algorithms to face the same random rewards (robust comparaison of A1,..,An vs Aggr(A1,..,An)) ...


- Evaluating policy #1/9: Aggr($N=8$) ...

- Evaluating policy #2/9: UCB($\alpha: 4$) ...

- Evaluating policy #3/9: UCB($\alpha: 3$) ...

- Evaluating policy #4/9: UCB($\alpha: 2$) ...

- Evaluating policy #5/9: UCB($\alpha: 1$) ...

- Evaluating policy #6/9: UCB($\alpha: 0.5$) ...

- Evaluating policy #7/9: UCB($\alpha: 0.25$) ...

- Evaluating policy #8/9: UCB($\alpha: 0.1$) ...

- Evaluating policy #9/9: UCB($\alpha: 0.05$) ...
Giving the final ranks ...

Final ranking for this environment #0 :
- Policy 'UCB($\alpha: 0.25$)'	was ranked	1 / 9 for this simulation (last regret = 14.8).
- Policy 'UCB($\alpha: 0.1$)'	was ranked	2 / 9 for this simulation (last regret = 16.6).
- Policy 'UCB($\alpha: 0.05$)'	was ranked	3 / 9 for this simulation (last regret = 17.06).
- Policy 'UCB($\alpha: 0.5$)'	was ranked	4 / 9 for this simulation (last regret = 24.18).
- Policy 'UCB($\alpha: 1$)'	was ranked	5 / 9 for this simulation (last regret = 34.16).
- Policy 'UCB($\alpha: 2$)'	was ranked	6 / 9 for this simulation (last regret = 46.64).
- Policy 'Aggr($N=8$)'	was ranked	7 / 9 for this simulation (last regret = 53.24).
- Policy 'UCB($\alpha: 3$)'	was ranked	8 / 9 for this simulation (last regret = 55.66).
- Policy 'UCB($\alpha: 4$)'	was ranked	9 / 9 for this simulation (last regret = 62.76).
plots/T500_N50__9_algos is already a directory here...
 - Plotting the cumulative rewards, and saving the plot to plots/T500_N50__9_algos/main____env1-1_5995690186532957314.png ...
Saving to plots/T500_N50__9_algos/main____env1-1_5995690186532957314.png ...
 - Plotting the mean rewards, and saving the plot to plots/T500_N50__9_algos/main_MeanRewards____env1-1_5995690186532957314.png ...
Saving to plots/T500_N50__9_algos/main_MeanRewards____env1-1_5995690186532957314.png ...
 - Plotting the mean rewards, and saving the plot to plots/T500_N50__9_algos/main_Normalized_MeanRewards____env1-1_5995690186532957314.png ...
Saving to plots/T500_N50__9_algos/main_Normalized_MeanRewards____env1-1_5995690186532957314.png ...
 - Plotting the results, and saving the plot to plots/T500_N50__9_algos/main_BestArmPulls_Normalized_MeanRewards____env1-1_5995690186532957314.png ...
Saving to plots/T500_N50__9_algos/main_BestArmPulls_Normalized_MeanRewards____env1-1_5995690186532957314.png ...
