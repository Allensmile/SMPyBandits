 - Setting dpi of all figures to 110 ...
 - Setting 'figsize' of all figures to (19.8, 10.8) ...
Info: Using the regular tqdm() decorator ...
Info: numba.jit seems to be available.
Info: numba.jit seems to be available.
Loaded experiments configuration from 'configuration.py' :
configuration['policies'] = [{'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>}, {'params': {}, 'archtype': <class 'Policies.BayesUCB.BayesUCB'>}]
====> TURNING DEBUG MODE ON <=====
plots/ is already a directory here...
Number of policies in this comparison: 3
Time horizon: 10000
Number of repetitions: 1000
Sampling rate for saving, delta_t_save: 1
Sampling rate for plotting, delta_t_plot: 1
Number of jobs for parallelization: 4
Creating a new MarkovianMAB problem ...
 - Using these transition matrices: [array([[ 0.7,  0.3],
       [ 0.5,  0.5]]), array([[ 0.2,  0.8],
       [ 0.6,  0.4]])]
 - Using these transition dictionaries: [{(0, 1): 0.3, (1, 0): 0.5, (0, 0): 0.7, (1, 1): 0.5}, {(0, 1): 0.8, (1, 0): 0.6, (0, 0): 0.2, (1, 1): 0.4}]
 - For these Markov chains: [Chain([((0, 1), 0.3), ((1, 0), 0.5), ((0, 0), 0.7), ((1, 1), 0.5)]), Chain([((0, 1), 0.8), ((1, 0), 0.6), ((0, 0), 0.2), ((1, 1), 0.4)])]
 - Rested: True
 - with 'nbArms' = 2
 - and states: [array([0, 1]), array([0, 1])]
 - and steady state distributions: [array([ 0.625,  0.375]), array([ 0.42857143,  0.57142857])]
 - so it gives arms of means: [ 0.375       0.57142857]
 - so arms asymptotically equivalent to: [B(0.375), B(0.571)]
 - represented as: Rested Markovian rewards, $[[[0.7, 0.3], [0.5, 0.5]] : B(0.375), [[0.2, 0.8], [0.6, 0.4]] : B(0.571)^*]$
 - with 'maxArm' = 0.571428571429
 - with 'minArm' = 0.375
DONE for creating this MarkovianMAB problem...
Number of environments to try: 1

Evaluating environment: MarkovianMAB(nbArms: 2, chains: [array([[ 0.7,  0.3],
       [ 0.5,  0.5]]), array([[ 0.2,  0.8],
       [ 0.6,  0.4]])], arms: [B(0.375), B(0.571)])
- Adding policy #1 = {'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][0]' = {'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
- Adding policy #2 = {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][1]' = {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>} ...
- Adding policy #3 = {'params': {}, 'archtype': <class 'Policies.BayesUCB.BayesUCB'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][2]' = {'params': {}, 'archtype': <class 'Policies.BayesUCB.BayesUCB'>} ...

- Evaluating policy #1/3: UCB($\alpha=1$) ...

Estimated order by the policy UCB($\alpha=1$) after 10000 steps: [0 1] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 100.00% (relative success)...
  ==> Kendell Tau distance from optimal ordering: nan% (relative success)...
  ==> Spearman    distance from optimal ordering: nan% (relative success)...
  ==> Gestalt     distance from optimal ordering: 100.00% (relative success)...
  ==> Mean distance from optimal ordering: nan% (relative success)...

- Evaluating policy #2/3: Thompson ...

Estimated order by the policy Thompson after 10000 steps: [0 1] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 100.00% (relative success)...
  ==> Kendell Tau distance from optimal ordering: nan% (relative success)...
  ==> Spearman    distance from optimal ordering: nan% (relative success)...
  ==> Gestalt     distance from optimal ordering: 100.00% (relative success)...
  ==> Mean distance from optimal ordering: nan% (relative success
- Evaluating policy #3/3: BayesUCB ...

Estimated order by the policy BayesUCB after 10000 steps: [1 0] ...
  ==> Optimal arm identification: 65.63% (relative success)...
  ==> Manhattan   distance from optimal ordering: 0.00% (relative success)...
  ==> Kendell Tau distance from optimal ordering: nan% (relative success)...
  ==> Spearman    distance from optimal ordering: nan% (relative success)...
  ==> Gestalt     distance from optimal ordering: 50.00% (relative success)...
  ==> Mean distance from optimal ordering: nan% (relative success)...
Giving the final ranks ...

Final ranking for this environment #0 :
- Policy 'Thompson'	was ranked	1 / 3 for this simulation (last regret = 12.6303).
- Policy 'BayesUCB'	was ranked	2 / 3 for this simulation (last regret = 19.4013).
- Policy 'UCB($\alpha=1$)'	was ranked	3 / 3 for this simulation (last regret = 27.6263).

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 2.52 for 1-player problem... 
 - a Optimal Arm Identification factor H_OI(mu) = 40.18% ...

This MAB
This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 2.52 for 1-player problem... 
 - a Optimal Arm Identification factor H_OI(mu) = 40.18% ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 2.52 for 1-player problem... 
 - a Optimal Arm Identification factor H_OI(mu) = 40.18% ...
Done for simulations main.py ...
