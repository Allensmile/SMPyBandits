Loaded experiments configuration from 'configuration.py' :
configuration['policies'] = [{'archtype': <class 'Policies.Softmax.SoftmaxDecreasing'>, 'params': {}}, {'archtype': <class 'Policies.UCBopt.UCBopt'>, 'params': {}}, {'archtype': <class 'Policies.MOSS.MOSS'>, 'params': {}}, {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}}, {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {}}, {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}}, {'archtype': <class 'Policies.Aggr.Aggr'>, 'params': {'decreaseRate': 'auto', 'children': [{'archtype': <class 'Policies.Softmax.SoftmaxDecreasing'>, 'params': {}}, {'archtype': <class 'Policies.UCBopt.UCBopt'>, 'params': {}}, {'archtype': <class 'Policies.MOSS.MOSS'>, 'params': {}}, {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}}, {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {}}, {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}}], 'update_all_children': False, 'learningRate': 0.01}}]
plots/ is already a directory here...
Number of policies in this comparaison: 7
Time horizon: 10000
Number of repetitions: 1
Sampling rate DELTA_T_SAVE: 50
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': [0.01, 0.02, 0.3, 0.4, 0.5, 0.6, 0.78, 0.8, 0.82]} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [0.01, 0.02, 0.3, 0.4, 0.5, 0.6, 0.78, 0.8, 0.82]
 - with 'arms' = [B(0.01), B(0.02), B(0.3), B(0.4), B(0.5), B(0.6), B(0.78), B(0.8), B(0.82)]
 - with 'nbArms' = 9
 - with 'maxArm' = 0.82
Number of environments to try: 1

Evaluating environment: <MAB{'nbArms': 9, 'arms': [B(0.01), B(0.02), B(0.3), B(0.4), B(0.5), B(0.6), B(0.78), B(0.8), B(0.82)], 'maxArm': 0.81999999999999995}>
- Adding policy #1 = {'archtype': <class 'Policies.Softmax.SoftmaxDecreasing'>, 'params': {}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][0]' = {'archtype': <class 'Policies.Softmax.SoftmaxDecreasing'>, 'params': {}} ...
- Adding policy #2 = {'archtype': <class 'Policies.UCBopt.UCBopt'>, 'params': {}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][1]' = {'archtype': <class 'Policies.UCBopt.UCBopt'>, 'params': {}} ...
- Adding policy #3 = {'archtype': <class 'Policies.MOSS.MOSS'>, 'params': {}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][2]' = {'archtype': <class 'Policies.MOSS.MOSS'>, 'params': {}} ...
- Adding policy #4 = {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][3]' = {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}} ...
- Adding policy #5 = {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][4]' = {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {}} ...
- Adding policy #6 = {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][5]' = {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}} ...
- Adding policy #7 = {'archtype': <class 'Policies.Aggr.Aggr'>, 'params': {'decreaseRate': 'auto', 'children': [{'archtype': <class 'Policies.Softmax.SoftmaxDecreasing'>, 'params': {}}, {'archtype': <class 'Policies.UCBopt.UCBopt'>, 'params': {}}, {'archtype': <class 'Policies.MOSS.MOSS'>, 'params': {}}, {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}}, {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {}}, {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}}], 'update_all_children': False, 'learningRate': 0.01}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][6]' = {'archtype': <class 'Policies.Aggr.Aggr'>, 'params': {'decreaseRate': 'auto', 'children': [{'archtype': <class 'Policies.Softmax.SoftmaxDecreasing'>, 'params': {}}, {'archtype': <class 'Policies.UCBopt.UCBopt'>, 'params': {}}, {'archtype': <class 'Policies.MOSS.MOSS'>, 'params': {}}, {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}}, {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {}}, {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}}], 'update_all_children': False, 'learningRate': 0.01}} ...
  Creating this child player from a dictionnary 'children[0]' = {'archtype': <class 'Policies.Softmax.SoftmaxDecreasing'>, 'params': {}} ...
  Creating this child player from a dictionnary 'children[1]' = {'archtype': <class 'Policies.UCBopt.UCBopt'>, 'params': {}} ...
  Creating this child player from a dictionnary 'children[2]' = {'archtype': <class 'Policies.MOSS.MOSS'>, 'params': {}} ...
  Creating this child player from a dictionnary 'children[3]' = {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}} ...
  Creating this child player from a dictionnary 'children[4]' = {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {}} ...
  Creating this child player from a dictionnary 'children[5]' = {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}} ...

- Evaluating policy #1/7: Softmax(decreasing) ...

- Evaluating policy #2/7: UCBopt ...

- Evaluating policy #3/7: MOSS ...

- Evaluating policy #4/7: Thompson ...

- Evaluating policy #5/7: klUCB ...

- Evaluating policy #6/7: BayesUCB ...

- Evaluating policy #7/7: Aggr(nb: 6, rate: 0.01, dRate: auto) ...
Giving the final ranks ...

Final ranking for this environment #0 :
- Policy 'BayesUCB'	was ranked	1 / 7 for this simulation (last regret = -1).
- Policy 'Aggr(nb: 6, rate: 0.01, dRate: auto)'	was ranked	2 / 7 for this simulation (last regret = -2.19824e-14).
- Policy 'Softmax(decreasing)'	was ranked	3 / 7 for this simulation (last regret = 1).
- Policy 'klUCB'	was ranked	4 / 7 for this simulation (last regret = 2).
- Policy 'UCBopt'	was ranked	5 / 7 for this simulation (last regret = 3).
- Policy 'MOSS'	was ranked	6 / 7 for this simulation (last regret = 4).
- Policy 'Thompson'	was ranked	7 / 7 for this simulation (last regret = 4).
