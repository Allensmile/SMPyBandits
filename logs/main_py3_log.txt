 - Setting dpi of all figures to 110 ...
 - Setting 'figsize' of all figures to (19.8, 10.8) ...
Info: Using the regular tqdm() decorator ...
Info: numba.jit seems to be available.
Info: numba.jit seems to be available.
Loaded experiments configuration from 'configuration.py' :
configuration['policies'] = [{'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}}, {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}}, {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {'klucb': <built-in function klucbBern>}}, {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {'klucb': <built-in function klucbBern>}}, {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}}]
plots/ is already a directory here...
Number of policies in this comparison: 7
Time horizon: 30000
Number of repetitions: 200
Sampling rate for saving, delta_t_save: 1
Sampling rate for plotting, delta_t_plot: 50
Number of jobs for parallelization: -1
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'arm_type': <class 'Arms.Bernoulli.Bernoulli'>, 'params': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
 - with 'arms' = [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)]
 - with 'nbArms' = 9
 - with 'maxArm' = 0.9
 - with 'minArm' = 0.1

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 ... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
Number of environments to try: 1

Evaluating environment: MAB(nbArms: 9, arms: [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)], minArm: 0.1, maxArm: 0.9)
- Adding policy #1 = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][0]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 1}} ...
- Adding policy #2 = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][1]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}} ...
- Adding policy #3 = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][2]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.1}} ...
- Adding policy #4 = {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][3]' = {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}} ...
- Adding policy #5 = {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {'klucb': <built-in function klucbBern>}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][4]' = {'archtype': <class 'Policies.klUCB.klUCB'>, 'params': {'klucb': <built-in function klucbBern>}} ...
- Adding policy #6 = {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {'klucb': <built-in function klucbBern>}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][5]' = {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {'klucb': <built-in function klucbBern>}} ...
- Adding policy #7 = {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][6]' = {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}} ...

- Evaluating policy #1/7: UCB($\alpha=1$) ...

Estimated order by the policy UCB($\alpha=1$) after 30000 steps: [0 1 2 4 5 6 3 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 85.19% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.82% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.91% (relative success)...
  ==> Gestalt     distance from optimal ordering: 88.89% (relative success)...
  ==> Mean distance from optimal ordering: 93.45% (relative success)...

- Evaluating policy #2/7: UCB($\alpha=0.5$) ...

Estimated order by the policy UCB($\alpha=0.5$) after 30000 steps: [0 1 2 3 4 5 7 6 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 95.06% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.96% (relative success)...
  ==> Spearman    distance from optimal ordering: 100.00% (relative success)...
  ==> Gestalt     distance from optimal ordering: 88.89% (relative success)...
  ==> Mean distance from optimal ordering: 95.98% (relative success)...

- Evaluating policy #3/7: UCB($\alpha=0.1$) ...

Estimated order by the policy UCB($\alpha=0.1$) after 30000 steps: [0 1 2 3 4 7 5 6 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 90.12% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.92% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.99% (relative success)...
  ==> Gestalt     distance from optimal ordering: 88.89% (relative success)...
  ==> Mean distance from optimal ordering: 94.73% (relative success)...

- Evaluating policy #4/7: Thompson ...

Estimated order by the policy Thompson after 30000 steps: [0 4 3 2 5 1 7 6 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 70.37% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 96.29% (relative success)...
  ==> Spearman    distance from optimal ordering: 98.01% (relative success)...
  ==> Gestalt     distance from optimal ordering: 55.56% (relative success)...
  ==> Mean distance from optimal ordering: 80.06% (relative success)...

- Evaluating policy #5/7: KL-UCB(Bern) ...

Estimated order by the policy KL-UCB(Bern) after 30000 steps: [1 2 0 4 3 7 6 5 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 75.31% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 98.77% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.75% (relative success)...
  ==> Gestalt     distance from optimal ordering: 55.56% (relative success)...
  ==> Mean distance from optimal ordering: 82.35% (relative success)...

- Evaluating policy #6/7: KL-UCB+(Bern) ...

Estimated order by the policy KL-UCB+(Bern) after 30000 steps: [2 3 0 1 4 5 6 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 80.25% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.65% (relative success)...
  ==> Spearman    distance from optimal ordering: 99.75% (relative success)...
  ==> Gestalt     distance from optimal ordering: 77.78% (relative success)...
  ==> Mean distance from optimal ordering: 89.36% (relative success)...

- Evaluating policy #7/7: BayesUCB ...

Estimated order by the policy BayesUCB after 30000 steps: [1 0 3 2 4 5 6 7 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 90.12% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 99.92% (relative success)...
  ==> Spearman    distance from optimal ordering: 100.00% (relative success)...
  ==> Gestalt     distance from optimal ordering: 77.78% (relative success)...
  ==> Mean distance from optimal ordering: 91.95% (relative success)...
plots/T30000_N200__7_algos is already a directory here...
Giving the final ranks ...

Final ranking for this environment #0 :
- Policy 'BayesUCB'	was ranked	1 / 7 for this simulation (last regret = 46.975).
- Policy 'Thompson'	was ranked	2 / 7 for this simulation (last regret = 47.305).
- Policy 'KL-UCB+(Bern)'	was ranked	3 / 7 for this simulation (last regret = 54.105).
- Policy 'UCB($\alpha=0.5$)'	was ranked	4 / 7 for this simulation (last regret = 64.1).
- Policy 'KL-UCB(Bern)'	was ranked	5 / 7 for this simulation (last regret = 71.69).
- Policy 'UCB($\alpha=1$)'	was ranked	6 / 7 for this simulation (last regret = 124.955).
- Policy 'UCB($\alpha=0.1$)'	was ranked	7 / 7 for this simulation (last regret = 457.575).
 - Plotting the cumulative rewards, and saving the plot to plots/T30000_N200__7_algos/main____env1-1_4451423060132266222 ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 for 1-player problem... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
Saving figure with format png, to file 'plots/T30000_N200__7_algos/main____env1-1_4451423060132266222.png'...
       Saved! 'plots/T30000_N200__7_algos/main____env1-1_4451423060132266222.png' created of size '187980b', at 'Wed Mar 22 09:36:43 2017' ...
Saving figure with format pdf, to file 'plots/T30000_N200__7_algos/main____env1-1_4451423060132266222.pdf'...
       Saved! 'plots/T30000_N200__7_algos/main____env1-1_4451423060132266222.pdf' created of size '71023b', at 'Wed Mar 22 09:36:43 2017' ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 for 1-player problem... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
Saving figure with format png, to file 'plots/T30000_N200__7_algos/main_semilogx____env1-1_4451423060132266222.png'...
       Saved! 'plots/T30000_N200__7_algos/main_semilogx____env1-1_4451423060132266222.png' created of size '169601b', at 'Wed Mar 22 09:36:44 2017' ...
Saving figure with format pdf, to file 'plots/T30000_N200__7_algos/main_semilogx____env1-1_4451423060132266222.pdf'...
       Saved! 'plots/T30000_N200__7_algos/main_semilogx____env1-1_4451423060132266222.pdf' created of size '69757b', at 'Wed Mar 22 09:36:44 2017' ...
 - Plotting the mean rewards, and saving the plot to plots/T30000_N200__7_algos/main_MeanRewards____env1-1_4451423060132266222 ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 for 1-player problem... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
Saving figure with format png, to file 'plots/T30000_N200__7_algos/main_MeanRewards____env1-1_4451423060132266222.png'...
       Saved! 'plots/T30000_N200__7_algos/main_MeanRewards____env1-1_4451423060132266222.png' created of size '135161b', at 'Wed Mar 22 09:36:45 2017' ...
Saving figure with format pdf, to file 'plots/T30000_N200__7_algos/main_MeanRewards____env1-1_4451423060132266222.pdf'...
       Saved! 'plots/T30000_N200__7_algos/main_MeanRewards____env1-1_4451423060132266222.pdf' created of size '46256b', at 'Wed Mar 22 09:36:45 2017' ...
 - Plotting the results, and saving the plot to plots/T30000_N200__7_algos/main_BestArmPulls____env1-1_4451423060132266222 ...
Saving figure with format png, to file 'plots/T30000_N200__7_algos/main_BestArmPulls____env1-1_4451423060132266222.png'...
       Saved! 'plots/T30000_N200__7_algos/main_BestArmPulls____env1-1_4451423060132266222.png' created of size '148785b', at 'Wed Mar 22 09:36:45 2017' ...
Saving figure with format pdf, to file 'plots/T30000_N200__7_algos/main_BestArmPulls____env1-1_4451423060132266222.pdf'...
       Saved! 'plots/T30000_N200__7_algos/main_BestArmPulls____env1-1_4451423060132266222.pdf' created of size '42127b', at 'Wed Mar 22 09:36:45 2017' ...


==> To see the figures, do :
eog plots/T30000_N200__7_algos/main*4451423060132266222.png
Done for simulations main.py ...
