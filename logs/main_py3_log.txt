 - Setting dpi of all figures to 110 ...
 - Setting 'figsize' of all figures to (19.8, 10.8) ...
Info: Using the regular tqdm() decorator ...
Info: numba.jit seems to be available.
Info: numba.jit seems to be available.
Loaded experiments configuration from 'configuration.py' :
configuration['policies'] = [{'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}}, {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}}]
====> TURNING DEBUG MODE ON <=====
plots/ is already a directory here...
Number of policies in this comparison: 16
Time horizon: 30000
Number of repetitions: 4
Sampling rate for saving, delta_t_save: 1
Sampling rate for plotting, delta_t_plot: 50
Number of jobs for parallelization: 1
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'params': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], 'arm_type': <class 'Arms.Bernoulli.Bernoulli'>} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
 - with 'arms' = [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)]
 - with 'means' = [ 0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9]
 - with 'nbArms' = 9
 - with 'maxArm' = 0.9
 - with 'minArm' = 0.1

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 ... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
 - with 'arms' represented as: $[B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)^*]$
Number of environments to try: 1

Evaluating environment: MAB(nbArms: 9, arms: [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)], minArm: 0.1, maxArm: 0.9)
- Adding policy #1 = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][0]' = {'archtype': <class 'Policies.UCBalpha.UCBalpha'>, 'params': {'alpha': 0.5}} ...
- Adding policy #2 = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][1]' = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
- Adding policy #3 = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][2]' = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
- Adding policy #4 = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][3]' = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
- Adding policy #5 = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][4]' = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
- Adding policy #6 = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][5]' = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
- Adding policy #7 = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][6]' = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
- Adding policy #8 = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][7]' = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
- Adding policy #9 = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][8]' = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
- Adding policy #10 = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][9]' = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
- Adding policy #11 = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][10]' = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
- Adding policy #12 = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][11]' = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
- Adding policy #13 = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][12]' = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
- Adding policy #14 = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][13]' = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
- Adding policy #15 = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][14]' = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
- Adding policy #16 = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][15]' = {'archtype': <class 'Policies.SlidingWindowsRestart.SlidingWindowsRestart.<locals>.SlidingWindowsRestart_Policy'>, 'params': {'alpha': 0.5}} ...

- Evaluating policy #1/16: UCB($\alpha=0.5$) ...

Estimated order by the policy UCB($\alpha=0.5$) after 30000 steps: [3 4 0 7 2 6 1 8 5] ...
  ==> Optimal arm identification: 66.67% (relative success)...
  ==> Manhattan   distance from optimal ordering: 40.74% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 59.58% (relative success)...
  ==> Spearman    distance from optimal ordering: 64.42% (relative success)...
  ==> Gestalt     distance from optimal ordering: 44.44% (relative success)...
  ==> Mean distance from optimal ordering: 52.29% (relative success)...

- Evaluating policy #2/16: SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=50$, $\varepsilon=0.0001$) ...

Estimated order by the policy SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=50$, $\varepsilon=0.0001$) after 30000 steps: [2 7 1 0 3 4 5 6 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 60.49% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 93.94% (relative success)...
  ==> Spearman    distance from optimal ordering: 87.50% (relative success)...
  ==> Gestalt     distance from optimal ordering: 66.67% (relative success)...
  ==> Mean distance from optimal ordering: 77.15% (relative success)...

- Evaluating policy #3/16: SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=50$, $\varepsilon=0.001$) ...

Estimated order by the policy SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=50$, $\varepsilon=0.001$) after 30000 steps: [7 0 4 5 6 2 3 8 1] ...
  ==> Optimal arm identification: 22.22% (relative success)...
  ==> Manhattan   distance from optimal ordering: 30.86% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 16.52% (relative success)...
  ==> Spearman    distance from optimal ordering: 16.88% (relative success)...
  ==> Gestalt     distance from optimal ordering: 55.56% (relative success)...
  ==> Mean distance from optimal ordering: 29.95% (relative success)...

- Evaluating policy #4/16: SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=50$, $\varepsilon=0.01$) ...

Estimated order by the policy SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=50$, $\varepsilon=0.01$) after 30000 steps: [3 5 6 7 8 4 0 1 2] ...
  ==> Optimal arm identification: 33.33% (relative success)...
  ==> Manhattan   distance from optimal ordering: 6.17% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 59.58% (relative success)...
  ==> Spearman    distance from optimal ordering: 84.56% (relative success)...
  ==> Gestalt     distance from optimal ordering: 55.56% (relative success)...
  ==> Mean distance from optimal ordering: 51.47% (relative success)...

- Evaluating policy #5/16: SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=100$, $\varepsilon=0.0001$) ...

Estimated order by the policy SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=100$, $\varepsilon=0.0001$) after 30000 steps: [0 2 3 5 8 7 1 4 6] ...
  ==> Optimal arm identification: 77.78% (relative success)...
  ==> Manhattan   distance from optimal ordering: 50.62% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 85.56% (relative success)...
  ==> Spearman    distance from optimal ordering: 79.46% (relative success)...
  ==> Gestalt     distance from optimal ordering: 55.56% (relative success)...
  ==> Mean distance from optimal ordering: 67.80% (relative success)...

- Evaluating policy #6/16: SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=100$, $\varepsilon=0.001$) ...

Estimated order by the policy SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=100$, $\varepsilon=0.001$) after 30000 steps: [1 2 3 4 7 8 5 0 6] ...
  ==> Optimal arm identification: 77.78% (relative success)...
  ==> Manhattan   distance from optimal ordering: 50.62% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 85.56% (relative success)...
  ==> Spearman    distance from optimal ordering: 66.83% (relative success)...
  ==> Gestalt     distance from optimal ordering: 66.67% (relative success)...
  ==> Mean distance from optimal ordering: 67.42% (relative success)...

- Evaluating policy #7/16: SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=100$, $\varepsilon=0.01$) ...

Estimated order by the policy SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=100$, $\varepsilon=0.01$) after 30000 steps: [2 3 4 5 7 1 8 0 6] ...
  ==> Optimal arm identification: 77.78% (relative success)...
  ==> Manhattan   distance from optimal ordering: 35.80% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 59.58% (relative success)...
  ==> Spearman    distance from optimal ordering: 36.32% (relative success)...
  ==> Gestalt     distance from optimal ordering: 66.67% (relative success)...
  ==> Mean distance from optimal ordering: 49.59% (relative success)...

- Evaluating policy #8/16: SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=500$, $\varepsilon=0.0001$) ...

Estimated order by the policy SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=500$, $\varepsilon=0.0001$) after 30000 steps: [4 2 7 6 8 0 1 5 3] ...
  ==> Optimal arm identification: 44.44% (relative success)...
  ==> Manhattan   distance from optimal ordering: 16.05% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 32.33% (relative success)...
  ==> Spearman    distance from optimal ordering: 42.45% (relative success)...
  ==> Gestalt     distance from optimal ordering: 33.33% (relative success)...
  ==> Mean distance from optimal ordering: 31.04% (relative success)...

- Evaluating policy #9/16: SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=500$, $\varepsilon=0.001$) ...

Estimated order by the policy SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=500$, $\varepsilon=0.001$) after 30000 steps: [1 5 6 8 7 2 4 3 0] ...
  ==> Optimal arm identification: 11.11% (relative success)...
  ==> Manhattan   distance from optimal ordering: 16.05% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 59.58% (relative success)...
  ==> Spearman    distance from optimal ordering: 61.93% (relative success)...
  ==> Gestalt     distance from optimal ordering: 44.44% (relative success)...
  ==> Mean distance from optimal ordering: 45.50% (relative success)...

- Evaluating policy #10/16: SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=500$, $\varepsilon=0.01$) ...

Estimated order by the policy SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=500$, $\varepsilon=0.01$) after 30000 steps: [4 1 0 3 6 7 2 5 8] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 60.49% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 90.47% (relative success)...
  ==> Spearman    distance from optimal ordering: 91.24% (relative success)...
  ==> Gestalt     distance from optimal ordering: 44.44% (relative success)...
  ==> Mean distance from optimal ordering: 71.66% (relative success)...

- Evaluating policy #11/16: SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=1000$, $\varepsilon=0.0001$) ...

Estimated order by the policy SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=1000$, $\varepsilon=0.0001$) after 30000 steps: [5 4 0 6 7 8 2 3 1] ...
  ==> Optimal arm identification: 22.22% (relative success)...
  ==> Manhattan   distance from optimal ordering: 16.05% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 32.33% (relative success)...
  ==> Spearman    distance from optimal ordering: 42.45% (relative success)...
  ==> Gestalt     distance from optimal ordering: 44.44% (relative success)...
  ==> Mean distance from optimal ordering: 33.82% (relative success)...

- Evaluating policy #12/16: SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=1000$, $\varepsilon=0.001$) ...

Estimated order by the policy SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=1000$, $\varepsilon=0.001$) after 30000 steps: [4 2 7 8 5 6 3 1 0] ...
  ==> Optimal arm identification: 11.11% (relative success)...
  ==> Manhattan   distance from optimal ordering: 16.05% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 85.56% (relative success)...
  ==> Spearman    distance from optimal ordering: 81.25% (relative success)...
  ==> Gestalt     distance from optimal ordering: 33.33% (relative success)...
  ==> Mean distance from optimal ordering: 54.05% (relative success)...

- Evaluating policy #13/16: SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=1000$, $\varepsilon=0.01$) ...

Estimated order by the policy SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=1000$, $\varepsilon=0.01$) after 30000 steps: [4 3 1 2 8 6 5 0 7] ...
  ==> Optimal arm identification: 88.89% (relative success)...
  ==> Manhattan   distance from optimal ordering: 45.68% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 32.33% (relative success)...
  ==> Spearman    distance from optimal ordering: 48.35% (relative success)...
  ==> Gestalt     distance from optimal ordering: 33.33% (relative success)...
  ==> Mean distance from optimal ordering: 39.92% (relative success)...

- Evaluating policy #14/16: SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=2000$, $\varepsilon=0.0001$) ...

Estimated order by the policy SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=2000$, $\varepsilon=0.0001$) after 30000 steps: [8 5 4 1 2 3 7 6 0] ...
  ==> Optimal arm identification: 11.11% (relative success)...
  ==> Manhattan   distance from optimal ordering: 25.93% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 70.29% (relative success)...
  ==> Spearman    distance from optimal ordering: 64.42% (relative success)...
  ==> Gestalt     distance from optimal ordering: 44.44% (relative success)...
  ==> Mean distance from optimal ordering: 51.27% (relative success)...

- Evaluating policy #15/16: SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=2000$, $\varepsilon=0.001$) ...

Estimated order by the policy SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=2000$, $\varepsilon=0.001$) after 30000 steps: [8 6 7 1 3 0 4 5 2] ...
  ==> Optimal arm identification: 33.33% (relative success)...
  ==> Manhattan   distance from optimal ordering: 11.11% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 85.56% (relative success)...
  ==> Spearman    distance from optimal ordering: 88.84% (relative success)...
  ==> Gestalt     distance from optimal ordering: 22.22% (relative success)...
  ==> Mean distance from optimal ordering: 51.93% (relative success)...

- Evaluating policy #16/16: SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=2000$, $\varepsilon=0.01$) ...

Estimated order by the policy SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=2000$, $\varepsilon=0.01$) after 30000 steps: [0 1 3 7 4 2 8 6 5] ...
  ==> Optimal arm identification: 66.67% (relative success)...
  ==> Manhattan   distance from optimal ordering: 65.43% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 93.94% (relative success)...
  ==> Spearman    distance from optimal ordering: 95.01% (relative success)...
  ==> Gestalt     distance from optimal ordering: 55.56% (relative success)...
  ==> Mean distance from optimal ordering: 77.49% (relative success)...
Giving the final ranks ...

Final ranking for this environment #0 :
- Policy 'SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=2000$, $\varepsilon=0.001$)'	was ranked	1 / 16 for this simulation (last regret = 701.4).
- Policy 'SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=1000$, $\varepsilon=0.01$)'	was ranked	2 / 16 for this simulation (last regret = 744.4).
- Policy 'SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=2000$, $\varepsilon=0.01$)'	was ranked	3 / 16 for this simulation (last regret = 864.4).
- Policy 'SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=1000$, $\varepsilon=0.001$)'	was ranked	4 / 16 for this simulation (last regret = 951.9).
- Policy 'SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=2000$, $\varepsilon=0.0001$)'	was ranked	5 / 16 for this simulation (last regret = 1028.4).
- Policy 'SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=500$, $\varepsilon=0.01$)'	was ranked	6 / 16 for this simulation (last regret = 1146.65).
- Policy 'SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=1000$, $\varepsilon=0.0001$)'	was ranked	7 / 16 for this simulation (last regret = 1154.4).
- Policy 'SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=500$, $\varepsilon=0.001$)'	was ranked	8 / 16 for this simulation (last regret = 1384.9).
- Policy 'SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=500$, $\varepsilon=0.0001$)'	was ranked	9 / 16 for this simulation (last regret = 1490.9).
- Policy 'SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=100$, $\varepsilon=0.01$)'	was ranked	10 / 16 for this simulation (last regret = 3101.9).
- Policy 'UCB($\alpha=0.5$)'	was ranked	11 / 16 for this simulation (last regret = 3175.4).
- Policy 'SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=100$, $\varepsilon=0.0001$)'	was ranked	12 / 16 for this simulation (last regret = 3309.9).
- Policy 'SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=100$, $\varepsilon=0.001$)'	was ranked	13 / 16 for this simulation (last regret = 3315.4).
- Policy 'SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=50$, $\varepsilon=0.01$)'	was ranked	14 / 16 for this simulation (last regret = 4125.15).
- Policy 'SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=50$, $\varepsilon=0.0001$)'	was ranked	15 / 16 for this simulation (last regret = 4141.65).
- Policy 'SlidingWindowsRestart(UCB($\alpha=0.5$), $T_0=50$, $\varepsilon=0.001$)'	was ranked	16 / 16 for this simulation (last regret = 4213.65).

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 for 1-player problem... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 for 1-player problem... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 for 1-player problem... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
 - Not plotting probability of picking the best arm as we used random events ...
   ==> FIXME correct this bug
Done for simulations main.py ...
