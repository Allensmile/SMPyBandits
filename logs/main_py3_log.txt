 - Setting dpi of all figures to 110 ...
 - Setting 'figsize' of all figures to (19.8, 10.8) ...
Info: Using the regular tqdm() decorator ...
Info: numba.jit seems to be available.
Info: numba.jit seems to be available.
Loaded experiments configuration from 'configuration.py' :
configuration['policies'] = [{'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>}, {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCB.klUCB'>}, {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>}, {'params': {}, 'archtype': <class 'Policies.BayesUCB.BayesUCB'>}]
plots/ is already a directory here...
Number of policies in this comparison: 5
Time horizon: 30000
Number of repetitions: 100
Sampling rate for saving, delta_t_save: 1
Sampling rate for plotting, delta_t_plot: 50
Number of jobs for parallelization: 4
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'params': [0.001, 0.001, 0.001, 0.001, 0.005, 0.005, 0.005, 0.005, 0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.1, 0.1, 0.2, 0.5], 'arm_type': <class 'Arms.Bernoulli.Bernoulli'>} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [0.001, 0.001, 0.001, 0.001, 0.005, 0.005, 0.005, 0.005, 0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.1, 0.1, 0.2, 0.5]
 - with 'arms' = [B(0.001), B(0.001), B(0.001), B(0.001), B(0.005), B(0.005), B(0.005), B(0.005), B(0.01), B(0.01), B(0.01), B(0.01), B(0.02), B(0.02), B(0.02), B(0.02), B(0.02), B(0.02), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.1), B(0.1), B(0.2), B(0.5)]
 - with 'means' = [ 0.001  0.001  0.001  0.001  0.005  0.005  0.005  0.005  0.01   0.01   0.01
  0.01   0.02   0.02   0.02   0.02   0.02   0.02   0.05   0.05   0.05   0.05
  0.05   0.05   0.05   0.05   0.05   0.05   0.05   0.05   0.1    0.1    0.2
  0.5  ]
 - with 'nbArms' = 34
 - with 'maxArm' = 0.5
 - with 'minArm' = 0.001

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 28.5 ... 
 - a Optimal Arm Identification factor H_OI(mu) = 52.01% ...
Number of environments to try: 1

Evaluating environment: MAB(nbArms: 34, arms: [B(0.001), B(0.001), B(0.001), B(0.001), B(0.005), B(0.005), B(0.005), B(0.005), B(0.01), B(0.01), B(0.01), B(0.01), B(0.02), B(0.02), B(0.02), B(0.02), B(0.02), B(0.02), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.1), B(0.1), B(0.2), B(0.5)], minArm: 0.001, maxArm: 0.5)
- Adding policy #1 = {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][0]' = {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
- Adding policy #2 = {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][1]' = {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>} ...
- Adding policy #3 = {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCB.klUCB'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][2]' = {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCB.klUCB'>} ...
- Adding policy #4 = {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][3]' = {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>} ...
- Adding policy #5 = {'params': {}, 'archtype': <class 'Policies.BayesUCB.BayesUCB'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][4]' = {'params': {}, 'archtype': <class 'Policies.BayesUCB.BayesUCB'>} ...

- Evaluating policy #1/5: UCB($\alpha=0.5$) ...

Estimated order by the policy UCB($\alpha=0.5$) after 30000 steps: [23 14  2 17 32 22 19 26 25 24 28 21 20 18 29 27  0 16 13 12 11 10  9  8  7
  6  5  4  3  1 15 30 31 33] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 21.45% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 96.34% (relative success)...
  ==> Spearman    distance from optimal ordering: 81.70% (relative success)...
  ==> Gestalt     distance from optimal ordering: 20.59% (relative success)...
  ==> Mean distance from optimal ordering: 55.02% (relative success)...

- Evaluating policy #2/5: Thompson ...

Estimated order by the policy Thompson after 30000 steps: [13  3 11  9 16 17 15 14  1  4 20  7 27  5 32 18 19 22 28 31 23  8  6 30  0
 10 12 21  2 24 29 26 25 33] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 46.02% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 98.16% (relative success)...
  ==> Spearman    distance from optimal ordering: 97.12% (relative success)...
  ==> Gestalt     distance from optimal ordering: 26.47% (relative success)...
  ==> Mean distance from optimal ordering: 66.94% (relative success)...

- Evaluating policy #3/5: KL-UCB(Bern) ...

Estimated order by the policy KL-UCB(Bern) after 30000 steps: [ 0 21 27 18 17 15 14 12 26 29 11  8  7  6  5  4  3  2  1 25 20 32 28 31 16
 23 22 10 19 13 30  9 24 33] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 42.56% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 58.51% (relative success)...
  ==> Spearman    distance from optimal ordering: 86.89% (relative success)...
  ==> Gestalt     distance from optimal ordering: 17.65% (relative success)...
  ==> Mean distance from optimal ordering: 51.40% (relative success)...

- Evaluating policy #4/5: KL-UCB+(Bern) ...

Estimated order by the policy KL-UCB+(Bern) after 30000 steps: [ 0 27 26 24 23 21 20 17 15 14 12 16 10  9  8  7  1  6  5 11  4  3  2 13 31
 29 22 19 28 18 25 30 32 33] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 44.64% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 43.68% (relative success)...
  ==> Spearman    distance from optimal ordering: 87.70% (relative success)...
  ==> Gestalt     distance from optimal ordering: 14.71% (relative success)...
  ==> Mean distance from optimal ordering: 47.68% (relative success)...

- Evaluating policy #5/5: BayesUCB ...

Estimated order by the policy BayesUCB after 30000 steps: [ 0 29 28 27 25 24 20 15 14 13 12 16 10  9  8  7  1  2  6  3 11  5  4 31 26
 30 22 19 18 17 32 23 21 33] ...
  ==> Optimal arm identification: 100.00% (relative success)...
  ==> Manhattan   distance from optimal ordering: 39.79% (relative success)...
  ==> Kendell Tau distance from optimal ordering: 15.28% (relative success)...
  ==> Spearman    distance from optimal ordering: 67.07% (relative success)...
  ==> Gestalt     distance from optimal ordering: 23.53% (relative success)...
  ==> Mean distance from optimal ordering: 36.42% (relative success)...
Giving the final ranks ...

Final ranking for this environment #0 :
- Policy 'UCB($\alpha=0.5$)'	was ranked	1 / 5 for this simulation (last regret = 179.3).
- Policy 'KL-UCB+(Bern)'	was ranked	2 / 5 for this simulation (last regret = 211.27).
- Policy 'Thompson'	was ranked	3 / 5 for this simulation (last regret = 236.1).
- Policy 'BayesUCB'	was ranked	4 / 5 for this simulation (last regret = 248.19).
- Policy 'KL-UCB(Bern)'	was ranked	5 / 5 for this simulation (last regret = 268.85).
 - Plotting the cumulative rewards, and saving the plot to plots/T30000_N100__5_algos/main____env1-1_6730376012394469761 ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 28.5 for 1-player problem... 
 - a Optimal Arm Identification factor H_OI(mu) = 52.01% ...
Saving figure with format png, to file 'plots/T30000_N100__5_algos/main____env1-1_6730376012394469761.png'...
       Saved! 'plots/T30000_N100__5_algos/main____env1-1_6730376012394469761.png' created of size '225764b', at 'Wed Mar 29 17:16:55 2017' ...
Saving figure with format pdf, to file 'plots/T30000_N100__5_algos/main____env1-1_6730376012394469761.pdf'...
       Saved! 'plots/T30000_N100__5_algos/main____env1-1_6730376012394469761.pdf' created of size '67079b', at 'Wed Mar 29 17:16:55 2017' ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 28.5 for 1-player problem... 
 - a Optimal Arm Identification factor H_OI(mu) = 52.01% ...
Saving figure with format png, to file 'plots/T30000_N100__5_algos/main_semilogx____env1-1_6730376012394469761.png'...
       Saved! 'plots/T30000_N100__5_algos/main_semilogx____env1-1_6730376012394469761.png' created of size '223067b', at 'Wed Mar 29 17:16:56 2017' ...
Saving figure with format pdf, to file 'plots/T30000_N100__5_algos/main_semilogx____env1-1_6730376012394469761.pdf'...
       Saved! 'plots/T30000_N100__5_algos/main_semilogx____env1-1_6730376012394469761.pdf' created of size '66284b', at 'Wed Mar 29 17:16:56 2017' ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 28.5 for 1-player problem... 
 - a Optimal Arm Identification factor H_OI(mu) = 52.01% ...
Saving figure with format png, to file 'plots/T30000_N100__5_algos/main_STD_semilogx____env1-1_6730376012394469761.png'...
       Saved! 'plots/T30000_N100__5_algos/main_STD_semilogx____env1-1_6730376012394469761.png' created of size '288311b', at 'Wed Mar 29 17:16:57 2017' ...
Saving figure with format pdf, to file 'plots/T30000_N100__5_algos/main_STD_semilogx____env1-1_6730376012394469761.pdf'...
       Saved! 'plots/T30000_N100__5_algos/main_STD_semilogx____env1-1_6730376012394469761.pdf' created of size '117225b', at 'Wed Mar 29 17:16:57 2017' ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 28.5 for 1-player problem... 
 - a Optimal Arm Identification factor H_OI(mu) = 52.01% ...
Saving figure with format png, to file 'plots/T30000_N100__5_algos/main_MaxMin_STD_semilogx____env1-1_6730376012394469761.png'...
       Saved! 'plots/T30000_N100__5_algos/main_MaxMin_STD_semilogx____env1-1_6730376012394469761.png' created of size '274259b', at 'Wed Mar 29 17:16:58 2017' ...
Saving figure with format pdf, to file 'plots/T30000_N100__5_algos/main_MaxMin_STD_semilogx____env1-1_6730376012394469761.pdf'...
       Saved! 'plots/T30000_N100__5_algos/main_MaxMin_STD_semilogx____env1-1_6730376012394469761.pdf' created of size '116186b', at 'Wed Mar 29 17:16:58 2017' ...
 - Plotting the mean rewards, and saving the plot to plots/T30000_N100__5_algos/main_MeanRewards____env1-1_6730376012394469761 ...

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 28.5 for 1-player problem... 
 - a Optimal Arm Identification factor H_OI(mu) = 52.01% ...
Saving figure with format png, to file 'plots/T30000_N100__5_algos/main_MeanRewards____env1-1_6730376012394469761.png'...
       Saved! 'plots/T30000_N100__5_algos/main_MeanRewards____env1-1_6730376012394469761.png' created of size '152741b', at 'Wed Mar 29 17:16:59 2017' ...
Saving figure with format pdf, to file 'plots/T30000_N100__5_algos/main_MeanRewards____env1-1_6730376012394469761.pdf'...
       Saved! 'plots/T30000_N100__5_algos/main_MeanRewards____env1-1_6730376012394469761.pdf' created of size '44926b', at 'Wed Mar 29 17:16:59 2017' ...
 - Plotting the results, and saving the plot to plots/T30000_N100__5_algos/main_BestArmPulls____env1-1_6730376012394469761 ...
Saving figure with format png, to file 'plots/T30000_N100__5_algos/main_BestArmPulls____env1-1_6730376012394469761.png'...
       Saved! 'plots/T30000_N100__5_algos/main_BestArmPulls____env1-1_6730376012394469761.png' created of size '148605b', at 'Wed Mar 29 17:16:59 2017' ...
Saving figure with format pdf, to file 'plots/T30000_N100__5_algos/main_BestArmPulls____env1-1_6730376012394469761.pdf'...
       Saved! 'plots/T30000_N100__5_algos/main_BestArmPulls____env1-1_6730376012394469761.pdf' created of size '37928b', at 'Wed Mar 29 17:17:00 2017' ...


==> To see the figures, do :
eog plots/T30000_N100__5_algos/main*6730376012394469761.png
Done for simulations main.py ...
