Loaded experiments configuration from 'configuration.py' :
configuration['policies'] = [{'archtype': <class 'Policies.UCBopt.UCBopt'>, 'params': {}}, {'archtype': <class 'Policies.Softmax.SoftmaxDecreasing'>, 'params': {}}, {'archtype': <class 'Policies.MOSS.MOSS'>, 'params': {}}, {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}}, {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {}}, {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}}, {'archtype': <class 'Policies.Aggr.Aggr'>, 'params': {'children': [{'archtype': <class 'Policies.UCBopt.UCBopt'>, 'params': {}}, {'archtype': <class 'Policies.Softmax.SoftmaxDecreasing'>, 'params': {}}, {'archtype': <class 'Policies.MOSS.MOSS'>, 'params': {}}, {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}}, {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {}}, {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}}], 'decreaseRate': 5000.0, 'update_all_children': False, 'learningRate': 0.01}}]
plots/ is already a directory here...
Number of policies in this comparaison: 7
Time horizon: 10000
Number of repetitions: 20
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'params': [0.001, 0.001, 0.001, 0.001, 0.005, 0.005, 0.005, 0.005, 0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.1, 0.1, 0.2, 0.5], 'arm_type': <class 'Arms.Bernoulli.Bernoulli'>} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [0.001, 0.001, 0.001, 0.001, 0.005, 0.005, 0.005, 0.005, 0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.1, 0.1, 0.2, 0.5]
 - with 'arms' = [B(0.001), B(0.001), B(0.001), B(0.001), B(0.005), B(0.005), B(0.005), B(0.005), B(0.01), B(0.01), B(0.01), B(0.01), B(0.02), B(0.02), B(0.02), B(0.02), B(0.02), B(0.02), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.1), B(0.1), B(0.2), B(0.5)]
 - with 'nbArms' = 34
 - with 'maxArm' = 0.5
Number of environments to try: 1

Evaluating environment: <MAB{'nbArms': 34, 'arms': [B(0.001), B(0.001), B(0.001), B(0.001), B(0.005), B(0.005), B(0.005), B(0.005), B(0.01), B(0.01), B(0.01), B(0.01), B(0.02), B(0.02), B(0.02), B(0.02), B(0.02), B(0.02), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.05), B(0.1), B(0.1), B(0.2), B(0.5)], 'maxArm': 0.5}>
- Adding policy #1 = {'archtype': <class 'Policies.UCBopt.UCBopt'>, 'params': {}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][0]' = {'archtype': <class 'Policies.UCBopt.UCBopt'>, 'params': {}} ...
- Adding policy #2 = {'archtype': <class 'Policies.Softmax.SoftmaxDecreasing'>, 'params': {}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][1]' = {'archtype': <class 'Policies.Softmax.SoftmaxDecreasing'>, 'params': {}} ...
- Adding policy #3 = {'archtype': <class 'Policies.MOSS.MOSS'>, 'params': {}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][2]' = {'archtype': <class 'Policies.MOSS.MOSS'>, 'params': {}} ...
- Adding policy #4 = {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][3]' = {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}} ...
- Adding policy #5 = {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][4]' = {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {}} ...
- Adding policy #6 = {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][5]' = {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}} ...
- Adding policy #7 = {'archtype': <class 'Policies.Aggr.Aggr'>, 'params': {'children': [{'archtype': <class 'Policies.UCBopt.UCBopt'>, 'params': {}}, {'archtype': <class 'Policies.Softmax.SoftmaxDecreasing'>, 'params': {}}, {'archtype': <class 'Policies.MOSS.MOSS'>, 'params': {}}, {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}}, {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {}}, {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}}], 'decreaseRate': 5000.0, 'update_all_children': False, 'learningRate': 0.01}} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][6]' = {'archtype': <class 'Policies.Aggr.Aggr'>, 'params': {'children': [{'archtype': <class 'Policies.UCBopt.UCBopt'>, 'params': {}}, {'archtype': <class 'Policies.Softmax.SoftmaxDecreasing'>, 'params': {}}, {'archtype': <class 'Policies.MOSS.MOSS'>, 'params': {}}, {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}}, {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {}}, {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}}], 'decreaseRate': 5000.0, 'update_all_children': False, 'learningRate': 0.01}} ...
  Creating this child player from a dictionnary 'children[0]' = {'archtype': <class 'Policies.UCBopt.UCBopt'>, 'params': {}} ...
  Creating this child player from a dictionnary 'children[1]' = {'archtype': <class 'Policies.Softmax.SoftmaxDecreasing'>, 'params': {}} ...
  Creating this child player from a dictionnary 'children[2]' = {'archtype': <class 'Policies.MOSS.MOSS'>, 'params': {}} ...
  Creating this child player from a dictionnary 'children[3]' = {'archtype': <class 'Policies.Thompson.Thompson'>, 'params': {}} ...
  Creating this child player from a dictionnary 'children[4]' = {'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>, 'params': {}} ...
  Creating this child player from a dictionnary 'children[5]' = {'archtype': <class 'Policies.BayesUCB.BayesUCB'>, 'params': {}} ...

- Evaluating policy #1/7: UCBopt ...

- Evaluating policy #2/7: Softmax(decreasing) ...

- Evaluating policy #3/7: MOSS ...

- Evaluating policy #4/7: Thompson ...

- Evaluating policy #5/7: klUCBPlus ...

- Evaluating policy #6/7: BayesUCB ...

- Evaluating policy #7/7: Aggr(nb: 6, rate: 0.01) ...
