 - Setting dpi of all figures to 110 ...
 - Setting 'figsize' of all figures to (19.8, 10.8) ...
Info: numba.jit seems to be available.
Info: numba.jit seems to be available.
Loaded experiments configuration from 'configuration.py' :
configuration['policies'] = [{'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {'alpha': 0.1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>}, {'params': {}, 'archtype': <class 'Policies.MOSS.MOSS'>}, {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>}, {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCB.klUCB'>}, {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>}, {'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}, 'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>}, {'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}, 'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>}, {'params': {}, 'archtype': <class 'Policies.BayesUCB.BayesUCB'>}]
plots/ is already a directory here...
Number of policies in this comparaison: 10
Time horizon: 5000
Number of repetitions: 4
Sampling rate DELTA_T_SAVE: 1
Creating a new MAB problem ...
  Reading arms of this MAB problem from a dictionnary 'configuration' = {'params': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], 'arm_type': <class 'Arms.Bernoulli.Bernoulli'>} ...
 - with 'arm_type' = <class 'Arms.Bernoulli.Bernoulli'>
 - with 'params' = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
 - with 'arms' = [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)]
 - with 'nbArms' = 9
 - with 'maxArm' = 0.9
 - with 'minArm' = 0.1

This MAB problem has: 
 - a [Lai & Robbins] complexity constant C(mu) = 7.52 ... 
 - a Optimal Arm Identification factor H_OI(mu) = 48.89% ...
Number of environments to try: 1

Evaluating environment: <MAB{'maxArm': 0.90000000000000002, 'minArm': 0.10000000000000001, 'arms': [B(0.1), B(0.2), B(0.3), B(0.4), B(0.5), B(0.6), B(0.7), B(0.8), B(0.9)], 'nbArms': 9}>
- Adding policy #1 = {'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][0]' = {'params': {'alpha': 1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
- Adding policy #2 = {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][1]' = {'params': {'alpha': 0.5}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
- Adding policy #3 = {'params': {'alpha': 0.1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][2]' = {'params': {'alpha': 0.1}, 'archtype': <class 'Policies.UCBalpha.UCBalpha'>} ...
- Adding policy #4 = {'params': {}, 'archtype': <class 'Policies.MOSS.MOSS'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][3]' = {'params': {}, 'archtype': <class 'Policies.MOSS.MOSS'>} ...
- Adding policy #5 = {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][4]' = {'params': {}, 'archtype': <class 'Policies.Thompson.Thompson'>} ...
- Adding policy #6 = {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCB.klUCB'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][5]' = {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCB.klUCB'>} ...
- Adding policy #7 = {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][6]' = {'params': {'klucb': <built-in function klucbBern>}, 'archtype': <class 'Policies.klUCBPlus.klUCBPlus'>} ...
- Adding policy #8 = {'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}, 'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][7]' = {'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}, 'archtype': <class 'Policies.klUCBHPlus.klUCBHPlus'>} ...
- Adding policy #9 = {'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}, 'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][8]' = {'params': {'klucb': <built-in function klucbBern>, 'horizon': 5000}, 'archtype': <class 'Policies.klUCBPlusPlus.klUCBPlusPlus'>} ...
- Adding policy #10 = {'params': {}, 'archtype': <class 'Policies.BayesUCB.BayesUCB'>} ...
  Creating this policy from a dictionnary 'self.cfg['policies'][9]' = {'params': {}, 'archtype': <class 'Policies.BayesUCB.BayesUCB'>} ...
[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
[0;32m/home/lilian/ownCloud/cloud.openmailbox.org/Th√®se_2016-17/src/AlgoBandits.git/main.py[0m in [0;36m<module>[0;34m()[0m
[1;32m     89[0m [0;34m[0m[0m
[1;32m     90[0m         [0;31m# Evaluate just that env[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 91[0;31m         [0mevaluation[0m[0;34m.[0m[0mstartOneEnv[0m[0;34m([0m[0menvId[0m[0;34m,[0m [0menv[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     92[0m [0;34m[0m[0m
[1;32m     93[0m         [0;32mif[0m [0msaveallfigs[0m[0;34m:[0m[0;34m[0m[0m

[0;32m/home/lilian/ownCloud/cloud.openmailbox.org/Th√®se_2016-17/src/AlgoBandits.git/Environment/Evaluator.py[0m in [0;36mstartOneEnv[0;34m(self, envId, env)[0m
[1;32m    120[0m         [0mmeans[0m [0;34m=[0m [0menv[0m[0;34m.[0m[0mmeans[0m[0;34m[0m[0m
[1;32m    121[0m         [0mbestarm[0m [0;34m=[0m [0menv[0m[0;34m.[0m[0mmaxArm[0m[0;34m[0m[0m
[0;32m--> 122[0;31m         [0mindex_bestarm[0m [0;34m=[0m [0mnp[0m[0;34m.[0m[0mnonzero[0m[0;34m([0m[0mnp[0m[0;34m.[0m[0misclose[0m[0;34m([0m[0mmeans[0m[0;34m,[0m [0mbestarm[0m[0;34m)[0m[0;34m)[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m[0m[0m
[0m[1;32m    123[0m [0;34m[0m[0m
[1;32m    124[0m         [0;32mdef[0m [0mstore[0m[0;34m([0m[0mr[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m

[0;32m/usr/local/lib/python3.5/dist-packages/numpy/core/numeric.py[0m in [0;36misclose[0;34m(a, b, rtol, atol, equal_nan)[0m
[1;32m   2555[0m     [0my[0m [0;34m=[0m [0marray[0m[0;34m([0m[0my[0m[0;34m,[0m [0mdtype[0m[0;34m=[0m[0mdt[0m[0;34m,[0m [0mcopy[0m[0;34m=[0m[0;32mFalse[0m[0;34m,[0m [0msubok[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0m
[1;32m   2556[0m [0;34m[0m[0m
[0;32m-> 2557[0;31m     [0mxfin[0m [0;34m=[0m [0misfinite[0m[0;34m([0m[0mx[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   2558[0m     [0myfin[0m [0;34m=[0m [0misfinite[0m[0;34m([0m[0my[0m[0;34m)[0m[0;34m[0m[0m
[1;32m   2559[0m     [0;32mif[0m [0mall[0m[0;34m([0m[0mxfin[0m[0;34m)[0m [0;32mand[0m [0mall[0m[0;34m([0m[0myfin[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m

[0;31mTypeError[0m: ufunc 'isfinite' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''
